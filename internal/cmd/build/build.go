package build

import (
	"fmt"
	"strings"

	"github.com/aws-cloudformation/rain/cft"
	"github.com/aws-cloudformation/rain/cft/format"
	"github.com/aws-cloudformation/rain/internal/aws/cfn"
	"github.com/aws-cloudformation/rain/internal/config"
	"github.com/aws-cloudformation/rain/internal/node"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var buildListFlag = false
var bareTemplate = false
var buildJSON = false
var promptFlag = false
var showSchema = false

func buildProp(n *yaml.Node, propName string, prop cfn.Prop, schema cfn.Schema) error {
	// "$ref"
	// node.Add(n, propName, "TODO") // TODO - complex properties
	config.Debugf("%s: %v", propName, prop)

	switch prop.Type {
	case "string":
		if len(prop.Enum) > 0 {
			node.Add(n, propName, strings.Join(prop.Enum, " or "))
		} else {
			node.Add(n, propName, "STRING")
		}
	case "object":
		node.Add(n, propName, "TODO")
		var objectProps *cfn.Prop
		if prop.Properties != nil {
			objectProps = prop.Properties
		} else if prop.Ref != "" {
			reffed := strings.Replace(prop.Ref, "#/definitions/", "", 1)
			var hasDef bool
			if objectProps, hasDef = schema.Definitions[reffed]; !hasDef {
				config.Debugf("%s: %s not found in definitions", propName, reffed)
				node.Add(n, propName, "{?}")
			}
		} else {
			config.Debugf("%s: object type without properties or ref?", propName)
			node.Add(n, propName, "??")
		}
		if objectProps != nil {
			// TODO - recurse on this to add sub properties
			node.Add(n, propName, "{complex-TODO}")
		}
	case "array":
		// Look at items to see what type is in the array
		if prop.Items != nil {
			// TODO - Add a sequence node, then add 2 sample elements
		} else {
			config.Debugf("%s: array without items?", propName)
			node.Add(n, propName, "[?]")
		}
	case "boolean":
		node.Add(n, propName, "BOOLEAN")
	case "number":
		node.Add(n, propName, "NUMBER")
	case "integer":
		node.Add(n, propName, "INTEGER")
	default:
		node.Add(n, propName, "?")
	}

	return nil
}

func build(typeNames []string) (cft.Template, error) {
	t := cft.Template{}

	// Create the template header sections
	t.Node = &yaml.Node{Kind: yaml.DocumentNode, Content: make([]*yaml.Node, 0)}
	t.Node.Content = append(t.Node.Content,
		&yaml.Node{Kind: yaml.MappingNode, Content: make([]*yaml.Node, 0)})
	t.AddScalarSection(cft.AWSTemplateFormatVersion, "2010-09-09")
	t.AddScalarSection(cft.Description, "Generated by rain")

	// Add the Resources section
	resourceMap, err := t.AddMapSection(cft.Resources)
	if err != nil {
		return t, err
	}

	for _, typeName := range typeNames {
		// Call CCAPI to get the schema for the resource
		schemaSource, err := cfn.GetTypeSchema(typeName)
		config.Debugf("schema source: %s", schemaSource)
		if err != nil {
			return t, err
		}

		schema, err := cfn.ParseSchema(schemaSource)
		if err != nil {
			return t, err
		}

		// Add a node for the resource
		shortName := strings.Split(typeName, "::")[2]
		r := node.AddMap(resourceMap, "My"+shortName)
		node.Add(r, "Type", typeName)
		props := node.AddMap(r, "Properties")

		// Add all props or just the required ones
		if bareTemplate {
			for _, requiredName := range schema.Required {
				if p, hasProp := schema.Properties[requiredName]; hasProp {
					err = buildProp(props, requiredName, *p, *schema)
					if err != nil {
						return t, err
					}
				} else {
					return t, fmt.Errorf("required: %s not found in properties", requiredName)
				}
			}
		} else {
			for k, p := range schema.Properties {
				err = buildProp(props, k, *p, *schema)
				if err != nil {
					return t, err
				}
			}
		}
	}

	return t, nil
}

// Cmd is the build command's entrypoint
var Cmd = &cobra.Command{
	Use:                   "build [<resource type>] or <prompt>",
	Short:                 "Create CloudFormation templates",
	Long:                  "Outputs a CloudFormation template containing the named resource types.",
	DisableFlagsInUseLine: true,
	Run: func(cmd *cobra.Command, args []string) {
		if buildListFlag {
			types, err := cfn.ListResourceTypes()
			if err != nil {
				panic(err)
			}
			for _, t := range types {
				fmt.Println(t)
			}
			return
		}

		if len(args) == 0 {
			cmd.Help()
			return
		}

		// --schema -s
		// Download and print out the registry schema
		if showSchema {
			schema, err := cfn.GetTypeSchema(args[0])
			if err != nil {
				panic(err)
			}
			fmt.Println(schema)
			return
		}

		// --prompt -p
		// Invoke Bedrock with Claude 2 to generate the template
		if promptFlag {
			prompt(strings.Join(args, " "))
			return
		}

		t, err := build(args)
		if err != nil {
			panic(err)
		}
		out := format.String(t, format.Options{
			JSON: buildJSON,
		})
		fmt.Println(out)
	},
}

func init() {
	Cmd.Flags().BoolVarP(&buildListFlag, "list", "l", false, "List all CloudFormation resource types")
	Cmd.Flags().BoolVarP(&promptFlag, "prompt", "p", false, "Generate a template using Bedrock and a prompt")
	Cmd.Flags().BoolVarP(&bareTemplate, "bare", "b", false, "Produce a minimal template, omitting all optional resource properties")
	Cmd.Flags().BoolVarP(&buildJSON, "json", "j", false, "Output the template as JSON (default format: YAML)")
	Cmd.Flags().BoolVarP(&showSchema, "schema", "s", false, "Output the registry schema for a resource type")
	Cmd.Flags().BoolVar(&config.Debug, "debug", false, "Output debugging information")
}
