/// AWS::AppFlow::Flow
///
/// Generated by rain build --pkl-class AWS::AppFlow::Flow
module aws.appflow.flow

import "../../cloudformation.pkl"

/// 
open class FlowGoogleAnalyticsSourceProperties {
    Object: FlowObject
}

/// 
open class FlowInforNexusSourceProperties {
    Object: FlowObject
}

/// 
open class FlowDatadogSourceProperties {
    Object: FlowObject
}

typealias FlowWriteOperationType = String|Mapping


/// 
open class FlowEventBridgeDestinationProperties {
    Object: FlowObject
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
}

/// Trigger settings of the flow.
open class FlowGlueDataCatalog {
    RoleArn: String(matches(Regex(#"arn:aws:iam:.*:[0-9]+:.*"#)))|Mapping
    DatabaseName: String(matches(Regex(#"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*"#)))|Mapping
    TablePrefix: String(matches(Regex(#"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*"#)))|Mapping
}

typealias FlowSingularConnectorOperator = String|Mapping


typealias FlowStatus = String|Mapping


typealias FlowPrefixFormat = String|Mapping


typealias FlowPathPrefix = String|Mapping


/// 
open class FlowTrendmicroSourceProperties {
    Object: FlowObject
}

typealias FlowOperatorPropertiesKeys = String|Mapping


typealias FlowIncludeAllVersions = Boolean|Mapping


typealias FlowTargetFileSize = Int|Mapping


/// 
open class FlowAggregationConfig {
    AggregationType: (FlowAggregationType)?
    TargetFileSize: (FlowTargetFileSize)?
}

/// 
open class FlowZendeskSourceProperties {
    Object: FlowObject
}

typealias FlowMarketoConnectorOperator = String|Mapping


/// Source connector details required to query a connector
open class FlowSourceConnectorProperties {
    GoogleAnalytics: (FlowGoogleAnalyticsSourceProperties)?
    Marketo: (FlowMarketoSourceProperties)?
    Salesforce: (FlowSalesforceSourceProperties)?
    Pardot: (FlowPardotSourceProperties)?
    ServiceNow: (FlowServiceNowSourceProperties)?
    Slack: (FlowSlackSourceProperties)?
    Dynatrace: (FlowDynatraceSourceProperties)?
    Singular: (FlowSingularSourceProperties)?
    Amplitude: (FlowAmplitudeSourceProperties)?
    Datadog: (FlowDatadogSourceProperties)?
    InforNexus: (FlowInforNexusSourceProperties)?
    Trendmicro: (FlowTrendmicroSourceProperties)?
    Zendesk: (FlowZendeskSourceProperties)?
    CustomConnector: (FlowCustomConnectorSourceProperties)?
    S3: (FlowS3SourceProperties)?
    SAPOData: (FlowSAPODataSourceProperties)?
    Veeva: (FlowVeevaSourceProperties)?
}

typealias S3InputFormatConfigS3InputFileType = "CSV"|"JSON"

/// 
open class FlowS3InputFormatConfig {
    S3InputFileType: (S3InputFormatConfigS3InputFileType|Mapping)?
}

typealias FlowTriggerType = String|Mapping


typealias ScheduledTriggerPropertiesDataPullMode = "Incremental"|"Complete"

/// Details required for scheduled trigger type
open class FlowScheduledTriggerProperties {
    FlowErrorDeactivationThreshold: (Int|Mapping)?
    ScheduleExpression: String|Mapping
    DataPullMode: (ScheduledTriggerPropertiesDataPullMode|Mapping)?
    ScheduleStartTime: (Number|Mapping)?
    ScheduleEndTime: (Number|Mapping)?
    FirstExecutionFrom: (Number|Mapping)?
    TimeZone: (String|Mapping)?
    ScheduleOffset: (Number|Mapping)?
}

/// 
open class FlowServiceNowSourceProperties {
    Object: FlowObject
}

/// 
open class FlowSAPODataSourceProperties {
    paginationConfig: (FlowSAPODataPaginationConfig)?
    ObjectPath: FlowObject
    parallelismConfig: (FlowSAPODataParallelismConfig)?
}

typealias FlowDatetimeTypeFieldName = String|Mapping


typealias FlowDynatraceConnectorOperator = String|Mapping


typealias FlowZendeskConnectorOperator = String|Mapping


/// 
open class FlowPrefixConfig {
    PrefixType: (FlowPrefixType)?
    PrefixFormat: (FlowPrefixFormat)?
    PathPrefixHierarchy: (FlowPathPrefixHierarchy)?
}

typealias FlowInforNexusConnectorOperator = String|Mapping


/// 
open class FlowErrorHandlingConfig {
    FailOnFirstError: (Boolean|Mapping)?
    BucketPrefix: (FlowBucketPrefix)?
    BucketName: (FlowBucketName)?
}

/// SAP Source connector parallelism factor
open class FlowSAPODataParallelismConfig {
    maxParallelism: FlowSAPODataMaxParallelism
}

/// 
open class FlowS3OutputFormatConfig {
    FileType: (FlowFileType)?
    PrefixConfig: (FlowPrefixConfig)?
    AggregationConfig: (FlowAggregationConfig)?
    PreserveSourceDataTyping: (FlowPreserveSourceDataTyping)?
}

/// 
open class FlowSalesforceDestinationProperties {
    Object: FlowObject
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
    IdFieldNames: (Listing<String|Mapping>)?
    WriteOperationType: (FlowWriteOperationType)?
    DataTransferApi: (FlowDataTransferApi)?
}

/// 
open class FlowCustomConnectorSourceProperties {
    CustomProperties: (FlowCustomProperties)?
    DataTransferApi: (Dynamic)?
    EntityName: FlowEntityName
}

typealias FlowUpsolverBucketName = String|Mapping


typealias FlowIncludeDeletedRecords = Boolean|Mapping


typealias FlowTaskType = String|Mapping


typealias FlowBucketPrefix = String|Mapping


typealias FlowIncludeSourceFiles = Boolean|Mapping


/// 
open class FlowAmplitudeSourceProperties {
    Object: FlowObject
}

/// Trigger settings of the flow.
open class FlowTriggerConfig {
    TriggerType: FlowTriggerType
    TriggerProperties: (FlowScheduledTriggerProperties)?
}

typealias FlowConnectorProfileName = String|Mapping


/// 
open class FlowMarketoDestinationProperties {
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
    Object: FlowObject
}

typealias FlowPathPrefixHierarchy = Listing<(FlowPathPrefix)?>


typealias FlowAmplitudeConnectorOperator = String|Mapping


/// 
open class FlowS3SourceProperties {
    S3InputFormatConfig: (FlowS3InputFormatConfig)?
    BucketName: FlowBucketName
    BucketPrefix: FlowBucketPrefix
}

/// SAP Source connector page size
open class FlowSAPODataPaginationConfig {
    maxPageSize: FlowSAPODataMaxPageSize
}

typealias FlowCustomProperties = Mapping<String, Any>


typealias FlowFileType = String|Mapping


/// 
open class FlowVeevaSourceProperties {
    DocumentType: (FlowDocumentType)?
    IncludeSourceFiles: (FlowIncludeSourceFiles)?
    IncludeRenditions: (FlowIncludeRenditions)?
    IncludeAllVersions: (FlowIncludeAllVersions)?
    Object: FlowObject
}

/// 
open class FlowSalesforceSourceProperties {
    Object: FlowObject
    EnableDynamicFieldUpdate: (FlowEnableDynamicFieldUpdate)?
    IncludeDeletedRecords: (FlowIncludeDeletedRecords)?
    DataTransferApi: (FlowDataTransferApi)?
}

/// 
open class FlowCustomConnectorDestinationProperties {
    WriteOperationType: (FlowWriteOperationType)?
    IdFieldNames: (Listing<String|Mapping>)?
    CustomProperties: (FlowCustomProperties)?
    EntityName: FlowEntityName
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
}

typealias FlowDataTransferApi = String|Mapping


/// 
open class FlowSuccessResponseHandlingConfig {
    BucketName: (FlowBucketName)?
    BucketPrefix: (FlowBucketPrefix)?
}

/// 
open class FlowRedshiftDestinationProperties {
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
    Object: FlowObject
    IntermediateBucketName: FlowBucketName
    BucketPrefix: (FlowBucketPrefix)?
}

/// Destination connector details
open class FlowDestinationConnectorProperties {
    Redshift: (FlowRedshiftDestinationProperties)?
    S3: (FlowS3DestinationProperties)?
    Snowflake: (FlowSnowflakeDestinationProperties)?
    Upsolver: (FlowUpsolverDestinationProperties)?
    Zendesk: (FlowZendeskDestinationProperties)?
    CustomConnector: (FlowCustomConnectorDestinationProperties)?
    SAPOData: (FlowSAPODataDestinationProperties)?
    Salesforce: (FlowSalesforceDestinationProperties)?
    EventBridge: (FlowEventBridgeDestinationProperties)?
    LookoutMetrics: (FlowLookoutMetricsDestinationProperties)?
    Marketo: (FlowMarketoDestinationProperties)?
}

typealias FlowVeevaConnectorOperator = String|Mapping


typealias FlowAggregationType = String|Mapping


typealias FlowPreserveSourceDataTyping = Boolean|Mapping


typealias FlowObject = String|Mapping


typealias FlowEntityName = String|Mapping


/// 
open class FlowSingularSourceProperties {
    Object: FlowObject
}

/// 
open class FlowTask {
    ConnectorOperator: (FlowConnectorOperator)?
    DestinationField: (String|Mapping)?
    TaskType: FlowTaskType
    TaskProperties: (Listing<FlowTaskPropertiesObject>)?
    SourceFields: Listing<String|Mapping>
}

/// Configurations of metadata catalog of the flow.
open class FlowMetadataCatalogConfig {
    GlueDataCatalog: (FlowGlueDataCatalog)?
}

/// 
open class FlowMarketoSourceProperties {
    Object: FlowObject
}

/// 
open class FlowDynatraceSourceProperties {
    Object: FlowObject
}

/// Operation to be performed on provided source fields
open class FlowConnectorOperator {
    Amplitude: (FlowAmplitudeConnectorOperator)?
    SAPOData: (FlowSAPODataConnectorOperator)?
    Veeva: (FlowVeevaConnectorOperator)?
    Pardot: (FlowPardotConnectorOperator)?
    Trendmicro: (FlowTrendmicroConnectorOperator)?
    InforNexus: (FlowInforNexusConnectorOperator)?
    S3: (FlowS3ConnectorOperator)?
    ServiceNow: (FlowServiceNowConnectorOperator)?
    Zendesk: (FlowZendeskConnectorOperator)?
    CustomConnector: (FlowOperator)?
    Datadog: (FlowDatadogConnectorOperator)?
    Dynatrace: (FlowDynatraceConnectorOperator)?
    GoogleAnalytics: (FlowGoogleAnalyticsConnectorOperator)?
    Marketo: (FlowMarketoConnectorOperator)?
    Salesforce: (FlowSalesforceConnectorOperator)?
    Singular: (FlowSingularConnectorOperator)?
    Slack: (FlowSlackConnectorOperator)?
}

typealias FlowIncludeRenditions = Boolean|Mapping


typealias FlowName = String|Mapping


/// 
open class FlowUpsolverDestinationProperties {
    BucketName: FlowUpsolverBucketName
    BucketPrefix: (FlowBucketPrefix)?
    S3OutputFormatConfig: FlowUpsolverS3OutputFormatConfig
}

/// 
open class FlowUpsolverS3OutputFormatConfig {
    AggregationConfig: (FlowAggregationConfig)?
    FileType: (FlowFileType)?
    PrefixConfig: FlowPrefixConfig
}

typealias FlowGoogleAnalyticsConnectorOperator = String|Mapping


/// A label for tagging AppFlow resources
open class FlowTag {
    Key: String|Mapping
    Value: String|Mapping
}

typealias FlowSlackConnectorOperator = String|Mapping


/// 
open class FlowS3DestinationProperties {
    BucketName: FlowBucketName
    BucketPrefix: (FlowBucketPrefix)?
    S3OutputFormatConfig: (FlowS3OutputFormatConfig)?
}

typealias FlowApiVersion = String|Mapping


typealias FlowTrendmicroConnectorOperator = String|Mapping


typealias FlowBucketName = String|Mapping


typealias FlowPrefixType = String|Mapping


/// 
open class FlowSnowflakeDestinationProperties {
    Object: FlowObject
    IntermediateBucketName: FlowBucketName
    BucketPrefix: (FlowBucketPrefix)?
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
}

typealias FlowDatadogConnectorOperator = String|Mapping


/// Configuration for scheduled incremental data pull
open class FlowIncrementalPullConfig {
    DatetimeTypeFieldName: (FlowDatetimeTypeFieldName)?
}

/// 
open class FlowSlackSourceProperties {
    Object: FlowObject
}

/// 
open class FlowZendeskDestinationProperties {
    Object: FlowObject
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
    IdFieldNames: (Listing<String|Mapping>)?
    WriteOperationType: (FlowWriteOperationType)?
}

typealias FlowServiceNowConnectorOperator = String|Mapping


typealias FlowS3ConnectorOperator = String|Mapping


typealias FlowPardotConnectorOperator = String|Mapping


typealias FlowSAPODataMaxParallelism = Int|Mapping


typealias FlowEnableDynamicFieldUpdate = Boolean|Mapping


/// 
open class FlowLookoutMetricsDestinationProperties {
    Object: (FlowObject)?
}

/// An object used to store task related info
open class FlowTaskPropertiesObject {
    Key: FlowOperatorPropertiesKeys
    Value: String(matches(Regex(#".+"#)))|Mapping
}

typealias FlowSAPODataConnectorOperator = String|Mapping


typealias FlowOperator = String|Mapping


/// 
open class FlowPardotSourceProperties {
    Object: FlowObject
}

/// Configurations of Source connector of the flow.
open class FlowSourceFlowConfig {
    ConnectorType: FlowConnectorType
    ApiVersion: (FlowApiVersion)?
    ConnectorProfileName: (FlowConnectorProfileName)?
    SourceConnectorProperties: FlowSourceConnectorProperties
    IncrementalPullConfig: (FlowIncrementalPullConfig)?
}

/// 
open class FlowSAPODataDestinationProperties {
    ErrorHandlingConfig: (FlowErrorHandlingConfig)?
    SuccessResponseHandlingConfig: (FlowSuccessResponseHandlingConfig)?
    IdFieldNames: (Listing<String|Mapping>)?
    WriteOperationType: (FlowWriteOperationType)?
    ObjectPath: FlowObject
}

/// Configurations of destination connector.
open class FlowDestinationFlowConfig {
    ConnectorType: FlowConnectorType
    ApiVersion: (FlowApiVersion)?
    ConnectorProfileName: (FlowConnectorProfileName)?
    DestinationConnectorProperties: FlowDestinationConnectorProperties
}

typealias FlowSAPODataMaxPageSize = Int|Mapping


typealias FlowSalesforceConnectorOperator = String|Mapping


typealias FlowDocumentType = String|Mapping


typealias FlowConnectorType = String|Mapping


/// Resource schema for AWS::AppFlow::Flow.
open class Flow extends cloudformation.Resource {

    Type = "AWS::AppFlow::Flow"


    /// List of Tags.
    hidden Tags: (Listing<FlowTag>)?

    /// Name of the flow.
    hidden FlowName: String(matches(Regex(#"[a-zA-Z0-9][\w!@#.-]+"#)))|Mapping

    /// Description of the flow.
    hidden Description: (String(matches(Regex(#"[\w!@#\-.?,\s]*"#)))|Mapping)?

    /// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
    hidden KMSArn: (String(matches(Regex(#"arn:aws:kms:.*:[0-9]+:.*"#)))|Mapping)?

    /// Trigger settings of the flow.
    hidden TriggerConfig: FlowTriggerConfig

    /// Flow activation status for Scheduled- and Event-triggered flows
    hidden FlowStatus: (FlowFlowStatus|Mapping)?

    /// Configurations of Source connector of the flow.
    hidden SourceFlowConfig: FlowSourceFlowConfig

    /// List of tasks for the flow.
    hidden Tasks: Listing<FlowTask>

    /// Configurations of metadata catalog of the flow.
    hidden MetadataCatalogConfig: (FlowMetadataCatalogConfig)?

    /// List of Destination connectors of the flow.
    hidden DestinationFlowConfigList: Listing<FlowDestinationFlowConfig>

    Properties {
        ["Tags"] = if (Tags == null) null else Tags
        ["FlowName"] = if (FlowName == null) null else FlowName
        ["Description"] = if (Description == null) null else Description
        ["KMSArn"] = if (KMSArn == null) null else KMSArn
        ["TriggerConfig"] = if (TriggerConfig == null) null else TriggerConfig
        ["FlowStatus"] = if (FlowStatus == null) null else FlowStatus
        ["SourceFlowConfig"] = if (SourceFlowConfig == null) null else SourceFlowConfig
        ["Tasks"] = if (Tasks == null) null else Tasks
        ["MetadataCatalogConfig"] = if (MetadataCatalogConfig == null) null else MetadataCatalogConfig
        ["DestinationFlowConfigList"] = if (DestinationFlowConfigList == null) null else DestinationFlowConfigList
    }

}


typealias FlowFlowStatus = "Active"|"Suspended"|"Draft"
