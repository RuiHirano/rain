/// AWS::AppMesh::Route
///
/// Generated by rain build --pkl-class AWS::AppMesh::Route
module aws.appmesh.route

import "../../cloudformation.pkl"

/// 
open class RouteHttpRoute {
    Action: RouteHttpRouteAction
    RetryPolicy: (RouteHttpRetryPolicy)?
    Timeout: (RouteHttpTimeout)?
    Match: RouteHttpRouteMatch
}

/// 
open class RouteHttpPathMatch {
    Regex: (String|Mapping)?
    Exact: (String|Mapping)?
}

/// 
open class RouteTcpRoute {
    Action: RouteTcpRouteAction
    Timeout: (RouteTcpTimeout)?
    Match: (RouteTcpRouteMatch)?
}

/// 
open class RouteRouteSpec {
    TcpRoute: (RouteTcpRoute)?
    Priority: (Int|Mapping)?
    HttpRoute: (RouteHttpRoute)?
    Http2Route: (RouteHttpRoute)?
    GrpcRoute: (RouteGrpcRoute)?
}

/// 
open class RouteHttpRetryPolicy {
    TcpRetryEvents: (Listing<String|Mapping>)?
    PerRetryTimeout: RouteDuration
    HttpRetryEvents: (Listing<String|Mapping>)?
    MaxRetries: Int|Mapping
}

/// 
open class RouteQueryParameter {
    Name: String|Mapping
    Match: (RouteHttpQueryParameterMatch)?
}

/// 
open class RouteGrpcTimeout {
    Idle: (RouteDuration)?
    PerRequest: (RouteDuration)?
}

/// 
open class RouteTcpRouteAction {
    WeightedTargets: Listing<RouteWeightedTarget>
}

/// 
open class RouteHttpTimeout {
    PerRequest: (RouteDuration)?
    Idle: (RouteDuration)?
}

/// 
open class RouteMatchRange {
    End: Int|Mapping
    Start: Int|Mapping
}

/// 
open class RouteTcpRouteMatch {
    Port: (Int|Mapping)?
}

/// 
open class RouteWeightedTarget {
    VirtualNode: String|Mapping
    Weight: Int|Mapping
    Port: (Int|Mapping)?
}

/// 
open class RouteGrpcRetryPolicy {
    MaxRetries: Int|Mapping
    TcpRetryEvents: (Listing<String|Mapping>)?
    PerRetryTimeout: RouteDuration
    GrpcRetryEvents: (Listing<String|Mapping>)?
    HttpRetryEvents: (Listing<String|Mapping>)?
}

/// 
open class RouteGrpcRouteAction {
    WeightedTargets: Listing<RouteWeightedTarget>
}

/// 
open class RouteGrpcRouteMetadata {
    Invert: (Boolean|Mapping)?
    Name: String|Mapping
    Match: (RouteGrpcRouteMetadataMatchMethod)?
}

/// 
open class RouteHttpRouteMatch {
    Prefix: (String|Mapping)?
    Method: (String|Mapping)?
    QueryParameters: (Listing<RouteQueryParameter>)?
    Path: (RouteHttpPathMatch)?
    Scheme: (String|Mapping)?
    Headers: (Listing<RouteHttpRouteHeader>)?
    Port: (Int|Mapping)?
}

/// 
open class RouteTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class RouteHttpRouteHeader {
    Invert: (Boolean|Mapping)?
    Name: String|Mapping
    Match: (RouteHeaderMatchMethod)?
}

/// 
open class RouteHttpQueryParameterMatch {
    Exact: (String|Mapping)?
}

/// 
open class RouteTcpTimeout {
    Idle: (RouteDuration)?
}

/// 
open class RouteGrpcRouteMatch {
    Metadata: (Listing<RouteGrpcRouteMetadata>)?
    MethodName: (String|Mapping)?
    ServiceName: (String|Mapping)?
    Port: (Int|Mapping)?
}

/// 
open class RouteGrpcRouteMetadataMatchMethod {
    Exact: (String|Mapping)?
    Prefix: (String|Mapping)?
    Regex: (String|Mapping)?
    Range: (RouteMatchRange)?
    Suffix: (String|Mapping)?
}

/// 
open class RouteHeaderMatchMethod {
    Range: (RouteMatchRange)?
    Suffix: (String|Mapping)?
    Exact: (String|Mapping)?
    Prefix: (String|Mapping)?
    Regex: (String|Mapping)?
}

/// 
open class RouteHttpRouteAction {
    WeightedTargets: Listing<RouteWeightedTarget>
}

/// 
open class RouteDuration {
    Value: Int|Mapping
    Unit: String|Mapping
}

/// 
open class RouteGrpcRoute {
    Action: RouteGrpcRouteAction
    RetryPolicy: (RouteGrpcRetryPolicy)?
    Timeout: (RouteGrpcTimeout)?
    Match: RouteGrpcRouteMatch
}

/// Resource Type definition for AWS::AppMesh::Route
open class Route extends cloudformation.Resource {

    Type = "AWS::AppMesh::Route"


    /// 
    hidden MeshOwner: (String|Mapping)?

    /// 
    hidden RouteName: (String|Mapping)?

    /// 
    hidden Spec: RouteRouteSpec

    /// 
    hidden Tags: (Listing<RouteTag>)?

    /// 
    hidden VirtualRouterName: String|Mapping

    /// 
    hidden MeshName: String|Mapping

    Properties {
        ["MeshOwner"] = if (MeshOwner == null) null else MeshOwner
        ["RouteName"] = if (RouteName == null) null else RouteName
        ["Spec"] = if (Spec == null) null else Spec
        ["Tags"] = if (Tags == null) null else Tags
        ["VirtualRouterName"] = if (VirtualRouterName == null) null else VirtualRouterName
        ["MeshName"] = if (MeshName == null) null else MeshName
    }

}
