/// AWS::AppMesh::VirtualGateway
///
/// Generated by rain build --pkl-class AWS::AppMesh::VirtualGateway
module aws.appmesh.virtualgateway

import "../../cloudformation.pkl"

/// 
open class VirtualGatewayVirtualGatewayHttp2ConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayHttpConnectionPool {
    MaxConnections: Int|Mapping
    MaxPendingRequests: (Int|Mapping)?
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextAcmTrust {
    CertificateAuthorityArns: Listing<String|Mapping>
}

/// 
open class VirtualGatewayVirtualGatewayClientPolicyTls {
    Validation: VirtualGatewayVirtualGatewayTlsValidationContext
    Ports: (Listing<Int|Mapping>)?
    Enforce: (Boolean|Mapping)?
    Certificate: (VirtualGatewayVirtualGatewayClientTlsCertificate)?
}

/// 
open class VirtualGatewayVirtualGatewayPortMapping {
    Protocol: String|Mapping
    Port: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayBackendDefaults {
    ClientPolicy: (VirtualGatewayVirtualGatewayClientPolicy)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsValidationContext {
    SubjectAlternativeNames: (VirtualGatewaySubjectAlternativeNames)?
    Trust: VirtualGatewayVirtualGatewayListenerTlsValidationContextTrust
}

/// 
open class VirtualGatewaySubjectAlternativeNames {
    Match: VirtualGatewaySubjectAlternativeNameMatchers
}

/// 
open class VirtualGatewayVirtualGatewayClientTlsCertificate {
    SDS: (VirtualGatewayVirtualGatewayListenerTlsSdsCertificate)?
    File: (VirtualGatewayVirtualGatewayListenerTlsFileCertificate)?
}

/// 
open class VirtualGatewayVirtualGatewayClientPolicy {
    TLS: (VirtualGatewayVirtualGatewayClientPolicyTls)?
}

/// 
open class VirtualGatewayLoggingFormat {
    Text: (String|Mapping)?
    Json: (Listing<VirtualGatewayJsonFormatRef>)?
}

/// 
open class VirtualGatewayVirtualGatewayFileAccessLog {
    Format: (VirtualGatewayLoggingFormat)?
    Path: String|Mapping
}

/// 
open class VirtualGatewayJsonFormatRef {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextFileTrust {
    CertificateChain: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayLogging {
    AccessLog: (VirtualGatewayVirtualGatewayAccessLog)?
}

/// 
open class VirtualGatewayVirtualGatewayGrpcConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayAccessLog {
    File: (VirtualGatewayVirtualGatewayFileAccessLog)?
}

/// 
open class VirtualGatewayVirtualGatewaySpec {
    Logging: (VirtualGatewayVirtualGatewayLogging)?
    Listeners: Listing<VirtualGatewayVirtualGatewayListener>
    BackendDefaults: (VirtualGatewayVirtualGatewayBackendDefaults)?
}

/// 
open class VirtualGatewayTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayHealthCheckPolicy {
    Port: (Int|Mapping)?
    HealthyThreshold: Int|Mapping
    TimeoutMillis: Int|Mapping
    Protocol: String|Mapping
    IntervalMillis: Int|Mapping
    Path: (String|Mapping)?
    UnhealthyThreshold: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust {
    SecretName: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsFileCertificate {
    CertificateChain: String|Mapping
    PrivateKey: String|Mapping
}

/// 
open class VirtualGatewaySubjectAlternativeNameMatchers {
    Exact: (Listing<String|Mapping>)?
}

/// 
open class VirtualGatewayVirtualGatewayConnectionPool {
    HTTP: (VirtualGatewayVirtualGatewayHttpConnectionPool)?
    HTTP2: (VirtualGatewayVirtualGatewayHttp2ConnectionPool)?
    GRPC: (VirtualGatewayVirtualGatewayGrpcConnectionPool)?
}

/// 
open class VirtualGatewayVirtualGatewayListener {
    ConnectionPool: (VirtualGatewayVirtualGatewayConnectionPool)?
    HealthCheck: (VirtualGatewayVirtualGatewayHealthCheckPolicy)?
    TLS: (VirtualGatewayVirtualGatewayListenerTls)?
    PortMapping: VirtualGatewayVirtualGatewayPortMapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsAcmCertificate {
    CertificateArn: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsSdsCertificate {
    SecretName: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContext {
    SubjectAlternativeNames: (VirtualGatewaySubjectAlternativeNames)?
    Trust: VirtualGatewayVirtualGatewayTlsValidationContextTrust
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsValidationContextTrust {
    SDS: (VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust)?
    File: (VirtualGatewayVirtualGatewayTlsValidationContextFileTrust)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTls {
    Validation: (VirtualGatewayVirtualGatewayListenerTlsValidationContext)?
    Mode: String|Mapping
    Certificate: VirtualGatewayVirtualGatewayListenerTlsCertificate
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextTrust {
    File: (VirtualGatewayVirtualGatewayTlsValidationContextFileTrust)?
    SDS: (VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust)?
    ACM: (VirtualGatewayVirtualGatewayTlsValidationContextAcmTrust)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsCertificate {
    SDS: (VirtualGatewayVirtualGatewayListenerTlsSdsCertificate)?
    ACM: (VirtualGatewayVirtualGatewayListenerTlsAcmCertificate)?
    File: (VirtualGatewayVirtualGatewayListenerTlsFileCertificate)?
}

/// Resource Type definition for AWS::AppMesh::VirtualGateway
open class VirtualGateway extends cloudformation.Resource {

    Type = "AWS::AppMesh::VirtualGateway"


    /// 
    hidden MeshName: String|Mapping

    /// 
    hidden Tags: (Listing<VirtualGatewayTag>)?

    /// 
    hidden VirtualGatewayName: (String|Mapping)?

    /// 
    hidden MeshOwner: (String|Mapping)?

    /// 
    hidden Spec: VirtualGatewayVirtualGatewaySpec

    Properties {
        ["MeshName"] = if (MeshName == null) null else MeshName
        ["Tags"] = if (Tags == null) null else Tags
        ["VirtualGatewayName"] = if (VirtualGatewayName == null) null else VirtualGatewayName
        ["MeshOwner"] = if (MeshOwner == null) null else MeshOwner
        ["Spec"] = if (Spec == null) null else Spec
    }

}
