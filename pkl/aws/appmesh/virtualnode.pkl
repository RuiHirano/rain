/// AWS::AppMesh::VirtualNode
///
/// Generated by rain build --pkl-class AWS::AppMesh::VirtualNode
module aws.appmesh.virtualnode

import "../../cloudformation.pkl"

/// 
open class VirtualNodeTcpTimeout {
    Idle: (VirtualNodeDuration)?
}

/// 
open class VirtualNodeDuration {
    Value: Int|Mapping
    Unit: String|Mapping
}

/// 
open class VirtualNodeVirtualNodeHttp2ConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualNodeBackendDefaults {
    ClientPolicy: (VirtualNodeClientPolicy)?
}

/// 
open class VirtualNodeListenerTimeout {
    GRPC: (VirtualNodeGrpcTimeout)?
    TCP: (VirtualNodeTcpTimeout)?
    HTTP: (VirtualNodeHttpTimeout)?
    HTTP2: (VirtualNodeHttpTimeout)?
}

/// 
open class VirtualNodeLogging {
    AccessLog: (VirtualNodeAccessLog)?
}

/// 
open class VirtualNodeListenerTls {
    Validation: (VirtualNodeListenerTlsValidationContext)?
    Mode: String|Mapping
    Certificate: VirtualNodeListenerTlsCertificate
}

/// 
open class VirtualNodeListenerTlsSdsCertificate {
    SecretName: String|Mapping
}

/// 
open class VirtualNodeListenerTlsValidationContext {
    SubjectAlternativeNames: (VirtualNodeSubjectAlternativeNames)?
    Trust: VirtualNodeListenerTlsValidationContextTrust
}

/// 
open class VirtualNodeOutlierDetection {
    Interval: VirtualNodeDuration
    MaxEjectionPercent: Int|Mapping
    BaseEjectionDuration: VirtualNodeDuration
    MaxServerErrors: Int|Mapping
}

/// 
open class VirtualNodeFileAccessLog {
    Path: String|Mapping
    Format: (VirtualNodeLoggingFormat)?
}

/// 
open class VirtualNodeListener {
    TLS: (VirtualNodeListenerTls)?
    PortMapping: VirtualNodePortMapping
    OutlierDetection: (VirtualNodeOutlierDetection)?
    ConnectionPool: (VirtualNodeVirtualNodeConnectionPool)?
    Timeout: (VirtualNodeListenerTimeout)?
    HealthCheck: (VirtualNodeHealthCheck)?
}

/// 
open class VirtualNodeClientPolicyTls {
    Validation: VirtualNodeTlsValidationContext
    Ports: (Listing<Int|Mapping>)?
    Enforce: (Boolean|Mapping)?
    Certificate: (VirtualNodeClientTlsCertificate)?
}

/// 
open class VirtualNodeVirtualNodeConnectionPool {
    GRPC: (VirtualNodeVirtualNodeGrpcConnectionPool)?
    TCP: (VirtualNodeVirtualNodeTcpConnectionPool)?
    HTTP: (VirtualNodeVirtualNodeHttpConnectionPool)?
    HTTP2: (VirtualNodeVirtualNodeHttp2ConnectionPool)?
}

/// 
open class VirtualNodeListenerTlsAcmCertificate {
    CertificateArn: String|Mapping
}

/// 
open class VirtualNodeTlsValidationContextFileTrust {
    CertificateChain: String|Mapping
}

/// 
open class VirtualNodeListenerTlsValidationContextTrust {
    SDS: (VirtualNodeTlsValidationContextSdsTrust)?
    File: (VirtualNodeTlsValidationContextFileTrust)?
}

/// 
open class VirtualNodePortMapping {
    Protocol: String|Mapping
    Port: Int|Mapping
}

/// 
open class VirtualNodeHealthCheck {
    UnhealthyThreshold: Int|Mapping
    Port: (Int|Mapping)?
    HealthyThreshold: Int|Mapping
    TimeoutMillis: Int|Mapping
    Protocol: String|Mapping
    IntervalMillis: Int|Mapping
    Path: (String|Mapping)?
}

/// 
open class VirtualNodeBackend {
    VirtualService: (VirtualNodeVirtualServiceBackend)?
}

/// 
open class VirtualNodeAccessLog {
    File: (VirtualNodeFileAccessLog)?
}

/// 
open class VirtualNodeGrpcTimeout {
    PerRequest: (VirtualNodeDuration)?
    Idle: (VirtualNodeDuration)?
}

/// 
open class VirtualNodeListenerTlsCertificate {
    ACM: (VirtualNodeListenerTlsAcmCertificate)?
    File: (VirtualNodeListenerTlsFileCertificate)?
    SDS: (VirtualNodeListenerTlsSdsCertificate)?
}

/// 
open class VirtualNodeClientPolicy {
    TLS: (VirtualNodeClientPolicyTls)?
}

/// 
open class VirtualNodeTlsValidationContextSdsTrust {
    SecretName: String|Mapping
}

/// 
open class VirtualNodeAwsCloudMapInstanceAttribute {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class VirtualNodeDnsServiceDiscovery {
    ResponseType: (String|Mapping)?
    Hostname: String|Mapping
    IpPreference: (String|Mapping)?
}

/// 
open class VirtualNodeVirtualNodeTcpConnectionPool {
    MaxConnections: Int|Mapping
}

/// 
open class VirtualNodeVirtualNodeSpec {
    ServiceDiscovery: (VirtualNodeServiceDiscovery)?
    Logging: (VirtualNodeLogging)?
    Backends: (Listing<VirtualNodeBackend>)?
    Listeners: (Listing<VirtualNodeListener>)?
    BackendDefaults: (VirtualNodeBackendDefaults)?
}

/// 
open class VirtualNodeTlsValidationContext {
    SubjectAlternativeNames: (VirtualNodeSubjectAlternativeNames)?
    Trust: VirtualNodeTlsValidationContextTrust
}

/// 
open class VirtualNodeListenerTlsFileCertificate {
    CertificateChain: String|Mapping
    PrivateKey: String|Mapping
}

/// 
open class VirtualNodeTlsValidationContextTrust {
    SDS: (VirtualNodeTlsValidationContextSdsTrust)?
    ACM: (VirtualNodeTlsValidationContextAcmTrust)?
    File: (VirtualNodeTlsValidationContextFileTrust)?
}

/// 
open class VirtualNodeTlsValidationContextAcmTrust {
    CertificateAuthorityArns: Listing<String|Mapping>
}

/// 
open class VirtualNodeAwsCloudMapServiceDiscovery {
    NamespaceName: String|Mapping
    ServiceName: String|Mapping
    IpPreference: (String|Mapping)?
    Attributes: (Listing<VirtualNodeAwsCloudMapInstanceAttribute>)?
}

/// 
open class VirtualNodeVirtualNodeGrpcConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualNodeServiceDiscovery {
    DNS: (VirtualNodeDnsServiceDiscovery)?
    AWSCloudMap: (VirtualNodeAwsCloudMapServiceDiscovery)?
}

/// 
open class VirtualNodeClientTlsCertificate {
    File: (VirtualNodeListenerTlsFileCertificate)?
    SDS: (VirtualNodeListenerTlsSdsCertificate)?
}

/// 
open class VirtualNodeVirtualServiceBackend {
    VirtualServiceName: String|Mapping
    ClientPolicy: (VirtualNodeClientPolicy)?
}

/// 
open class VirtualNodeSubjectAlternativeNameMatchers {
    Exact: (Listing<String|Mapping>)?
}

/// 
open class VirtualNodeHttpTimeout {
    PerRequest: (VirtualNodeDuration)?
    Idle: (VirtualNodeDuration)?
}

/// 
open class VirtualNodeVirtualNodeHttpConnectionPool {
    MaxConnections: Int|Mapping
    MaxPendingRequests: (Int|Mapping)?
}

/// 
open class VirtualNodeLoggingFormat {
    Json: (Listing<VirtualNodeJsonFormatRef>)?
    Text: (String|Mapping)?
}

/// 
open class VirtualNodeSubjectAlternativeNames {
    Match: VirtualNodeSubjectAlternativeNameMatchers
}

/// 
open class VirtualNodeJsonFormatRef {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class VirtualNodeTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// Resource Type definition for AWS::AppMesh::VirtualNode
open class VirtualNode extends cloudformation.Resource {

    Type = "AWS::AppMesh::VirtualNode"


    /// 
    hidden MeshOwner: (String|Mapping)?

    /// 
    hidden Spec: VirtualNodeVirtualNodeSpec

    /// 
    hidden Tags: (Listing<VirtualNodeTag>)?

    /// 
    hidden MeshName: String|Mapping

    /// 
    hidden VirtualNodeName: (String|Mapping)?

    Properties {
        ["MeshOwner"] = if (MeshOwner == null) null else MeshOwner
        ["Spec"] = if (Spec == null) null else Spec
        ["Tags"] = if (Tags == null) null else Tags
        ["MeshName"] = if (MeshName == null) null else MeshName
        ["VirtualNodeName"] = if (VirtualNodeName == null) null else VirtualNodeName
    }

}
