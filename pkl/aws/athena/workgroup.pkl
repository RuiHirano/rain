/// AWS::Athena::WorkGroup
///
/// Generated by rain build --pkl-class AWS::Athena::WorkGroup
module aws.athena.workgroup

import "../../cloudformation.pkl"

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Additional Configuration that are passed to Athena Spark Calculations running in this workgroup
open class AdditionalConfiguration {
}

/// Indicates the KMS key for encrypting notebook content.
open class CustomerContentEncryptionConfiguration {
    KmsKey: KmsKey
}

/// Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.
open class EffectiveEngineVersion {
}

/// The AWS account ID of the owner of S3 bucket where query results are stored
open class ExpectedBucketOwner {
}

/// Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
open class PublishCloudWatchMetricsEnabled {
}

/// The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
////// 
open class ResultConfiguration {
    EncryptionConfiguration: (EncryptionConfiguration)?
    OutputLocation: (OutputLocation)?
    ExpectedBucketOwner: (ExpectedBucketOwner)?
    AclConfiguration: (AclConfiguration)?
}

/// 
open class WorkGroupConfiguration {
    RequesterPaysEnabled: (RequesterPaysEnabled)?
    EngineVersion: (EngineVersion)?
    BytesScannedCutoffPerQuery: (BytesScannedCutoffPerQuery)?
    EnforceWorkGroupConfiguration: (EnforceWorkGroupConfiguration)?
    PublishCloudWatchMetricsEnabled: (PublishCloudWatchMetricsEnabled)?
    CustomerContentEncryptionConfiguration: (CustomerContentEncryptionConfiguration)?
    ResultConfiguration: (ResultConfiguration)?
    AdditionalConfiguration: (AdditionalConfiguration)?
    ExecutionRole: (ExecutionRole)?
}

/// The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified. 
open class WorkGroupConfigurationUpdates {
    AdditionalConfiguration: (AdditionalConfiguration)?
    CustomerContentEncryptionConfiguration: (CustomerContentEncryptionConfiguration)?
    BytesScannedCutoffPerQuery: (BytesScannedCutoffPerQuery)?
    PublishCloudWatchMetricsEnabled: (PublishCloudWatchMetricsEnabled)?
    ResultConfigurationUpdates: (ResultConfigurationUpdates)?
    RemoveBytesScannedCutoffPerQuery: (RemoveBytesScannedCutoffPerQuery)?
    EngineVersion: (EngineVersion)?
    ExecutionRole: (ExecutionRole)?
    RemoveCustomerContentEncryptionConfiguration: (RemoveCustomerContentEncryptionConfiguration)?
    EnforceWorkGroupConfiguration: (EnforceWorkGroupConfiguration)?
    RequesterPaysEnabled: (RequesterPaysEnabled)?
}

/// The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL
open class S3AclOption {
}

/// The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. 
open class ResultConfigurationUpdates {
    OutputLocation: (OutputLocation)?
    ExpectedBucketOwner: (ExpectedBucketOwner)?
    AclConfiguration: (AclConfiguration)?
    RemoveEncryptionConfiguration: (RemoveEncryptionConfiguration)?
    RemoveOutputLocation: (RemoveOutputLocation)?
    RemoveExpectedBucketOwner: (RemoveExpectedBucketOwner)?
    RemoveAclConfiguration: (RemoveAclConfiguration)?
    EncryptionConfiguration: (EncryptionConfiguration)?
}

/// 
open class Tags {
}

/// If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used
open class EnforceWorkGroupConfiguration {
}

/// For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. 
open class KmsKey {
}

/// Execution Role ARN required to run Athena Spark Calculations
open class ExecutionRole {
}

/// 
open class RemoveOutputLocation {
}

/// 
open class RemoveAclConfiguration {
}

/// The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.
open class SelectedEngineVersion {
}

/// The Athena engine version for running queries.
open class EngineVersion {
    EffectiveEngineVersion: (EffectiveEngineVersion)?
    SelectedEngineVersion: (SelectedEngineVersion)?
}

/// If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
open class EncryptionConfiguration {
    EncryptionOption: EncryptionOption
    KmsKey: (KmsKey)?
}

/// 
open class RemoveEncryptionConfiguration {
}

/// 
open class RemoveCustomerContentEncryptionConfiguration {
}

/// The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration
open class OutputLocation {
}

/// Indicates that the data usage control limit per query is removed.
open class RemoveBytesScannedCutoffPerQuery {
}

/// Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results
open class AclConfiguration {
    S3AclOption: S3AclOption
}

/// The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
open class BytesScannedCutoffPerQuery {
}

/// If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. 
open class RequesterPaysEnabled {
}

/// Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
open class EncryptionOption {
}

/// 
open class RemoveExpectedBucketOwner {
}

/// Resource schema for AWS::Athena::WorkGroup
open class WorkGroup extends cloudformation.Resource {

    Type = "AWS::Athena::WorkGroup"


    /// The state of the workgroup: ENABLED or DISABLED.
    hidden State: (WorkGroupState|Mapping)?

    /// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
    hidden RecursiveDeleteOption: (Boolean|Mapping)?

    /// The workGroup name.
    hidden Name: String(matches(Regex(#"[a-zA-Z0-9._-]{1,128}"#)))|Mapping

    /// The workgroup description.
    hidden Description: (String|Mapping)?

    /// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
    hidden Tags: (Tags)?

    /// The workgroup configuration
    hidden WorkGroupConfiguration: (WorkGroupConfiguration)?

    /// The workgroup configuration update object
    hidden WorkGroupConfigurationUpdates: (WorkGroupConfigurationUpdates)?

    Properties {
        ["State"] = if (State == null) null else State
        ["RecursiveDeleteOption"] = if (RecursiveDeleteOption == null) null else RecursiveDeleteOption
        ["Name"] = if (Name == null) null else Name
        ["Description"] = if (Description == null) null else Description
        ["Tags"] = if (Tags == null) null else Tags
        ["WorkGroupConfiguration"] = if (WorkGroupConfiguration == null) null else WorkGroupConfiguration
        ["WorkGroupConfigurationUpdates"] = if (WorkGroupConfigurationUpdates == null) null else WorkGroupConfigurationUpdates
    }

}


typealias WorkGroupState = "ENABLED"|"DISABLED"
