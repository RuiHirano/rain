/// AWS::AutoScaling::ScalingPolicy
///
/// Generated by rain build --pkl-class AWS::AutoScaling::ScalingPolicy
module aws.autoscaling.scalingpolicy

import "../../cloudformation.pkl"

/// 
open class ScalingPolicyPredefinedMetricSpecification {
    ResourceLabel: (String|Mapping)?
    PredefinedMetricType: String|Mapping
}

/// 
open class ScalingPolicyTargetTrackingConfiguration {
    CustomizedMetricSpecification: (ScalingPolicyCustomizedMetricSpecification)?
    TargetValue: Number|Mapping
    DisableScaleIn: (Boolean|Mapping)?
    PredefinedMetricSpecification: (ScalingPolicyPredefinedMetricSpecification)?
}

/// 
open class ScalingPolicyPredictiveScalingPredefinedMetricPair {
    ResourceLabel: (String|Mapping)?
    PredefinedMetricType: String|Mapping
}

/// 
open class ScalingPolicyCustomizedMetricSpecification {
    MetricName: String|Mapping
    Dimensions: (Listing<ScalingPolicyMetricDimension>)?
    Statistic: String|Mapping
    Unit: (String|Mapping)?
    Namespace: String|Mapping
}

/// 
open class ScalingPolicyMetric {
    MetricName: String|Mapping
    Dimensions: (Listing<ScalingPolicyMetricDimension>)?
    Namespace: String|Mapping
}

/// 
open class ScalingPolicyMetricDimension {
    Name: String|Mapping
    Value: String|Mapping
}

/// 
open class ScalingPolicyPredictiveScalingMetricSpecification {
    PredefinedScalingMetricSpecification: (ScalingPolicyPredictiveScalingPredefinedScalingMetric)?
    PredefinedMetricPairSpecification: (ScalingPolicyPredictiveScalingPredefinedMetricPair)?
    CustomizedCapacityMetricSpecification: (ScalingPolicyPredictiveScalingCustomizedCapacityMetric)?
    CustomizedLoadMetricSpecification: (ScalingPolicyPredictiveScalingCustomizedLoadMetric)?
    CustomizedScalingMetricSpecification: (ScalingPolicyPredictiveScalingCustomizedScalingMetric)?
    PredefinedLoadMetricSpecification: (ScalingPolicyPredictiveScalingPredefinedLoadMetric)?
    TargetValue: Number|Mapping
}

/// 
open class ScalingPolicyMetricDataQuery {
    Expression: (String|Mapping)?
    Label: (String|Mapping)?
    MetricStat: (ScalingPolicyMetricStat)?
    Id: String|Mapping
    ReturnData: (Boolean|Mapping)?
}

/// 
open class ScalingPolicyPredictiveScalingPredefinedLoadMetric {
    ResourceLabel: (String|Mapping)?
    PredefinedMetricType: String|Mapping
}

/// 
open class ScalingPolicyPredictiveScalingPredefinedScalingMetric {
    ResourceLabel: (String|Mapping)?
    PredefinedMetricType: String|Mapping
}

/// 
open class ScalingPolicyStepAdjustment {
    MetricIntervalUpperBound: (Number|Mapping)?
    MetricIntervalLowerBound: (Number|Mapping)?
    ScalingAdjustment: Int|Mapping
}

/// 
open class ScalingPolicyPredictiveScalingCustomizedScalingMetric {
    MetricDataQueries: Listing<ScalingPolicyMetricDataQuery>
}

/// 
open class ScalingPolicyMetricStat {
    Metric: ScalingPolicyMetric
    Stat: String|Mapping
    Unit: (String|Mapping)?
}

/// 
open class ScalingPolicyPredictiveScalingConfiguration {
    Mode: (String|Mapping)?
    MetricSpecifications: Listing<ScalingPolicyPredictiveScalingMetricSpecification>
    MaxCapacityBreachBehavior: (String|Mapping)?
    MaxCapacityBuffer: (Int|Mapping)?
    SchedulingBufferTime: (Int|Mapping)?
}

/// 
open class ScalingPolicyPredictiveScalingCustomizedCapacityMetric {
    MetricDataQueries: Listing<ScalingPolicyMetricDataQuery>
}

/// 
open class ScalingPolicyPredictiveScalingCustomizedLoadMetric {
    MetricDataQueries: Listing<ScalingPolicyMetricDataQuery>
}

/// The AWS::AutoScaling::ScalingPolicy resource specifies an Amazon EC2 Auto Scaling scaling policy so that the Auto Scaling group can scale the number of instances available for your application.
open class ScalingPolicy extends cloudformation.Resource {

    Type = "AWS::AutoScaling::ScalingPolicy"


    /// Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    hidden AdjustmentType: (String|Mapping)?

    /// The name of the Auto Scaling group.
    hidden AutoScalingGroupName: String|Mapping

    /// The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the default cooldown period defined for the Auto Scaling group.
    hidden Cooldown: (String|Mapping)?

    /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the policy type is TargetTrackingScaling or StepScaling.
    hidden EstimatedInstanceWarmup: (Int|Mapping)?

    /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
    hidden MetricAggregationType: (String|Mapping)?

    /// The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.
    hidden MinAdjustmentMagnitude: (Int|Mapping)?

    /// One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling
    hidden PolicyType: (String|Mapping)?

    /// A predictive scaling policy. Includes support for predefined metrics only.
    hidden PredictiveScalingConfiguration: (ScalingPolicyPredictiveScalingConfiguration)?

    /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value. Required if the policy type is SimpleScaling. (Not used with any other policy type.)
    hidden ScalingAdjustment: (Int|Mapping)?

    /// A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is StepScaling. (Not used with any other policy type.)
    hidden StepAdjustments: (Listing<ScalingPolicyStepAdjustment>)?

    /// A target tracking scaling policy. Includes support for predefined or customized metrics.
    hidden TargetTrackingConfiguration: (ScalingPolicyTargetTrackingConfiguration)?

    Properties {
        ["AdjustmentType"] = if (AdjustmentType == null) null else AdjustmentType
        ["AutoScalingGroupName"] = if (AutoScalingGroupName == null) null else AutoScalingGroupName
        ["Cooldown"] = if (Cooldown == null) null else Cooldown
        ["EstimatedInstanceWarmup"] = if (EstimatedInstanceWarmup == null) null else EstimatedInstanceWarmup
        ["MetricAggregationType"] = if (MetricAggregationType == null) null else MetricAggregationType
        ["MinAdjustmentMagnitude"] = if (MinAdjustmentMagnitude == null) null else MinAdjustmentMagnitude
        ["PolicyType"] = if (PolicyType == null) null else PolicyType
        ["PredictiveScalingConfiguration"] = if (PredictiveScalingConfiguration == null) null else PredictiveScalingConfiguration
        ["ScalingAdjustment"] = if (ScalingAdjustment == null) null else ScalingAdjustment
        ["StepAdjustments"] = if (StepAdjustments == null) null else StepAdjustments
        ["TargetTrackingConfiguration"] = if (TargetTrackingConfiguration == null) null else TargetTrackingConfiguration
    }

}
