/// AWS::Batch::JobDefinition
///
/// Generated by rain build --pkl-class AWS::Batch::JobDefinition
module aws.batch.jobdefinition

import "../../cloudformation.pkl"

/// 
open class EksContainerEnvironmentVariable {
    Value: (String|Mapping)?
    Name: String|Mapping
}

/// 
open class LogConfiguration {
    SecretOptions: (Listing<Secret>)?
    Options: (Dynamic)?
    LogDriver: String|Mapping
}

/// 
open class VolumesHost {
    SourcePath: (String|Mapping)?
}

/// 
open class Timeout {
    AttemptDurationSeconds: (Int|Mapping)?
}

/// 
open class FargatePlatformConfiguration {
    PlatformVersion: (String|Mapping)?
}

/// 
open class EksProperties {
    PodProperties: (PodProperties)?
}

/// 
open class Secret {
    ValueFrom: String|Mapping
    Name: String|Mapping
}

/// 
open class NodeRangeProperty {
    Container: (ContainerProperties)?
    InstanceTypes: (Listing<String|Mapping>)?
    TargetNodes: String|Mapping
    EcsProperties: (EcsProperties)?
}

/// 
open class EksContainerResourceRequirements {
    Limits: (Dynamic)?
    Requests: (Dynamic)?
}

/// 
open class NetworkConfiguration {
    AssignPublicIp: (String|Mapping)?
}

/// 
open class EcsTaskProperties {
    ExecutionRoleArn: (String|Mapping)?
    TaskRoleArn: (String|Mapping)?
    IpcMode: (String|Mapping)?
    Volumes: (Listing<Volumes>)?
    NetworkConfiguration: (NetworkConfiguration)?
    PlatformVersion: (String|Mapping)?
    RuntimePlatform: (RuntimePlatform)?
    Containers: (Listing<TaskContainerProperties>)?
    PidMode: (String|Mapping)?
    EphemeralStorage: (EphemeralStorage)?
}

/// 
open class TaskContainerProperties {
    RepositoryCredentials: (RepositoryCredentials)?
    Image: String|Mapping
    LogConfiguration: (LogConfiguration)?
    User: (String|Mapping)?
    Privileged: (Boolean|Mapping)?
    Essential: (Boolean|Mapping)?
    MountPoints: (Listing<MountPoints>)?
    DependsOn: (Listing<TaskContainerDependency>)?
    Command: (Listing<String|Mapping>)?
    Ulimits: (Listing<Ulimit>)?
    Secrets: (Listing<Secret>)?
    ResourceRequirements: (Listing<ResourceRequirement>)?
    LinuxParameters: (LinuxParameters)?
    ReadonlyRootFilesystem: (Boolean|Mapping)?
    Name: (String|Mapping)?
    Environment: (Listing<Environment>)?
}

/// 
open class EfsVolumeConfiguration {
    FileSystemId: String|Mapping
    TransitEncryption: (String|Mapping)?
    RootDirectory: (String|Mapping)?
    TransitEncryptionPort: (Int|Mapping)?
    AuthorizationConfig: (AuthorizationConfig)?
}

/// 
open class TaskContainerDependency {
    ContainerName: String|Mapping
    Condition: String|Mapping
}

/// 
open class ContainerProperties {
    Privileged: (Boolean|Mapping)?
    ReadonlyRootFilesystem: (Boolean|Mapping)?
    LogConfiguration: (LogConfiguration)?
    Environment: (Listing<Environment>)?
    EphemeralStorage: (EphemeralStorage)?
    RepositoryCredentials: (RepositoryCredentials)?
    LinuxParameters: (LinuxParameters)?
    FargatePlatformConfiguration: (FargatePlatformConfiguration)?
    Image: String|Mapping
    Volumes: (Listing<Volumes>)?
    NetworkConfiguration: (NetworkConfiguration)?
    User: (String|Mapping)?
    Memory: (Int|Mapping)?
    ResourceRequirements: (Listing<ResourceRequirement>)?
    MountPoints: (Listing<MountPoints>)?
    ExecutionRoleArn: (String|Mapping)?
    RuntimePlatform: (RuntimePlatform)?
    Secrets: (Listing<Secret>)?
    JobRoleArn: (String|Mapping)?
    Vcpus: (Int|Mapping)?
    Command: (Listing<String|Mapping>)?
    Ulimits: (Listing<Ulimit>)?
    InstanceType: (String|Mapping)?
}

/// 
open class Device {
    Permissions: (Listing<String|Mapping>)?
    HostPath: (String|Mapping)?
    ContainerPath: (String|Mapping)?
}

/// 
open class EksHostPath {
    Path: (String|Mapping)?
}

/// 
open class EphemeralStorage {
    SizeInGiB: Int|Mapping
}

/// 
open class RetryStrategy {
    EvaluateOnExit: (Listing<EvaluateOnExit>)?
    Attempts: (Int|Mapping)?
}

/// 
open class EksEmptyDir {
    Medium: (String|Mapping)?
    SizeLimit: (String|Mapping)?
}

/// 
open class NodeProperties {
    NodeRangeProperties: Listing<NodeRangeProperty>
    NumNodes: Int|Mapping
    MainNode: Int|Mapping
}

/// 
open class EksContainerSecurityContext {
    RunAsUser: (Int|Mapping)?
    RunAsGroup: (Int|Mapping)?
    RunAsNonRoot: (Boolean|Mapping)?
    Privileged: (Boolean|Mapping)?
    ReadOnlyRootFilesystem: (Boolean|Mapping)?
}

/// 
open class Metadata {
    Labels: (Dynamic)?
}

/// 
open class EksSecret {
    SecretName: String|Mapping
    Optional: (Boolean|Mapping)?
}

/// 
open class EvaluateOnExit {
    Action: String|Mapping
    OnStatusReason: (String|Mapping)?
    OnExitCode: (String|Mapping)?
    OnReason: (String|Mapping)?
}

/// 
open class ResourceRequirement {
    Value: (String|Mapping)?
    Type: (String|Mapping)?
}

/// 
open class AuthorizationConfig {
    Iam: (String|Mapping)?
    AccessPointId: (String|Mapping)?
}

/// 
open class LinuxParameters {
    SharedMemorySize: (Int|Mapping)?
    Devices: (Listing<Device>)?
    InitProcessEnabled: (Boolean|Mapping)?
    MaxSwap: (Int|Mapping)?
    Swappiness: (Int|Mapping)?
    Tmpfs: (Listing<Tmpfs>)?
}

/// 
open class Ulimit {
    SoftLimit: Int|Mapping
    HardLimit: Int|Mapping
    Name: String|Mapping
}

/// 
open class EksContainerVolumeMount {
    MountPath: (String|Mapping)?
    ReadOnly: (Boolean|Mapping)?
    Name: (String|Mapping)?
}

/// 
open class Environment {
    Value: (String|Mapping)?
    Name: (String|Mapping)?
}

/// 
open class EksContainer {
    Name: (String|Mapping)?
    Args: (Listing<String|Mapping>)?
    ImagePullPolicy: (String|Mapping)?
    Command: (Listing<String|Mapping>)?
    Image: String|Mapping
    Env: (Listing<EksContainerEnvironmentVariable>)?
    VolumeMounts: (Listing<EksContainerVolumeMount>)?
    SecurityContext: (EksContainerSecurityContext)?
    Resources: (EksContainerResourceRequirements)?
}

/// 
open class RuntimePlatform {
    OperatingSystemFamily: (String|Mapping)?
    CpuArchitecture: (String|Mapping)?
}

/// 
open class Volumes {
    Host: (VolumesHost)?
    EfsVolumeConfiguration: (EfsVolumeConfiguration)?
    Name: (String|Mapping)?
}

/// 
open class PodProperties {
    ServiceAccountName: (String|Mapping)?
    HostNetwork: (Boolean|Mapping)?
    ShareProcessNamespace: (Boolean|Mapping)?
    InitContainers: (Listing<EksContainer>)?
    Volumes: (Listing<EksVolume>)?
    DnsPolicy: (String|Mapping)?
    Containers: (Listing<EksContainer>)?
    Metadata: (Metadata)?
}

/// 
open class Tmpfs {
    ContainerPath: String|Mapping
    MountOptions: (Listing<String|Mapping>)?
    Size: Int|Mapping
}

/// 
open class EcsProperties {
    TaskProperties: Listing<EcsTaskProperties>
}

/// 
open class RepositoryCredentials {
    CredentialsParameter: String|Mapping
}

/// 
open class EksVolume {
    Secret: (EksSecret)?
    EmptyDir: (EksEmptyDir)?
    HostPath: (EksHostPath)?
    Name: String|Mapping
}

/// 
open class MountPoints {
    ReadOnly: (Boolean|Mapping)?
    SourceVolume: (String|Mapping)?
    ContainerPath: (String|Mapping)?
}

/// Resource Type definition for AWS::Batch::JobDefinition
open class JobDefinition extends cloudformation.Resource {

    Type = "AWS::Batch::JobDefinition"


    /// 
    hidden SchedulingPriority: (Int|Mapping)?

    /// 
    hidden Tags: (Dynamic)?

    /// 
    hidden Timeout: (Timeout)?

    /// 
    hidden PlatformCapabilities: (Listing<String|Mapping>)?

    /// 
    hidden TypeProperty: String|Mapping

    /// 
    hidden NodeProperties: (NodeProperties)?

    /// 
    hidden RetryStrategy: (RetryStrategy)?

    /// 
    hidden Parameters: (Dynamic)?

    /// 
    hidden JobDefinitionName: (String|Mapping)?

    /// 
    hidden PropagateTags: (Boolean|Mapping)?

    /// 
    hidden EksProperties: (EksProperties)?

    /// 
    hidden ContainerProperties: (ContainerProperties)?

    /// 
    hidden EcsProperties: (EcsProperties)?

    Properties {
        ["SchedulingPriority"] = if (SchedulingPriority == null) null else SchedulingPriority
        ["Tags"] = if (Tags == null) null else Tags
        ["Timeout"] = if (Timeout == null) null else Timeout
        ["PlatformCapabilities"] = if (PlatformCapabilities == null) null else PlatformCapabilities
        ["Type"] = if (TypeProperty == null) null else TypeProperty
        ["NodeProperties"] = if (NodeProperties == null) null else NodeProperties
        ["RetryStrategy"] = if (RetryStrategy == null) null else RetryStrategy
        ["Parameters"] = if (Parameters == null) null else Parameters
        ["JobDefinitionName"] = if (JobDefinitionName == null) null else JobDefinitionName
        ["PropagateTags"] = if (PropagateTags == null) null else PropagateTags
        ["EksProperties"] = if (EksProperties == null) null else EksProperties
        ["ContainerProperties"] = if (ContainerProperties == null) null else ContainerProperties
        ["EcsProperties"] = if (EcsProperties == null) null else EcsProperties
    }

}
