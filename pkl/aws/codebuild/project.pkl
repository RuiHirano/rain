/// AWS::CodeBuild::Project
///
/// Generated by rain build --pkl-class AWS::CodeBuild::Project
module aws.codebuild.project

import "../../cloudformation.pkl"

/// 
open class SourceAuth {
    Resource: (String|Mapping)?
    Type: String|Mapping
}

/// 
open class ProjectCache {
    Modes: (Listing<String|Mapping>)?
    Type: String|Mapping
    Location: (String|Mapping)?
}

/// 
open class CloudWatchLogsConfig {
    GroupName: (String|Mapping)?
    StreamName: (String|Mapping)?
    Status: String|Mapping
}

/// 
open class ProjectFileSystemLocation {
    MountPoint: String|Mapping
    Type: String|Mapping
    Identifier: String|Mapping
    MountOptions: (String|Mapping)?
    Location: String|Mapping
}

/// 
open class BuildStatusConfig {
    Context: (String|Mapping)?
    TargetUrl: (String|Mapping)?
}

/// 
open class FilterGroup {
}

/// 
open class Artifacts {
    OverrideArtifactName: (Boolean|Mapping)?
    Location: (String|Mapping)?
    Path: (String|Mapping)?
    Type: String|Mapping
    ArtifactIdentifier: (String|Mapping)?
    Packaging: (String|Mapping)?
    EncryptionDisabled: (Boolean|Mapping)?
    Name: (String|Mapping)?
    NamespaceType: (String|Mapping)?
}

/// 
open class BatchRestrictions {
    ComputeTypesAllowed: (Listing<String|Mapping>)?
    MaximumBuildsAllowed: (Int|Mapping)?
}

/// 
open class ProjectBuildBatchConfig {
    CombineArtifacts: (Boolean|Mapping)?
    ServiceRole: (String|Mapping)?
    BatchReportMode: (String|Mapping)?
    TimeoutInMins: (Int|Mapping)?
    Restrictions: (BatchRestrictions)?
}

/// 
open class ProjectTriggers {
    FilterGroups: (Listing<FilterGroup>)?
    Webhook: (Boolean|Mapping)?
    BuildType: (String|Mapping)?
}

/// 
open class GitSubmodulesConfig {
    FetchSubmodules: Boolean|Mapping
}

/// 
open class ProjectSourceVersion {
    SourceIdentifier: String|Mapping
    SourceVersion: (String|Mapping)?
}

/// 
open class VpcConfig {
    VpcId: (String|Mapping)?
    SecurityGroupIds: (Listing<String|Mapping>)?
    Subnets: (Listing<String|Mapping>)?
}

/// 
open class RegistryCredential {
    Credential: String|Mapping
    CredentialProvider: String|Mapping
}

/// 
open class Source {
    GitCloneDepth: (Int|Mapping)?
    GitSubmodulesConfig: (GitSubmodulesConfig)?
    Location: (String|Mapping)?
    ReportBuildStatus: (Boolean|Mapping)?
    Auth: (SourceAuth)?
    BuildSpec: (String|Mapping)?
    BuildStatusConfig: (BuildStatusConfig)?
    InsecureSsl: (Boolean|Mapping)?
    Type: String|Mapping
    SourceIdentifier: (String|Mapping)?
}

/// 
open class LogsConfig {
    CloudWatchLogs: (CloudWatchLogsConfig)?
    S3Logs: (S3LogsConfig)?
}

/// 
open class Environment {
    Fleet: (ProjectFleet)?
    Image: String|Mapping
    ComputeType: String|Mapping
    Certificate: (String|Mapping)?
    Type: String|Mapping
    EnvironmentVariables: (Listing<EnvironmentVariable>)?
    PrivilegedMode: (Boolean|Mapping)?
    ImagePullCredentialsType: (String|Mapping)?
    RegistryCredential: (RegistryCredential)?
}

/// 
open class EnvironmentVariable {
    Value: String|Mapping
    Type: (String|Mapping)?
    Name: String|Mapping
}

/// 
open class Tag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class S3LogsConfig {
    Status: String|Mapping
    EncryptionDisabled: (Boolean|Mapping)?
    Location: (String|Mapping)?
}

/// 
open class ProjectFleet {
    FleetArn: (String|Mapping)?
}

/// Resource Type definition for AWS::CodeBuild::Project
open class Project extends cloudformation.Resource {

    Type = "AWS::CodeBuild::Project"


    /// 
    hidden QueuedTimeoutInMinutes: (Int|Mapping)?

    /// 
    hidden Cache: (ProjectCache)?

    /// 
    hidden Source: Source

    /// 
    hidden SourceVersion: (String|Mapping)?

    /// 
    hidden Artifacts: Artifacts

    /// 
    hidden SecondarySources: (Listing<Source>)?

    /// 
    hidden Name: (String|Mapping)?

    /// 
    hidden ResourceAccessRole: (String|Mapping)?

    /// 
    hidden LogsConfig: (LogsConfig)?

    /// 
    hidden BadgeEnabled: (Boolean|Mapping)?

    /// 
    hidden SecondarySourceVersions: (Listing<ProjectSourceVersion>)?

    /// 
    hidden FileSystemLocations: (Listing<ProjectFileSystemLocation>)?

    /// 
    hidden ConcurrentBuildLimit: (Int|Mapping)?

    /// 
    hidden BuildBatchConfig: (ProjectBuildBatchConfig)?

    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden EncryptionKey: (String|Mapping)?

    /// 
    hidden Environment: Environment

    /// 
    hidden VpcConfig: (VpcConfig)?

    /// 
    hidden SecondaryArtifacts: (Listing<Artifacts>)?

    /// 
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden Visibility: (String|Mapping)?

    /// 
    hidden ServiceRole: String|Mapping

    /// 
    hidden Triggers: (ProjectTriggers)?

    /// 
    hidden TimeoutInMinutes: (Int|Mapping)?

    Properties {
        ["QueuedTimeoutInMinutes"] = if (QueuedTimeoutInMinutes == null) null else QueuedTimeoutInMinutes
        ["Cache"] = if (Cache == null) null else Cache
        ["Source"] = if (Source == null) null else Source
        ["SourceVersion"] = if (SourceVersion == null) null else SourceVersion
        ["Artifacts"] = if (Artifacts == null) null else Artifacts
        ["SecondarySources"] = if (SecondarySources == null) null else SecondarySources
        ["Name"] = if (Name == null) null else Name
        ["ResourceAccessRole"] = if (ResourceAccessRole == null) null else ResourceAccessRole
        ["LogsConfig"] = if (LogsConfig == null) null else LogsConfig
        ["BadgeEnabled"] = if (BadgeEnabled == null) null else BadgeEnabled
        ["SecondarySourceVersions"] = if (SecondarySourceVersions == null) null else SecondarySourceVersions
        ["FileSystemLocations"] = if (FileSystemLocations == null) null else FileSystemLocations
        ["ConcurrentBuildLimit"] = if (ConcurrentBuildLimit == null) null else ConcurrentBuildLimit
        ["BuildBatchConfig"] = if (BuildBatchConfig == null) null else BuildBatchConfig
        ["Description"] = if (Description == null) null else Description
        ["EncryptionKey"] = if (EncryptionKey == null) null else EncryptionKey
        ["Environment"] = if (Environment == null) null else Environment
        ["VpcConfig"] = if (VpcConfig == null) null else VpcConfig
        ["SecondaryArtifacts"] = if (SecondaryArtifacts == null) null else SecondaryArtifacts
        ["Tags"] = if (Tags == null) null else Tags
        ["Visibility"] = if (Visibility == null) null else Visibility
        ["ServiceRole"] = if (ServiceRole == null) null else ServiceRole
        ["Triggers"] = if (Triggers == null) null else Triggers
        ["TimeoutInMinutes"] = if (TimeoutInMinutes == null) null else TimeoutInMinutes
    }

}
