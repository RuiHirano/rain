/// AWS::CodeBuild::Project
///
/// Generated by rain build --pkl-class AWS::CodeBuild::Project
module aws.codebuild.project

import "../../cloudformation.pkl"

/// 
open class ProjectProjectBuildBatchConfig {
    CombineArtifacts: (Boolean|Mapping)?
    ServiceRole: (String|Mapping)?
    BatchReportMode: (String|Mapping)?
    TimeoutInMins: (Int|Mapping)?
    Restrictions: (ProjectBatchRestrictions)?
}

/// 
open class ProjectSourceAuth {
    Resource: (String|Mapping)?
    Type: String|Mapping
}

/// 
open class ProjectLogsConfig {
    CloudWatchLogs: (ProjectCloudWatchLogsConfig)?
    S3Logs: (ProjectS3LogsConfig)?
}

/// 
open class ProjectS3LogsConfig {
    Status: String|Mapping
    EncryptionDisabled: (Boolean|Mapping)?
    Location: (String|Mapping)?
}

/// 
open class ProjectVpcConfig {
    Subnets: (Listing<String|Mapping>)?
    VpcId: (String|Mapping)?
    SecurityGroupIds: (Listing<String|Mapping>)?
}

/// 
open class ProjectProjectFleet {
    FleetArn: (String|Mapping)?
}

/// 
open class ProjectSource {
    BuildSpec: (String|Mapping)?
    Location: (String|Mapping)?
    Type: String|Mapping
    ReportBuildStatus: (Boolean|Mapping)?
    SourceIdentifier: (String|Mapping)?
    GitSubmodulesConfig: (ProjectGitSubmodulesConfig)?
    InsecureSsl: (Boolean|Mapping)?
    Auth: (ProjectSourceAuth)?
    GitCloneDepth: (Int|Mapping)?
    BuildStatusConfig: (ProjectBuildStatusConfig)?
}

/// 
open class ProjectRegistryCredential {
    Credential: String|Mapping
    CredentialProvider: String|Mapping
}

/// 
open class ProjectProjectCache {
    Modes: (Listing<String|Mapping>)?
    Type: String|Mapping
    Location: (String|Mapping)?
}

/// 
open class ProjectArtifacts {
    Path: (String|Mapping)?
    Type: String|Mapping
    ArtifactIdentifier: (String|Mapping)?
    Packaging: (String|Mapping)?
    EncryptionDisabled: (Boolean|Mapping)?
    Name: (String|Mapping)?
    NamespaceType: (String|Mapping)?
    OverrideArtifactName: (Boolean|Mapping)?
    Location: (String|Mapping)?
}

/// 
open class ProjectTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class ProjectProjectSourceVersion {
    SourceIdentifier: String|Mapping
    SourceVersion: (String|Mapping)?
}

/// 
open class ProjectBuildStatusConfig {
    Context: (String|Mapping)?
    TargetUrl: (String|Mapping)?
}

/// 
open class ProjectEnvironment {
    EnvironmentVariables: (Listing<ProjectEnvironmentVariable>)?
    Fleet: (ProjectProjectFleet)?
    PrivilegedMode: (Boolean|Mapping)?
    ImagePullCredentialsType: (String|Mapping)?
    ComputeType: String|Mapping
    Type: String|Mapping
    Image: String|Mapping
    RegistryCredential: (ProjectRegistryCredential)?
    Certificate: (String|Mapping)?
}

/// 
open class ProjectProjectTriggers {
    BuildType: (String|Mapping)?
    FilterGroups: (Listing<ProjectFilterGroup>)?
    Webhook: (Boolean|Mapping)?
}

typealias ProjectFilterGroup = Dynamic


/// 
open class ProjectCloudWatchLogsConfig {
    StreamName: (String|Mapping)?
    Status: String|Mapping
    GroupName: (String|Mapping)?
}

/// 
open class ProjectProjectFileSystemLocation {
    MountPoint: String|Mapping
    Type: String|Mapping
    Identifier: String|Mapping
    MountOptions: (String|Mapping)?
    Location: String|Mapping
}

/// 
open class ProjectGitSubmodulesConfig {
    FetchSubmodules: Boolean|Mapping
}

/// 
open class ProjectBatchRestrictions {
    MaximumBuildsAllowed: (Int|Mapping)?
    ComputeTypesAllowed: (Listing<String|Mapping>)?
}

/// 
open class ProjectEnvironmentVariable {
    Value: String|Mapping
    Type: (String|Mapping)?
    Name: String|Mapping
}

/// Resource Type definition for AWS::CodeBuild::Project
open class Project extends cloudformation.Resource {

    Type = "AWS::CodeBuild::Project"


    /// 
    hidden SecondarySourceVersions: (Listing<ProjectProjectSourceVersion>)?

    /// 
    hidden Tags: (Listing<ProjectTag>)?

    /// 
    hidden BadgeEnabled: (Boolean|Mapping)?

    /// 
    hidden QueuedTimeoutInMinutes: (Int|Mapping)?

    /// 
    hidden ResourceAccessRole: (String|Mapping)?

    /// 
    hidden VpcConfig: (ProjectVpcConfig)?

    /// 
    hidden EncryptionKey: (String|Mapping)?

    /// 
    hidden FileSystemLocations: (Listing<ProjectProjectFileSystemLocation>)?

    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden Artifacts: ProjectArtifacts

    /// 
    hidden Environment: ProjectEnvironment

    /// 
    hidden Name: (String|Mapping)?

    /// 
    hidden Cache: (ProjectProjectCache)?

    /// 
    hidden SourceVersion: (String|Mapping)?

    /// 
    hidden Triggers: (ProjectProjectTriggers)?

    /// 
    hidden Visibility: (String|Mapping)?

    /// 
    hidden ServiceRole: String|Mapping

    /// 
    hidden SecondaryArtifacts: (Listing<ProjectArtifacts>)?

    /// 
    hidden ConcurrentBuildLimit: (Int|Mapping)?

    /// 
    hidden BuildBatchConfig: (ProjectProjectBuildBatchConfig)?

    /// 
    hidden Source: ProjectSource

    /// 
    hidden LogsConfig: (ProjectLogsConfig)?

    /// 
    hidden TimeoutInMinutes: (Int|Mapping)?

    /// 
    hidden SecondarySources: (Listing<ProjectSource>)?

    Properties {
        ["SecondarySourceVersions"] = if (SecondarySourceVersions == null) null else SecondarySourceVersions
        ["Tags"] = if (Tags == null) null else Tags
        ["BadgeEnabled"] = if (BadgeEnabled == null) null else BadgeEnabled
        ["QueuedTimeoutInMinutes"] = if (QueuedTimeoutInMinutes == null) null else QueuedTimeoutInMinutes
        ["ResourceAccessRole"] = if (ResourceAccessRole == null) null else ResourceAccessRole
        ["VpcConfig"] = if (VpcConfig == null) null else VpcConfig
        ["EncryptionKey"] = if (EncryptionKey == null) null else EncryptionKey
        ["FileSystemLocations"] = if (FileSystemLocations == null) null else FileSystemLocations
        ["Description"] = if (Description == null) null else Description
        ["Artifacts"] = if (Artifacts == null) null else Artifacts
        ["Environment"] = if (Environment == null) null else Environment
        ["Name"] = if (Name == null) null else Name
        ["Cache"] = if (Cache == null) null else Cache
        ["SourceVersion"] = if (SourceVersion == null) null else SourceVersion
        ["Triggers"] = if (Triggers == null) null else Triggers
        ["Visibility"] = if (Visibility == null) null else Visibility
        ["ServiceRole"] = if (ServiceRole == null) null else ServiceRole
        ["SecondaryArtifacts"] = if (SecondaryArtifacts == null) null else SecondaryArtifacts
        ["ConcurrentBuildLimit"] = if (ConcurrentBuildLimit == null) null else ConcurrentBuildLimit
        ["BuildBatchConfig"] = if (BuildBatchConfig == null) null else BuildBatchConfig
        ["Source"] = if (Source == null) null else Source
        ["LogsConfig"] = if (LogsConfig == null) null else LogsConfig
        ["TimeoutInMinutes"] = if (TimeoutInMinutes == null) null else TimeoutInMinutes
        ["SecondarySources"] = if (SecondarySources == null) null else SecondarySources
    }

}
