/// AWS::CodePipeline::Pipeline
///
/// Generated by rain build --pkl-class AWS::CodePipeline::Pipeline
module aws.codepipeline.pipeline

import "../../cloudformation.pkl"

/// 
open class GitConfiguration {
    PullRequest: (Listing<GitPullRequestFilter>)?
    Push: (Listing<GitPushFilter>)?
    SourceActionName: String|Mapping
}

/// 
open class ActionTypeId {
    Version: String|Mapping
    Provider: String|Mapping
    Owner: String|Mapping
    Category: String|Mapping
}

/// 
open class GitPullRequestFilter {
    FilePaths: (GitFilePathFilterCriteria)?
    Events: (Listing<String|Mapping>)?
    Branches: (GitBranchFilterCriteria)?
}

/// 
open class ActionDeclaration {
    InputArtifacts: (Listing<InputArtifact>)?
    Region: (String|Mapping)?
    Namespace: (String|Mapping)?
    TimeoutInMinutes: (Int|Mapping)?
    ActionTypeId: ActionTypeId
    Configuration: (Dynamic)?
    RunOrder: (Int|Mapping)?
    Name: String|Mapping
    OutputArtifacts: (Listing<OutputArtifact>)?
    RoleArn: (String|Mapping)?
}

/// 
open class GitFilePathFilterCriteria {
    Includes: (Listing<String|Mapping>)?
    Excludes: (Listing<String|Mapping>)?
}

/// 
open class GitBranchFilterCriteria {
    Includes: (Listing<String|Mapping>)?
    Excludes: (Listing<String|Mapping>)?
}

/// 
open class PipelineTriggerDeclaration {
    ProviderType: String|Mapping
    GitConfiguration: (GitConfiguration)?
}

/// 
open class EncryptionKey {
    Type: String|Mapping
    Id: String|Mapping
}

/// 
open class ArtifactStore {
    Type: String|Mapping
    EncryptionKey: (EncryptionKey)?
    Location: String|Mapping
}

/// 
open class StageTransition {
    StageName: String|Mapping
    Reason: String|Mapping
}

/// 
open class BlockerDeclaration {
    Type: String|Mapping
    Name: String|Mapping
}

/// 
open class StageDeclaration {
    Name: String|Mapping
    Blockers: (Listing<BlockerDeclaration>)?
    Actions: Listing<ActionDeclaration>
}

/// 
open class InputArtifact {
    Name: String|Mapping
}

/// 
open class VariableDeclaration {
    DefaultValue: (String|Mapping)?
    Description: (String|Mapping)?
    Name: String|Mapping
}

/// 
open class Tag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class ArtifactStoreMap {
    ArtifactStore: ArtifactStore
    Region: String|Mapping
}

/// 
open class GitPushFilter {
    FilePaths: (GitFilePathFilterCriteria)?
    Branches: (GitBranchFilterCriteria)?
    Tags: (GitTagFilterCriteria)?
}

/// 
open class GitTagFilterCriteria {
    Includes: (Listing<String|Mapping>)?
    Excludes: (Listing<String|Mapping>)?
}

/// 
open class OutputArtifact {
    Name: String|Mapping
}

/// Resource Type definition for AWS::CodePipeline::Pipeline
open class Pipeline extends cloudformation.Resource {

    Type = "AWS::CodePipeline::Pipeline"


    /// 
    hidden Stages: Listing<StageDeclaration>

    /// 
    hidden ExecutionMode: (String|Mapping)?

    /// 
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden DisableInboundStageTransitions: (Listing<StageTransition>)?

    /// 
    hidden RoleArn: String|Mapping

    /// 
    hidden ArtifactStores: (Listing<ArtifactStoreMap>)?

    /// 
    hidden Name: (String|Mapping)?

    /// 
    hidden Variables: (Listing<VariableDeclaration>)?

    /// 
    hidden ArtifactStore: (ArtifactStore)?

    /// 
    hidden RestartExecutionOnUpdate: (Boolean|Mapping)?

    /// 
    hidden Triggers: (Listing<PipelineTriggerDeclaration>)?

    /// 
    hidden PipelineType: (String|Mapping)?

    Properties {
        ["Stages"] = if (Stages == null) null else Stages
        ["ExecutionMode"] = if (ExecutionMode == null) null else ExecutionMode
        ["Tags"] = if (Tags == null) null else Tags
        ["DisableInboundStageTransitions"] = if (DisableInboundStageTransitions == null) null else DisableInboundStageTransitions
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["ArtifactStores"] = if (ArtifactStores == null) null else ArtifactStores
        ["Name"] = if (Name == null) null else Name
        ["Variables"] = if (Variables == null) null else Variables
        ["ArtifactStore"] = if (ArtifactStore == null) null else ArtifactStore
        ["RestartExecutionOnUpdate"] = if (RestartExecutionOnUpdate == null) null else RestartExecutionOnUpdate
        ["Triggers"] = if (Triggers == null) null else Triggers
        ["PipelineType"] = if (PipelineType == null) null else PipelineType
    }

}
