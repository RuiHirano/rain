/// AWS::Connect::Rule
///
/// Generated by rain build --pkl-class AWS::Connect::Rule
module aws.connect.rule

import "../../cloudformation.pkl"

/// The field of the case.
open class RuleField {
    Id: String|Mapping
    Value: RuleFieldValue
}

typealias RuleTaskActionReferences = Mapping<String, Any>

/// The definition of task action.
open class RuleTaskAction {
    Name: String|Mapping
    Description: (String|Mapping)?
    ContactFlowArn: String(matches(Regex(#"^$|arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/contact-flow/[-a-zA-Z0-9]*$"#)))|Mapping
    References: (RuleTaskActionReferences)?
}

typealias RuleUpdateCaseActions = Listing<(RuleUpdateCaseAction)?>


typealias RuleUserArn = String|Mapping


typealias RuleAssignContactCategoryActions = Listing<(RuleAssignContactCategoryAction)?>


typealias RuleCreateCaseActions = Listing<(RuleCreateCaseAction)?>


typealias RuleNotificationRecipientTypeUserTags = Mapping<String, Any>

/// The type of notification recipient.
open class RuleNotificationRecipientType {
    UserTags: (RuleNotificationRecipientTypeUserTags)?
    UserArns: (Listing<RuleUserArn>)?
}

typealias ReferenceType = "URL"|"ATTACHMENT"|"NUMBER"|"STRING"|"DATE"|"EMAIL"

/// A contact reference.
open class RuleReference {
    Value: String(matches(Regex(#"^(/|https:)"#)))|Mapping
    Type: ReferenceType|Mapping
}

typealias SendNotificationActionDeliveryMethod = "EMAIL"

typealias SendNotificationActionContentType = "PLAIN_TEXT"

/// The definition for sending notification action.
open class RuleSendNotificationAction {
    DeliveryMethod: SendNotificationActionDeliveryMethod|Mapping
    Subject: (String|Mapping)?
    Content: String|Mapping
    ContentType: SendNotificationActionContentType|Mapping
    Recipient: RuleNotificationRecipientType
}

typealias RuleAssignContactCategoryAction = Dynamic


/// The definition for event bridge action.
open class RuleEventBridgeAction {
    Name: String(matches(Regex(#"^[a-zA-Z0-9._-]{1,100}$"#)))|Mapping
}

typealias RuleEndAssociatedTasksAction = Dynamic


/// The value of the field.
open class RuleFieldValue {
    StringValue: (String|Mapping)?
    BooleanValue: (Boolean|Mapping)?
    DoubleValue: (Number|Mapping)?
    EmptyValue: (Dynamic)?
}

typealias RuleFields = Listing<(RuleField)?>


typealias RuleSendNotificationActions = Listing<(RuleSendNotificationAction)?>


/// The definition for update case action.
open class RuleUpdateCaseAction {
    Fields: RuleFields
}

/// The list of actions that will be executed when a rule is triggered.
open class RuleActions {
    UpdateCaseActions: (RuleUpdateCaseActions)?
    EndAssociatedTasksActions: (RuleEndAssociatedTasksActions)?
    AssignContactCategoryActions: (RuleAssignContactCategoryActions)?
    EventBridgeActions: (RuleEventBridgeActions)?
    TaskActions: (RuleTaskActions)?
    SendNotificationActions: (RuleSendNotificationActions)?
    CreateCaseActions: (RuleCreateCaseActions)?
}

/// The definition for create case action.
open class RuleCreateCaseAction {
    Fields: RuleFields
    TemplateId: String|Mapping
}

typealias RuleTriggerEventSourceEventSourceName = "OnContactEvaluationSubmit"|"OnPostCallAnalysisAvailable"|"OnRealTimeCallAnalysisAvailable"|"OnRealTimeChatAnalysisAvailable"|"OnPostChatAnalysisAvailable"|"OnZendeskTicketCreate"|"OnZendeskTicketStatusUpdate"|"OnSalesforceCaseCreate"|"OnMetricDataUpdate"|"OnCaseCreate"|"OnCaseUpdate"

/// The event source that will trigger the rule.
open class RuleRuleTriggerEventSource {
    IntegrationAssociationArn: (String(matches(Regex(#"^$|arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/integration-association/[-a-zA-Z0-9]*$"#)))|Mapping)?
    EventSourceName: RuleTriggerEventSourceEventSourceName|Mapping
}

/// A key-value pair to associate with a resource.
open class RuleTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

typealias RuleTaskActions = Listing<(RuleTaskAction)?>


typealias RuleEndAssociatedTasksActions = Listing<(RuleEndAssociatedTasksAction)?>


typealias RuleEventBridgeActions = Listing<(RuleEventBridgeAction)?>


/// Resource Type definition for AWS:Connect::Rule
open class Rule extends cloudformation.Resource {

    Type = "AWS::Connect::Rule"


    /// The list of actions that will be executed when a rule is triggered.
    hidden Actions: RuleActions

    /// The conditions of a rule.
    hidden Function: String|Mapping

    /// The Amazon Resource Name (ARN) of the instance.
    hidden InstanceArn: String(matches(Regex(#"^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*$"#)))|Mapping

    /// The name of the rule.
    hidden Name: String(matches(Regex(#"^[a-zA-Z0-9._-]{1,200}$"#)))|Mapping

    /// The publish status of a rule, either draft or published.
    hidden PublishStatus: RulePublishStatus|Mapping

    /// One or more tags.
    hidden Tags: (Listing<RuleTag>)?

    /// The event source that triggers the rule.
    hidden TriggerEventSource: RuleRuleTriggerEventSource

    Properties {
        ["Actions"] = if (Actions == null) null else Actions
        ["Function"] = if (Function == null) null else Function
        ["InstanceArn"] = if (InstanceArn == null) null else InstanceArn
        ["Name"] = if (Name == null) null else Name
        ["PublishStatus"] = if (PublishStatus == null) null else PublishStatus
        ["Tags"] = if (Tags == null) null else Tags
        ["TriggerEventSource"] = if (TriggerEventSource == null) null else TriggerEventSource
    }

}


typealias RulePublishStatus = "DRAFT"|"PUBLISHED"
