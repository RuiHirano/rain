/// AWS::CustomerProfiles::Integration
///
/// Generated by rain build --pkl-class AWS::CustomerProfiles::Integration
module aws.customerprofiles.integration

import "../../cloudformation.pkl"

/// 
open class DestinationField {
}

/// 
open class FlowDefinition {
    SourceFlowConfig: SourceFlowConfig
    FlowName: String(matches(Regex(#"[a-zA-Z0-9][\w!@#.-]+"#)))|Mapping
    Description: (String(matches(Regex(#"[\w!@#\-.?,\s]*"#)))|Mapping)?
    KmsArn: String(matches(Regex(#"arn:aws:kms:.*:[0-9]+:.*"#)))|Mapping
    Tasks: Listing<Task>
    TriggerConfig: TriggerConfig
}

/// 
open class SalesforceSourceProperties {
    EnableDynamicFieldUpdate: (Boolean|Mapping)?
    IncludeDeletedRecords: (Boolean|Mapping)?
    Object: Object
}

/// 
open class ServiceNowSourceProperties {
    Object: Object
}

/// 
open class ConnectorType {
}

/// 
open class SalesforceConnectorOperator {
}

/// 
open class Task {
    ConnectorOperator: (ConnectorOperator)?
    SourceFields: Listing<String|Mapping>
    DestinationField: (DestinationField)?
    TaskType: TaskType
    TaskProperties: (Listing<TaskPropertiesMap>)?
}

/// 
open class Date {
}

/// 
open class Tag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

/// 
open class IncrementalPullConfig {
    DatetimeTypeFieldName: (String|Mapping)?
}

/// 
open class MarketoConnectorOperator {
}

/// 
open class S3ConnectorOperator {
}

/// 
open class TriggerProperties {
    Scheduled: (ScheduledTriggerProperties)?
}

/// 
open class MarketoSourceProperties {
    Object: Object
}

/// 
open class S3SourceProperties {
    BucketName: String(matches(Regex(#"\S+"#)))|Mapping
    BucketPrefix: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// 
open class SourceConnectorProperties {
    ServiceNow: (ServiceNowSourceProperties)?
    Zendesk: (ZendeskSourceProperties)?
    Marketo: (MarketoSourceProperties)?
    S3: (S3SourceProperties)?
    Salesforce: (SalesforceSourceProperties)?
}

/// 
open class ConnectorOperator {
    ServiceNow: (ServiceNowConnectorOperator)?
    Zendesk: (ZendeskConnectorOperator)?
    Marketo: (MarketoConnectorOperator)?
    S3: (S3ConnectorOperator)?
    Salesforce: (SalesforceConnectorOperator)?
}

/// 
open class ZendeskConnectorOperator {
}

/// 
open class Object {
}

/// 
open class ServiceNowConnectorOperator {
}

/// 
open class ObjectTypeMapping {
    Key: String|Mapping
    Value: String(matches(Regex(#"^[a-zA-Z_][a-zA-Z_0-9-]*$"#)))|Mapping
}

/// 
open class SourceFlowConfig {
    ConnectorType: ConnectorType
    ConnectorProfileName: (String(matches(Regex(#"[\w/!@#+=.-]+"#)))|Mapping)?
    IncrementalPullConfig: (IncrementalPullConfig)?
    SourceConnectorProperties: SourceConnectorProperties
}

/// 
open class TriggerType {
}

typealias ScheduledTriggerPropertiesDataPullMode = "Incremental"|"Complete"

/// 
open class ScheduledTriggerProperties {
    ScheduleOffset: (Int|Mapping)?
    FirstExecutionFrom: (Date)?
    ScheduleExpression: String(matches(Regex(#".*"#)))|Mapping
    DataPullMode: (ScheduledTriggerPropertiesDataPullMode|Mapping)?
    ScheduleStartTime: (Date)?
    ScheduleEndTime: (Date)?
    Timezone: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// 
open class TriggerConfig {
    TriggerType: TriggerType
    TriggerProperties: (TriggerProperties)?
}

/// 
open class OperatorPropertiesKeys {
}

/// 
open class TaskType {
}

/// 
open class Operator {
}

/// 
open class TaskPropertiesMap {
    OperatorPropertyKey: OperatorPropertiesKeys
    Property: String(matches(Regex(#".+"#)))|Mapping
}

/// 
open class ZendeskSourceProperties {
    Object: Object
}

/// The resource schema for creating an Amazon Connect Customer Profiles Integration.
open class Integration extends cloudformation.Resource {

    Type = "AWS::CustomerProfiles::Integration"


    /// The unique name of the domain.
    hidden DomainName: String(matches(Regex(#"^[a-zA-Z0-9_-]+$"#)))|Mapping

    /// The URI of the S3 bucket or any other type of data source.
    hidden Uri: (String|Mapping)?

    /// 
    hidden FlowDefinition: (FlowDefinition)?

    /// The name of the ObjectType defined for the 3rd party data in Profile Service
    hidden ObjectTypeName: (String(matches(Regex(#"^[a-zA-Z_][a-zA-Z_0-9-]*$"#)))|Mapping)?

    /// The tags (keys and values) associated with the integration
    hidden Tags: (Listing<Tag>)?

    /// The mapping between 3rd party event types and ObjectType names
    hidden ObjectTypeNames: (Listing<ObjectTypeMapping>)?

    Properties {
        ["DomainName"] = if (DomainName == null) null else DomainName
        ["Uri"] = if (Uri == null) null else Uri
        ["FlowDefinition"] = if (FlowDefinition == null) null else FlowDefinition
        ["ObjectTypeName"] = if (ObjectTypeName == null) null else ObjectTypeName
        ["Tags"] = if (Tags == null) null else Tags
        ["ObjectTypeNames"] = if (ObjectTypeNames == null) null else ObjectTypeNames
    }

}
