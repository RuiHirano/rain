/// AWS::DataBrew::Dataset
///
/// Generated by rain build --pkl-class AWS::DataBrew::Dataset
module aws.databrew.dataset

import "../../cloudformation.pkl"

/// 
open class DataCatalogInputDefinition {
    CatalogId: (String|Mapping)?
    DatabaseName: (String|Mapping)?
    TableName: (String|Mapping)?
    TempDirectory: (S3Location)?
}

/// 
open class DatabaseInputDefinition {
    GlueConnectionName: String|Mapping
    DatabaseTableName: (String|Mapping)?
    TempDirectory: (S3Location)?
    QueryString: (String|Mapping)?
}

typealias DatasetParameterType = "String"|"Number"|"Datetime"

/// 
open class DatasetParameter {
    Name: PathParameterName
    Type: DatasetParameterType|Mapping
    DatetimeOptions: (DatetimeOptions)?
    CreateColumn: (Boolean|Mapping)?
    Filter: (FilterExpression)?
}

/// 
open class DatetimeOptions {
    LocaleCode: (String(matches(Regex(#"^[A-Za-z0-9_\.#@\-]+$"#)))|Mapping)?
    Format: String|Mapping
    TimezoneOffset: (String(matches(Regex(#"^(Z|[-+](\d|\d{2}|\d{2}:?\d{2}))$"#)))|Mapping)?
}

/// 
open class FilterExpression {
    Expression: String(matches(Regex(#"^[><0-9A-Za-z_.,:)(!= ]+$"#)))|Mapping
    ValuesMap: Listing<FilterValue>
}

/// Csv options
open class CsvOptions {
    Delimiter: (String|Mapping)?
    HeaderRow: (Boolean|Mapping)?
}

/// Input location
open class S3Location {
    Key: (String|Mapping)?
    Bucket: String|Mapping
}

/// Path options for dataset
open class PathOptions {
    Parameters: (Listing<PathParameter>)?
    FilesLimit: (FilesLimit)?
    LastModifiedDateCondition: (FilterExpression)?
}

/// A key-value pair to associate expression variable names with their values
open class FilterValue {
    Value: String|Mapping
    ValueReference: String(matches(Regex(#"^:[A-Za-z0-9_]+$"#)))|Mapping
}

/// 
open class ExcelOptions {
    SheetIndexes: (Listing<Int|Mapping>)?
    HeaderRow: (Boolean|Mapping)?
    SheetNames: (Listing<String|Mapping>)?
}

/// Format options for dataset
open class FormatOptions {
    Excel: (ExcelOptions)?
    Csv: (CsvOptions)?
    Json: (JsonOptions)?
}

typealias FilesLimitOrder = "ASCENDING"|"DESCENDING"

typealias FilesLimitOrderedBy = "LAST_MODIFIED_DATE"

/// 
open class FilesLimit {
    Order: (FilesLimitOrder|Mapping)?
    MaxFiles: Int|Mapping
    OrderedBy: (FilesLimitOrderedBy|Mapping)?
}

/// A key-value pair to associate dataset parameter name with its definition.
open class PathParameter {
    PathParameterName: PathParameterName
    DatasetParameter: DatasetParameter
}

/// Parameter name
open class PathParameterName {
}

/// A key-value pair to associate with a resource.
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Json options
open class JsonOptions {
    MultiLine: (Boolean|Mapping)?
}

/// 
open class Metadata {
    SourceArn: (String|Mapping)?
}

/// Input
open class Input {
    S3InputDefinition: (S3Location)?
    DataCatalogInputDefinition: (DataCatalogInputDefinition)?
    DatabaseInputDefinition: (DatabaseInputDefinition)?
    Metadata: (Metadata)?
}

/// Resource schema for AWS::DataBrew::Dataset.
open class Dataset extends cloudformation.Resource {

    Type = "AWS::DataBrew::Dataset"


    /// 
    hidden Tags: (Listing<Tag>)?

    /// Dataset name
    hidden Name: String|Mapping

    /// Dataset format
    hidden Format: (DatasetFormat|Mapping)?

    /// Format options for dataset
    hidden FormatOptions: (FormatOptions)?

    /// Input
    hidden Input: Input

    /// PathOptions
    hidden PathOptions: (PathOptions)?

    Properties {
        ["Tags"] = if (Tags == null) null else Tags
        ["Name"] = if (Name == null) null else Name
        ["Format"] = if (Format == null) null else Format
        ["FormatOptions"] = if (FormatOptions == null) null else FormatOptions
        ["Input"] = if (Input == null) null else Input
        ["PathOptions"] = if (PathOptions == null) null else PathOptions
    }

}


typealias DatasetFormat = "CSV"|"JSON"|"PARQUET"|"EXCEL"|"ORC"
