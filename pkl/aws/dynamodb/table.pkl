/// AWS::DynamoDB::Table
///
/// Generated by rain build --pkl-class AWS::DynamoDB::Table
module aws.dynamodb.table

import "../../cloudformation.pkl"

/// The S3 bucket that is being imported from.
open class TableS3BucketSource {
    S3Bucket: String|Mapping
    S3KeyPrefix: (String|Mapping)?
    S3BucketOwner: (String|Mapping)?
}

/// Represents an attribute for describing the schema for the table and indexes.
open class TableAttributeDefinition {
    AttributeType: String|Mapping
    AttributeName: String|Mapping
}

/// Represents the settings used to enable server-side encryption.
open class TableSSESpecification {
    SSEEnabled: Boolean|Mapping
    SSEType: (String|Mapping)?
    KMSMasterKeyId: (String|Mapping)?
}

/// The settings used to enable point in time recovery.
open class TablePointInTimeRecoverySpecification {
    PointInTimeRecoveryEnabled: (Boolean|Mapping)?
}

/// 
open class TableDeprecatedKeySchema {
    HashKeyElement: TableDeprecatedHashKeyElement
}

/// Specifies the properties of data being imported from the S3 bucket source to the table.
open class TableImportSourceSpecification {
    InputCompressionType: (String|Mapping)?
    S3BucketSource: TableS3BucketSource
    InputFormat: String|Mapping
    InputFormatOptions: (TableInputFormatOptions)?
}

/// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
open class TableProvisionedThroughput {
    WriteCapacityUnits: Int|Mapping
    ReadCapacityUnits: Int|Mapping
}

/// Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
open class TableTimeToLiveSpecification {
    AttributeName: (String|Mapping)?
    Enabled: Boolean|Mapping
}

/// The format options for the data that was imported into the target table. There is one value, CsvOption.
open class TableInputFormatOptions {
    Csv: (TableCsv)?
}

/// Represents *a single element* of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
///
///  A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A composite primary key would require one ``KeySchemaElement`` for the partition key, and another ``KeySchemaElement`` for the sort key.
///  A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
open class TableKeySchema {
    AttributeName: String|Mapping
    KeyType: String|Mapping
}

/// Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. 
///
///   AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the application of a tag.
///  For an overview on tagging DynamoDB resources, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the *Amazon DynamoDB Developer Guide*.
open class TableTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// The options for imported source files in CSV format. The values are Delimiter and HeaderList.
open class TableCsv {
    Delimiter: (String|Mapping)?
    HeaderList: (Listing<String|Mapping>)?
}

/// Represents the DynamoDB Streams configuration for a table in DynamoDB.
open class TableStreamSpecification {
    StreamViewType: String|Mapping
}

/// The settings used to enable or disable CloudWatch Contributor Insights.
open class TableContributorInsightsSpecification {
    Enabled: Boolean|Mapping
}

/// Represents the properties of a local secondary index. A local secondary index can only be created when its parent table is created.
open class TableLocalSecondaryIndex {
    IndexName: String|Mapping
    Projection: TableProjection
    KeySchema: Listing<TableKeySchema>
}

typealias KinesisStreamSpecificationApproximateCreationDateTimePrecision = "MICROSECOND"|"MILLISECOND"

/// The Kinesis Data Streams configuration for the specified table.
open class TableKinesisStreamSpecification {
    ApproximateCreationDateTimePrecision: (KinesisStreamSpecificationApproximateCreationDateTimePrecision|Mapping)?
    StreamArn: String|Mapping
}

/// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
open class TableProjection {
    ProjectionType: (String|Mapping)?
    NonKeyAttributes: (Listing<String|Mapping>)?
}

/// Represents the properties of a global secondary index.
open class TableGlobalSecondaryIndex {
    Projection: TableProjection
    ProvisionedThroughput: (TableProvisionedThroughput)?
    KeySchema: Listing<TableKeySchema>
    IndexName: String|Mapping
    ContributorInsightsSpecification: (TableContributorInsightsSpecification)?
}

/// 
open class TableDeprecatedHashKeyElement {
    AttributeType: String|Mapping
    AttributeName: String|Mapping
}

/// The ``AWS::DynamoDB::Table`` resource creates a DDB table. For more information, see [CreateTable](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html) in the *API Reference*.
///
///  You should be aware of the following behaviors when working with DDB tables:
///   +  CFNlong typically creates DDB tables in parallel. However, if your template includes multiple DDB tables with indexes, you must declare dependencies so that the tables are created sequentially. DDBlong limits the number of tables with secondary indexes that are in the creating state. If you create multiple tables with indexes at the same time, DDB returns an error and the stack operation fails. For an example, see [DynamoDB Table with a DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table--examples--DynamoDB_Table_with_a_DependsOn_Attribute).
///   
///    Our guidance is to use the latest schema documented here for your CFNlong templates. This schema supports the provisioning of all table settings below. When using this schema in your CFNlong templates, please ensure that your Identity and Access Management (IAM) policies are updated with appropriate permissions to allow for the authorization of these setting changes.
open class Table extends cloudformation.Resource {

    Type = "AWS::DynamoDB::Table"


    /// The settings used to enable point in time recovery.
    hidden PointInTimeRecoverySpecification: (TablePointInTimeRecoverySpecification)?

    /// Specifies the Time to Live (TTL) settings for the table.
    ///
    ///   For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    hidden TimeToLiveSpecification: (TableTimeToLiveSpecification)?

    /// Specifies the settings to enable server-side encryption.
    hidden SSESpecification: (TableSSESpecification)?

    /// Specifies the properties of data being imported from the S3 bucket source to the table.
    ///
    ///   If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
    hidden ImportSourceSpecification: (TableImportSourceSpecification)?

    /// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
    ///
    ///   If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
    ///  If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index. 
    ///  Updates are not supported. The following are exceptions:
    ///   +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
    ///   +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
    hidden GlobalSecondaryIndexes: (Listing<TableGlobalSecondaryIndex>)?
