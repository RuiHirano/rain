/// AWS::EC2::ClientVpnEndpoint
///
/// Generated by rain build --pkl-class AWS::EC2::ClientVpnEndpoint
module aws.ec2.clientvpnendpoint

import "../../cloudformation.pkl"

/// 
open class ClientVpnEndpointConnectionLogOptions {
    Enabled: Boolean|Mapping
    CloudwatchLogGroup: (String|Mapping)?
    CloudwatchLogStream: (String|Mapping)?
}

/// 
open class ClientVpnEndpointClientConnectOptions {
    Enabled: Boolean|Mapping
    LambdaFunctionArn: (String|Mapping)?
}

/// 
open class ClientVpnEndpointTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class ClientVpnEndpointClientLoginBannerOptions {
    Enabled: Boolean|Mapping
    BannerText: (String|Mapping)?
}

/// 
open class ClientVpnEndpointFederatedAuthenticationRequest {
    SAMLProviderArn: String|Mapping
    SelfServiceSAMLProviderArn: (String|Mapping)?
}

/// 
open class ClientVpnEndpointDirectoryServiceAuthenticationRequest {
    DirectoryId: String|Mapping
}

/// 
open class ClientVpnEndpointCertificateAuthenticationRequest {
    ClientRootCertificateChainArn: String|Mapping
}

/// 
open class ClientVpnEndpointClientAuthenticationRequest {
    MutualAuthentication: (ClientVpnEndpointCertificateAuthenticationRequest)?
    Type: String|Mapping
    ActiveDirectory: (ClientVpnEndpointDirectoryServiceAuthenticationRequest)?
    FederatedAuthentication: (ClientVpnEndpointFederatedAuthenticationRequest)?
}

/// 
open class ClientVpnEndpointTagSpecification {
    ResourceType: String|Mapping
    Tags: Listing<ClientVpnEndpointTag>
}

/// Resource Type definition for AWS::EC2::ClientVpnEndpoint
open class ClientVpnEndpoint extends cloudformation.Resource {

    Type = "AWS::EC2::ClientVpnEndpoint"


    /// 
    hidden ServerCertificateArn: String|Mapping

    /// 
    hidden DnsServers: (Listing<String|Mapping>)?

    /// 
    hidden SelfServicePortal: (String|Mapping)?

    /// 
    hidden TransportProtocol: (String|Mapping)?

    /// 
    hidden ClientCidrBlock: String|Mapping

    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden ClientLoginBannerOptions: (ClientVpnEndpointClientLoginBannerOptions)?

    /// 
    hidden VpcId: (String|Mapping)?

    /// 
    hidden AuthenticationOptions: Listing<ClientVpnEndpointClientAuthenticationRequest>

    /// 
    hidden ConnectionLogOptions: ClientVpnEndpointConnectionLogOptions

    /// 
    hidden SplitTunnel: (Boolean|Mapping)?

    /// 
    hidden ClientConnectOptions: (ClientVpnEndpointClientConnectOptions)?

    /// 
    hidden SessionTimeoutHours: (Int|Mapping)?

    /// 
    hidden VpnPort: (Int|Mapping)?

    /// 
    hidden TagSpecifications: (Listing<ClientVpnEndpointTagSpecification>)?

    /// 
    hidden SecurityGroupIds: (Listing<String|Mapping>)?

    Properties {
        ["ServerCertificateArn"] = if (ServerCertificateArn == null) null else ServerCertificateArn
        ["DnsServers"] = if (DnsServers == null) null else DnsServers
        ["SelfServicePortal"] = if (SelfServicePortal == null) null else SelfServicePortal
        ["TransportProtocol"] = if (TransportProtocol == null) null else TransportProtocol
        ["ClientCidrBlock"] = if (ClientCidrBlock == null) null else ClientCidrBlock
        ["Description"] = if (Description == null) null else Description
        ["ClientLoginBannerOptions"] = if (ClientLoginBannerOptions == null) null else ClientLoginBannerOptions
        ["VpcId"] = if (VpcId == null) null else VpcId
        ["AuthenticationOptions"] = if (AuthenticationOptions == null) null else AuthenticationOptions
        ["ConnectionLogOptions"] = if (ConnectionLogOptions == null) null else ConnectionLogOptions
        ["SplitTunnel"] = if (SplitTunnel == null) null else SplitTunnel
        ["ClientConnectOptions"] = if (ClientConnectOptions == null) null else ClientConnectOptions
        ["SessionTimeoutHours"] = if (SessionTimeoutHours == null) null else SessionTimeoutHours
        ["VpnPort"] = if (VpnPort == null) null else VpnPort
        ["TagSpecifications"] = if (TagSpecifications == null) null else TagSpecifications
        ["SecurityGroupIds"] = if (SecurityGroupIds == null) null else SecurityGroupIds
    }

}
