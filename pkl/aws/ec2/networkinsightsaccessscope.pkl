/// AWS::EC2::NetworkInsightsAccessScope
///
/// Generated by rain build --pkl-class AWS::EC2::NetworkInsightsAccessScope
module aws.ec2.networkinsightsaccessscope

import "../../cloudformation.pkl"

/// 
open class NetworkInsightsAccessScopeTag {
    Key: String|Mapping
    Value: (String|Mapping)?
}

/// 
open class NetworkInsightsAccessScopeAccessScopePathRequest {
    Source: (NetworkInsightsAccessScopePathStatementRequest)?
    Destination: (NetworkInsightsAccessScopePathStatementRequest)?
    ThroughResources: (Listing<NetworkInsightsAccessScopeThroughResourcesStatementRequest>)?
}

/// 
open class NetworkInsightsAccessScopePathStatementRequest {
    ResourceStatement: (NetworkInsightsAccessScopeResourceStatementRequest)?
    PacketHeaderStatement: (NetworkInsightsAccessScopePacketHeaderStatementRequest)?
}

/// 
open class NetworkInsightsAccessScopePacketHeaderStatementRequest {
    DestinationPrefixLists: (Listing<String|Mapping>)?
    Protocols: (Listing<NetworkInsightsAccessScopeProtocol>)?
    SourceAddresses: (Listing<String|Mapping>)?
    DestinationAddresses: (Listing<String|Mapping>)?
    SourcePorts: (Listing<String|Mapping>)?
    DestinationPorts: (Listing<String|Mapping>)?
    SourcePrefixLists: (Listing<String|Mapping>)?
}

typealias NetworkInsightsAccessScopeProtocol = String|Mapping


/// 
open class NetworkInsightsAccessScopeResourceStatementRequest {
    Resources: (Listing<String|Mapping>)?
    ResourceTypes: (Listing<String|Mapping>)?
}

/// 
open class NetworkInsightsAccessScopeThroughResourcesStatementRequest {
    ResourceStatement: (NetworkInsightsAccessScopeResourceStatementRequest)?
}

/// Resource schema for AWS::EC2::NetworkInsightsAccessScope
open class NetworkInsightsAccessScope extends cloudformation.Resource {

    Type = "AWS::EC2::NetworkInsightsAccessScope"


    /// 
    hidden Tags: (Listing<NetworkInsightsAccessScopeTag>)?

    /// 
    hidden MatchPaths: (Listing<NetworkInsightsAccessScopeAccessScopePathRequest>)?

    /// 
    hidden ExcludePaths: (Listing<NetworkInsightsAccessScopeAccessScopePathRequest>)?

    Properties {
        ["Tags"] = if (Tags == null) null else Tags
        ["MatchPaths"] = if (MatchPaths == null) null else MatchPaths
        ["ExcludePaths"] = if (ExcludePaths == null) null else ExcludePaths
    }

}
