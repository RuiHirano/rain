/// AWS::EC2::NetworkInsightsAnalysis
///
/// Generated by rain build --pkl-class AWS::EC2::NetworkInsightsAnalysis
module aws.ec2.networkinsightsanalysis

import "../../cloudformation.pkl"

/// 
open class ResourceArn {
}

/// 
open class AnalysisLoadBalancerListener {
    InstancePort: (Port)?
    LoadBalancerPort: (Port)?
}

/// 
open class AnalysisLoadBalancerTarget {
    Address: (IpAddress)?
    Instance: (AnalysisComponent)?
    Port: (Port)?
    AvailabilityZone: (String|Mapping)?
}

/// 
open class Port {
}

/// 
open class AlternatePathHint {
    ComponentArn: (String|Mapping)?
    ComponentId: (String|Mapping)?
}

/// 
open class TransitGatewayRouteTableRoute {
    PrefixListId: (String|Mapping)?
    ResourceId: (String|Mapping)?
    State: (String|Mapping)?
    ResourceType: (String|Mapping)?
    RouteOrigin: (String|Mapping)?
    DestinationCidr: (String|Mapping)?
    AttachmentId: (String|Mapping)?
}

/// 
open class AnalysisRouteTableRoute {
    instanceId: (String|Mapping)?
    State: (String|Mapping)?
    NatGatewayId: (String|Mapping)?
    Origin: (String|Mapping)?
    VpcPeeringConnectionId: (String|Mapping)?
    NetworkInterfaceId: (String|Mapping)?
    TransitGatewayId: (String|Mapping)?
    egressOnlyInternetGatewayId: (String|Mapping)?
    gatewayId: (String|Mapping)?
    destinationPrefixListId: (String|Mapping)?
    destinationCidr: (String|Mapping)?
}

/// 
open class PathComponent {
    RouteTableRoute: (AnalysisRouteTableRoute)?
    InboundHeader: (AnalysisPacketHeader)?
    SecurityGroupRule: (AnalysisSecurityGroupRule)?
    AclRule: (AnalysisAclRule)?
    TransitGatewayRouteTableRoute: (TransitGatewayRouteTableRoute)?
    Component: (AnalysisComponent)?
    Subnet: (AnalysisComponent)?
    AdditionalDetails: (Listing<AdditionalDetail>)?
    Vpc: (AnalysisComponent)?
    SequenceNumber: (Int|Mapping)?
    ServiceName: (String|Mapping)?
    SourceVpc: (AnalysisComponent)?
    OutboundHeader: (AnalysisPacketHeader)?
    DestinationVpc: (AnalysisComponent)?
    ElasticLoadBalancerListener: (AnalysisComponent)?
    Explanations: (Listing<Explanation>)?
    TransitGateway: (AnalysisComponent)?
}

/// 
open class Explanation {
    ExplanationCode: (String|Mapping)?
    AttachedTo: (AnalysisComponent)?
    LoadBalancerTargetGroup: (AnalysisComponent)?
    SecurityGroupRule: (AnalysisSecurityGroupRule)?
    TransitGatewayRouteTable: (AnalysisComponent)?
    ClassicLoadBalancerListener: (AnalysisLoadBalancerListener)?
    LoadBalancerListenerPort: (Port)?
    ComponentAccount: (String|Mapping)?
    VpnConnection: (AnalysisComponent)?
    Component: (AnalysisComponent)?
    SubnetRouteTable: (AnalysisComponent)?
    RouteTable: (AnalysisComponent)?
    State: (String|Mapping)?
    SecurityGroups: (Listing<AnalysisComponent>)?
    TransitGatewayRouteTableRoute: (TransitGatewayRouteTableRoute)?
    VpcPeeringConnection: (AnalysisComponent)?
    NetworkInterface: (AnalysisComponent)?
    NatGateway: (AnalysisComponent)?
    IngressRouteTable: (AnalysisComponent)?
    Destination: (AnalysisComponent)?
    Protocols: (Listing<Protocol>)?
    Direction: (String|Mapping)?
    LoadBalancerArn: (ResourceArn)?
    ComponentRegion: (String|Mapping)?
    AvailabilityZones: (Listing<String|Mapping>)?
    Acl: (AnalysisComponent)?
    DestinationVpc: (AnalysisComponent)?
    LoadBalancerTargetGroups: (Listing<AnalysisComponent>)?
    MissingComponent: (String|Mapping)?
    PortRanges: (Listing<PortRange>)?
    LoadBalancerTargetPort: (Port)?
    TransitGateway: (AnalysisComponent)?
    TransitGatewayAttachment: (AnalysisComponent)?
    VpnGateway: (AnalysisComponent)?
    Address: (IpAddress)?
    InternetGateway: (AnalysisComponent)?
    Subnet: (AnalysisComponent)?
    AclRule: (AnalysisAclRule)?
    PacketField: (String|Mapping)?
    Port: (Port)?
    ElasticLoadBalancerListener: (AnalysisComponent)?
    SourceVpc: (AnalysisComponent)?
    Vpc: (AnalysisComponent)?
    vpcEndpoint: (AnalysisComponent)?
    Cidrs: (Listing<String|Mapping>)?
    LoadBalancerTarget: (AnalysisLoadBalancerTarget)?
    PrefixList: (AnalysisComponent)?
    CustomerGateway: (AnalysisComponent)?
    SecurityGroup: (AnalysisComponent)?
    RouteTableRoute: (AnalysisRouteTableRoute)?
    Addresses: (Listing<IpAddress>)?
}

/// 
open class AdditionalDetail {
    ServiceName: (String|Mapping)?
    AdditionalDetailType: (String|Mapping)?
    LoadBalancers: (Listing<AnalysisComponent>)?
    Component: (AnalysisComponent)?
}

/// 
open class Tags {
}

/// 
open class PortRange {
    From: (Int|Mapping)?
    To: (Int|Mapping)?
}

/// 
open class IpAddress {
}

/// 
open class Protocol {
}

/// 
open class AnalysisSecurityGroupRule {
    PortRange: (PortRange)?
    Cidr: (String|Mapping)?
    PrefixListId: (String|Mapping)?
    SecurityGroupId: (String|Mapping)?
    Protocol: (Protocol)?
    Direction: (String|Mapping)?
}

/// 
open class AnalysisAclRule {
    PortRange: (PortRange)?
    Cidr: (String|Mapping)?
    RuleAction: (String|Mapping)?
    Egress: (Boolean|Mapping)?
    RuleNumber: (Int|Mapping)?
    Protocol: (Protocol)?
}

/// 
open class Tag {
    Value: (String|Mapping)?
    Key: String|Mapping
}

/// 
open class AnalysisPacketHeader {
    DestinationPortRanges: (Listing<PortRange>)?
    SourcePortRanges: (Listing<PortRange>)?
    DestinationAddresses: (Listing<IpAddress>)?
    Protocol: (Protocol)?
    SourceAddresses: (Listing<IpAddress>)?
}

/// 
open class AnalysisComponent {
    Id: (String|Mapping)?
    Arn: (String|Mapping)?
}

/// Resource schema for AWS::EC2::NetworkInsightsAnalysis
open class NetworkInsightsAnalysis extends cloudformation.Resource {

    Type = "AWS::EC2::NetworkInsightsAnalysis"


    /// 
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden AdditionalAccounts: (Listing<String|Mapping>)?

    /// 
    hidden NetworkInsightsPathId: String|Mapping

    /// 
    hidden FilterInArns: (Listing<ResourceArn>)?

    Properties {
        ["Tags"] = if (Tags == null) null else Tags
        ["AdditionalAccounts"] = if (AdditionalAccounts == null) null else AdditionalAccounts
        ["NetworkInsightsPathId"] = if (NetworkInsightsPathId == null) null else NetworkInsightsPathId
        ["FilterInArns"] = if (FilterInArns == null) null else FilterInArns
    }

}
