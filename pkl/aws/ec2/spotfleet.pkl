/// AWS::EC2::SpotFleet
///
/// Generated by rain build --pkl-class AWS::EC2::SpotFleet
module aws.ec2.spotfleet

import "../../cloudformation.pkl"

/// 
open class ClassicLoadBalancer {
    Name: String|Mapping
}

/// 
open class ClassicLoadBalancersConfig {
    ClassicLoadBalancers: Listing<ClassicLoadBalancer>
}

/// 
open class InstanceNetworkInterfaceSpecification {
    AssociatePublicIpAddress: (Boolean|Mapping)?
    DeleteOnTermination: (Boolean|Mapping)?
    Ipv6AddressCount: (Int|Mapping)?
    SubnetId: (String|Mapping)?
    Description: (String|Mapping)?
    DeviceIndex: (Int|Mapping)?
    Groups: (Listing<String|Mapping>)?
    Ipv6Addresses: (Listing<InstanceIpv6Address>)?
    NetworkInterfaceId: (String|Mapping)?
    PrivateIpAddresses: (Listing<PrivateIpAddressSpecification>)?
    SecondaryPrivateIpAddressCount: (Int|Mapping)?
}

/// 
open class PrivateIpAddressSpecification {
    Primary: (Boolean|Mapping)?
    PrivateIpAddress: String|Mapping
}

/// 
open class MemoryMiBRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class NetworkBandwidthGbpsRequest {
    Min: (Number|Mapping)?
    Max: (Number|Mapping)?
}

/// 
open class NetworkInterfaceCountRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class GroupIdentifier {
    GroupId: String|Mapping
}

typealias SpotPlacementTenancy = "dedicated"|"default"|"host"

/// 
open class SpotPlacement {
    AvailabilityZone: (String|Mapping)?
    GroupName: (String|Mapping)?
    Tenancy: (SpotPlacementTenancy|Mapping)?
}

typealias EbsBlockDeviceVolumeType = "gp2"|"gp3"|"io1"|"io2"|"sc1"|"st1"|"standard"

/// 
open class EbsBlockDevice {
    VolumeType: (EbsBlockDeviceVolumeType|Mapping)?
    DeleteOnTermination: (Boolean|Mapping)?
    Encrypted: (Boolean|Mapping)?
    Iops: (Int|Mapping)?
    SnapshotId: (String|Mapping)?
    VolumeSize: (Int|Mapping)?
}

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class TotalLocalStorageGBRequest {
    Min: (Number|Mapping)?
    Max: (Number|Mapping)?
}

/// 
open class BaselineEbsBandwidthMbpsRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class IamInstanceProfileSpecification {
    Arn: (String|Mapping)?
}

/// 
open class SpotFleetMonitoring {
    Enabled: (Boolean|Mapping)?
}

/// 
open class FleetLaunchTemplateSpecification {
    LaunchTemplateId: (String|Mapping)?
    LaunchTemplateName: (String(matches(Regex(#"[a-zA-Z0-9\(\)\.\-/_]+"#)))|Mapping)?
    Version: String|Mapping
}

/// 
open class MemoryGiBPerVCpuRequest {
    Min: (Number|Mapping)?
    Max: (Number|Mapping)?
}

/// 
open class AcceleratorCountRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class LaunchTemplateConfig {
    Overrides: (Listing<LaunchTemplateOverrides>)?
    LaunchTemplateSpecification: (FleetLaunchTemplateSpecification)?
}

typealias SpotFleetTagSpecificationResourceType = "client-vpn-endpoint"|"customer-gateway"|"dedicated-host"|"dhcp-options"|"egress-only-internet-gateway"|"elastic-gpu"|"elastic-ip"|"export-image-task"|"export-instance-task"|"fleet"|"fpga-image"|"host-reservation"|"image"|"import-image-task"|"import-snapshot-task"|"instance"|"internet-gateway"|"key-pair"|"launch-template"|"local-gateway-route-table-vpc-association"|"natgateway"|"network-acl"|"network-insights-analysis"|"network-insights-path"|"network-interface"|"placement-group"|"reserved-instances"|"route-table"|"security-group"|"snapshot"|"spot-fleet-request"|"spot-instances-request"|"subnet"|"traffic-mirror-filter"|"traffic-mirror-session"|"traffic-mirror-target"|"transit-gateway"|"transit-gateway-attachment"|"transit-gateway-connect-peer"|"transit-gateway-multicast-domain"|"transit-gateway-route-table"|"volume"|"vpc"|"vpc-flow-log"|"vpc-peering-connection"|"vpn-connection"|"vpn-gateway"

/// 
open class SpotFleetTagSpecification {
    Tags: (Listing<Tag>)?
    ResourceType: (SpotFleetTagSpecificationResourceType|Mapping)?
}

/// 
open class SpotMaintenanceStrategies {
    CapacityRebalance: (SpotCapacityRebalance)?
}

/// 
open class BlockDeviceMapping {
    Ebs: (EbsBlockDevice)?
    NoDevice: (String|Mapping)?
    VirtualName: (String|Mapping)?
    DeviceName: String|Mapping
}

typealias SpotFleetRequestConfigDataTargetCapacityUnitType = "vcpu"|"memory-mib"|"units"

typealias SpotFleetRequestConfigDataAllocationStrategy = "capacityOptimized"|"capacityOptimizedPrioritized"|"diversified"|"lowestPrice"|"priceCapacityOptimized"

typealias SpotFleetRequestConfigDataType = "maintain"|"request"

typealias SpotFleetRequestConfigDataInstanceInterruptionBehavior = "hibernate"|"stop"|"terminate"

typealias SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = "Default"|"NoTermination"|"default"|"noTermination"

/// 
open class SpotFleetRequestConfigData {
    ValidFrom: (String|Mapping)?
    TargetCapacityUnitType: (SpotFleetRequestConfigDataTargetCapacityUnitType|Mapping)?
    AllocationStrategy: (SpotFleetRequestConfigDataAllocationStrategy|Mapping)?
    InstancePoolsToUseCount: (Int|Mapping)?
    LoadBalancersConfig: (LoadBalancersConfig)?
    OnDemandTargetCapacity: (Int|Mapping)?
    SpotMaxTotalPrice: (String|Mapping)?
    Type: (SpotFleetRequestConfigDataType|Mapping)?
    InstanceInterruptionBehavior: (SpotFleetRequestConfigDataInstanceInterruptionBehavior|Mapping)?
    OnDemandMaxTotalPrice: (String|Mapping)?
    ReplaceUnhealthyInstances: (Boolean|Mapping)?
    SpotMaintenanceStrategies: (SpotMaintenanceStrategies)?
    SpotPrice: (String|Mapping)?
    OnDemandAllocationStrategy: (String|Mapping)?
    TargetCapacity: Int|Mapping
    TerminateInstancesWithExpiration: (Boolean|Mapping)?
    Context: (String|Mapping)?
    ExcessCapacityTerminationPolicy: (SpotFleetRequestConfigDataExcessCapacityTerminationPolicy|Mapping)?
    IamFleetRole: String|Mapping
    LaunchSpecifications: (Listing<SpotFleetLaunchSpecification>)?
    LaunchTemplateConfigs: (Listing<LaunchTemplateConfig>)?
    ValidUntil: (String|Mapping)?
    TagSpecifications: (Listing<SpotFleetTagSpecification>)?
}

/// 
open class SpotFleetLaunchSpecification {
    TagSpecifications: (Listing<SpotFleetTagSpecification>)?
    KernelId: (String|Mapping)?
    SecurityGroups: (Listing<GroupIdentifier>)?
    Monitoring: (SpotFleetMonitoring)?
    NetworkInterfaces: (Listing<InstanceNetworkInterfaceSpecification>)?
    RamdiskId: (String|Mapping)?
    EbsOptimized: (Boolean|Mapping)?
    InstanceType: (String|Mapping)?
    KeyName: (String|Mapping)?
    Placement: (SpotPlacement)?
    SpotPrice: (String|Mapping)?
    SubnetId: (String|Mapping)?
    UserData: (String|Mapping)?
    BlockDeviceMappings: (Listing<BlockDeviceMapping>)?
    IamInstanceProfile: (IamInstanceProfileSpecification)?
    InstanceRequirements: (InstanceRequirementsRequest)?
    ImageId: String|Mapping
    WeightedCapacity: (Number|Mapping)?
}

/// 
open class TargetGroupsConfig {
    TargetGroups: Listing<TargetGroup>
}

/// 
open class AcceleratorTotalMemoryMiBRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class LaunchTemplateOverrides {
    InstanceRequirements: (InstanceRequirementsRequest)?
    Priority: (Number|Mapping)?
    AvailabilityZone: (String|Mapping)?
    InstanceType: (String|Mapping)?
    SpotPrice: (String|Mapping)?
    SubnetId: (String|Mapping)?
    WeightedCapacity: (Number|Mapping)?
}

/// 
open class InstanceIpv6Address {
    Ipv6Address: String|Mapping
}

/// 
open class LoadBalancersConfig {
    ClassicLoadBalancersConfig: (ClassicLoadBalancersConfig)?
    TargetGroupsConfig: (TargetGroupsConfig)?
}

typealias SpotCapacityRebalanceReplacementStrategy = "launch"|"launch-before-terminate"

/// 
open class SpotCapacityRebalance {
    ReplacementStrategy: (SpotCapacityRebalanceReplacementStrategy|Mapping)?
    TerminationDelay: (Int|Mapping)?
}

/// 
open class VCpuCountRangeRequest {
    Min: (Int|Mapping)?
    Max: (Int|Mapping)?
}

/// 
open class TargetGroup {
    Arn: String|Mapping
}

typealias InstanceRequirementsRequestCpuManufacturers = "intel"|"amd"|"amazon-web-services"

typealias InstanceRequirementsRequestLocalStorage = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestInstanceGenerations = "current"|"previous"

typealias InstanceRequirementsRequestBareMetal = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestBurstablePerformance = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestAcceleratorNames = "a10g"|"a100"|"h100"|"inferentia"|"k520"|"k80"|"m60"|"radeon-pro-v520"|"t4"|"t4g"|"vu9p"|"v100"

typealias InstanceRequirementsRequestLocalStorageTypes = "hdd"|"ssd"

typealias InstanceRequirementsRequestAcceleratorTypes = "gpu"|"fpga"|"inference"

typealias InstanceRequirementsRequestAcceleratorManufacturers = "amazon-web-services"|"amd"|"habana"|"nvidia"|"xilinx"

/// 
open class InstanceRequirementsRequest {
    CpuManufacturers: (Listing<InstanceRequirementsRequestCpuManufacturers|Mapping>)?
    AllowedInstanceTypes: (Listing<String|Mapping>)?
    MaxSpotPriceAsPercentageOfOptimalOnDemandPrice: (Int|Mapping)?
    LocalStorage: (InstanceRequirementsRequestLocalStorage|Mapping)?
    BaselineEbsBandwidthMbps: (BaselineEbsBandwidthMbpsRequest)?
    AcceleratorCount: (AcceleratorCountRequest)?
    InstanceGenerations: (Listing<InstanceRequirementsRequestInstanceGenerations|Mapping>)?
    BareMetal: (InstanceRequirementsRequestBareMetal|Mapping)?
    BurstablePerformance: (InstanceRequirementsRequestBurstablePerformance|Mapping)?
    NetworkBandwidthGbps: (NetworkBandwidthGbpsRequest)?
    AcceleratorNames: (Listing<InstanceRequirementsRequestAcceleratorNames|Mapping>)?
    AcceleratorTotalMemoryMiB: (AcceleratorTotalMemoryMiBRequest)?
    LocalStorageTypes: (Listing<InstanceRequirementsRequestLocalStorageTypes|Mapping>)?
    VCpuCount: (VCpuCountRangeRequest)?
    MemoryMiB: (MemoryMiBRequest)?
    MemoryGiBPerVCpu: (MemoryGiBPerVCpuRequest)?
    ExcludedInstanceTypes: (Listing<String|Mapping>)?
    SpotMaxPricePercentageOverLowestPrice: (Int|Mapping)?
    RequireHibernateSupport: (Boolean|Mapping)?
    NetworkInterfaceCount: (NetworkInterfaceCountRequest)?
    TotalLocalStorageGB: (TotalLocalStorageGBRequest)?
    AcceleratorTypes: (Listing<InstanceRequirementsRequestAcceleratorTypes|Mapping>)?
    AcceleratorManufacturers: (Listing<InstanceRequirementsRequestAcceleratorManufacturers|Mapping>)?
    OnDemandMaxPricePercentageOverLowestPrice: (Int|Mapping)?
}

/// Resource Type definition for AWS::EC2::SpotFleet
open class SpotFleet extends cloudformation.Resource {

    Type = "AWS::EC2::SpotFleet"


    /// 
    hidden SpotFleetRequestConfigData: SpotFleetRequestConfigData

    Properties {
        ["SpotFleetRequestConfigData"] = if (SpotFleetRequestConfigData == null) null else SpotFleetRequestConfigData
    }

}
