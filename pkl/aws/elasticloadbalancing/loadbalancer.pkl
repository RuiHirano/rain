/// AWS::ElasticLoadBalancing::LoadBalancer
///
/// Generated by rain build --pkl-class AWS::ElasticLoadBalancing::LoadBalancer
module aws.elasticloadbalancing.loadbalancer

import "../../cloudformation.pkl"

/// 
open class LoadBalancerLBCookieStickinessPolicy {
    PolicyName: (String|Mapping)?
    CookieExpirationPeriod: (String|Mapping)?
}

/// 
open class LoadBalancerTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class LoadBalancerConnectionDrainingPolicy {
    Enabled: Boolean|Mapping
    Timeout: (Int|Mapping)?
}

/// 
open class LoadBalancerAppCookieStickinessPolicy {
    PolicyName: String|Mapping
    CookieName: String|Mapping
}

/// 
open class LoadBalancerConnectionSettings {
    IdleTimeout: Int|Mapping
}

/// 
open class LoadBalancerListeners {
    PolicyNames: (Listing<String|Mapping>)?
    InstancePort: String|Mapping
    LoadBalancerPort: String|Mapping
    Protocol: String|Mapping
    SSLCertificateId: (String|Mapping)?
    InstanceProtocol: (String|Mapping)?
}

/// 
open class LoadBalancerHealthCheck {
    Target: String|Mapping
    UnhealthyThreshold: String|Mapping
    Timeout: String|Mapping
    HealthyThreshold: String|Mapping
    Interval: String|Mapping
}

/// 
open class LoadBalancerAccessLoggingPolicy {
    S3BucketPrefix: (String|Mapping)?
    Enabled: Boolean|Mapping
    S3BucketName: String|Mapping
    EmitInterval: (Int|Mapping)?
}

/// 
open class LoadBalancerPolicies {
    Attributes: Listing<Dynamic>
    PolicyType: String|Mapping
    LoadBalancerPorts: (Listing<String|Mapping>)?
    PolicyName: String|Mapping
    InstancePorts: (Listing<String|Mapping>)?
}

/// Resource Type definition for AWS::ElasticLoadBalancing::LoadBalancer
open class LoadBalancer extends cloudformation.Resource {

    Type = "AWS::ElasticLoadBalancing::LoadBalancer"


    /// 
    hidden SecurityGroups: (Listing<String|Mapping>)?

    /// 
    hidden AccessLoggingPolicy: (LoadBalancerAccessLoggingPolicy)?

    /// 
    hidden Instances: (Listing<String|Mapping>)?

    /// 
    hidden Listeners: Listing<LoadBalancerListeners>

    /// 
    hidden Subnets: (Listing<String|Mapping>)?

    /// 
    hidden CrossZone: (Boolean|Mapping)?

    /// 
    hidden AppCookieStickinessPolicy: (Listing<LoadBalancerAppCookieStickinessPolicy>)?

    /// 
    hidden LBCookieStickinessPolicy: (Listing<LoadBalancerLBCookieStickinessPolicy>)?

    /// 
    hidden Scheme: (String|Mapping)?

    /// 
    hidden SourceSecurityGroupOwnerAlias: (String|Mapping)?

    /// 
    hidden SourceSecurityGroupGroupName: (String|Mapping)?

    /// 
    hidden ConnectionSettings: (LoadBalancerConnectionSettings)?

    /// 
    hidden ConnectionDrainingPolicy: (LoadBalancerConnectionDrainingPolicy)?

    /// 
    hidden Policies: (Listing<LoadBalancerPolicies>)?

    /// 
    hidden AvailabilityZones: (Listing<String|Mapping>)?

    /// 
    hidden HealthCheck: (LoadBalancerHealthCheck)?

    /// 
    hidden LoadBalancerName: (String|Mapping)?

    /// 
    hidden Tags: (Listing<LoadBalancerTag>)?

    Properties {
        ["SecurityGroups"] = if (SecurityGroups == null) null else SecurityGroups
        ["AccessLoggingPolicy"] = if (AccessLoggingPolicy == null) null else AccessLoggingPolicy
        ["Instances"] = if (Instances == null) null else Instances
        ["Listeners"] = if (Listeners == null) null else Listeners
        ["Subnets"] = if (Subnets == null) null else Subnets
        ["CrossZone"] = if (CrossZone == null) null else CrossZone
        ["AppCookieStickinessPolicy"] = if (AppCookieStickinessPolicy == null) null else AppCookieStickinessPolicy
        ["LBCookieStickinessPolicy"] = if (LBCookieStickinessPolicy == null) null else LBCookieStickinessPolicy
        ["Scheme"] = if (Scheme == null) null else Scheme
        ["SourceSecurityGroupOwnerAlias"] = if (SourceSecurityGroupOwnerAlias == null) null else SourceSecurityGroupOwnerAlias
        ["SourceSecurityGroupGroupName"] = if (SourceSecurityGroupGroupName == null) null else SourceSecurityGroupGroupName
        ["ConnectionSettings"] = if (ConnectionSettings == null) null else ConnectionSettings
        ["ConnectionDrainingPolicy"] = if (ConnectionDrainingPolicy == null) null else ConnectionDrainingPolicy
        ["Policies"] = if (Policies == null) null else Policies
        ["AvailabilityZones"] = if (AvailabilityZones == null) null else AvailabilityZones
        ["HealthCheck"] = if (HealthCheck == null) null else HealthCheck
        ["LoadBalancerName"] = if (LoadBalancerName == null) null else LoadBalancerName
        ["Tags"] = if (Tags == null) null else Tags
    }

}
