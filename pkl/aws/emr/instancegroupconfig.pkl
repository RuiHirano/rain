/// AWS::EMR::InstanceGroupConfig
///
/// Generated by rain build --pkl-class AWS::EMR::InstanceGroupConfig
module aws.emr.instancegroupconfig

import "../../cloudformation.pkl"

/// 
open class InstanceGroupConfigScalingAction {
    Market: (String|Mapping)?
    SimpleScalingPolicyConfiguration: InstanceGroupConfigSimpleScalingPolicyConfiguration
}

/// 
open class InstanceGroupConfigEbsBlockDeviceConfig {
    VolumeSpecification: InstanceGroupConfigVolumeSpecification
    VolumesPerInstance: (Int|Mapping)?
}

typealias InstanceGroupConfigConfigurationConfigurationProperties = Mapping<String, Any>

/// 
open class InstanceGroupConfigConfiguration {
    ConfigurationProperties: (InstanceGroupConfigConfigurationConfigurationProperties)?
    Configurations: (Listing<InstanceGroupConfigConfiguration>)?
    Classification: (String|Mapping)?
}

/// 
open class InstanceGroupConfigVolumeSpecification {
    VolumeType: String|Mapping
    Iops: (Int|Mapping)?
    SizeInGB: Int|Mapping
    Throughput: (Int|Mapping)?
}

/// 
open class InstanceGroupConfigCloudWatchAlarmDefinition {
    Period: Int|Mapping
    Threshold: Number|Mapping
    MetricName: String|Mapping
    Dimensions: (Listing<InstanceGroupConfigMetricDimension>)?
    EvaluationPeriods: (Int|Mapping)?
    Unit: (String|Mapping)?
    Namespace: (String|Mapping)?
    ComparisonOperator: String|Mapping
    Statistic: (String|Mapping)?
}

/// 
open class InstanceGroupConfigEbsConfiguration {
    EbsBlockDeviceConfigs: (Listing<InstanceGroupConfigEbsBlockDeviceConfig>)?
    EbsOptimized: (Boolean|Mapping)?
}

/// 
open class InstanceGroupConfigSimpleScalingPolicyConfiguration {
    ScalingAdjustment: Int|Mapping
    CoolDown: (Int|Mapping)?
    AdjustmentType: (String|Mapping)?
}

/// 
open class InstanceGroupConfigScalingTrigger {
    CloudWatchAlarmDefinition: InstanceGroupConfigCloudWatchAlarmDefinition
}

/// 
open class InstanceGroupConfigScalingRule {
    Action: InstanceGroupConfigScalingAction
    Description: (String|Mapping)?
    Trigger: InstanceGroupConfigScalingTrigger
    Name: String|Mapping
}

/// 
open class InstanceGroupConfigScalingConstraints {
    MinCapacity: Int|Mapping
    MaxCapacity: Int|Mapping
}

/// 
open class InstanceGroupConfigMetricDimension {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class InstanceGroupConfigAutoScalingPolicy {
    Rules: Listing<InstanceGroupConfigScalingRule>
    Constraints: InstanceGroupConfigScalingConstraints
}

/// Resource Type definition for AWS::EMR::InstanceGroupConfig
open class InstanceGroupConfig extends cloudformation.Resource {

    Type = "AWS::EMR::InstanceGroupConfig"


    /// 
    hidden BidPrice: (String|Mapping)?

    /// 
    hidden EbsConfiguration: (InstanceGroupConfigEbsConfiguration)?

    /// 
    hidden CustomAmiId: (String|Mapping)?

    /// 
    hidden Market: (String|Mapping)?

    /// 
    hidden JobFlowId: String|Mapping

    /// 
    hidden InstanceCount: Int|Mapping

    /// 
    hidden InstanceRole: String|Mapping

    /// 
    hidden Configurations: (Listing<InstanceGroupConfigConfiguration>)?

    /// 
    hidden InstanceType: String|Mapping

    /// 
    hidden Name: (String|Mapping)?

    /// 
    hidden AutoScalingPolicy: (InstanceGroupConfigAutoScalingPolicy)?

    Properties {
        ["BidPrice"] = if (BidPrice == null) null else BidPrice
        ["EbsConfiguration"] = if (EbsConfiguration == null) null else EbsConfiguration
        ["CustomAmiId"] = if (CustomAmiId == null) null else CustomAmiId
        ["Market"] = if (Market == null) null else Market
        ["JobFlowId"] = if (JobFlowId == null) null else JobFlowId
        ["InstanceCount"] = if (InstanceCount == null) null else InstanceCount
        ["InstanceRole"] = if (InstanceRole == null) null else InstanceRole
        ["Configurations"] = if (Configurations == null) null else Configurations
        ["InstanceType"] = if (InstanceType == null) null else InstanceType
        ["Name"] = if (Name == null) null else Name
        ["AutoScalingPolicy"] = if (AutoScalingPolicy == null) null else AutoScalingPolicy
    }

}
