/// AWS::GameLift::GameServerGroup
///
/// Generated by rain build --pkl-class AWS::GameLift::GameServerGroup
module aws.gamelift.gameservergroup

import "../../cloudformation.pkl"

/// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
open class LaunchTemplate {
    LaunchTemplateName: (LaunchTemplateName)?
    Version: (Version)?
    LaunchTemplateId: (LaunchTemplateId)?
}

/// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
open class AutoScalingPolicy {
    EstimatedInstanceWarmup: (EstimatedInstanceWarmup)?
    TargetTrackingConfiguration: TargetTrackingConfiguration
}

/// An allowed instance type for your game server group.
open class InstanceDefinition {
    InstanceType: InstanceType
    WeightedCapacity: (WeightedCapacity)?
}

/// The maximum number of instances allowed in the EC2 Auto Scaling group.
open class MaxSize {
}

/// 
open class Tag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// A flag that indicates whether instances in the game server group are protected from early termination.
open class GameServerProtectionPolicy {
}

/// A generated unique ID for the game server group.
open class GameServerGroupArn {
}

/// A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
open class VpcSubnets {
}

/// The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
open class BalancingStrategy {
}

/// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
open class RoleArn {
}

/// Additional information about the current game server group status.
open class StatusReason {
}

/// An identifier for the new game server group.
open class GameServerGroupName {
}

/// A set of EC2 instance types to use when creating instances in the group.
open class InstanceDefinitions {
}

/// A readable identifier for an existing EC2 launch template.
open class LaunchTemplateName {
}

/// Settings for a target-based scaling policy applied to Auto Scaling group.
open class TargetTrackingConfiguration {
    TargetValue: TargetValue
}

/// A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
open class AutoScalingGroupArn {
}

/// Desired value to use with a game server group target-based scaling policy.
open class TargetValue {
}

/// An EC2 instance type designation.
open class InstanceType {
}

/// A unique identifier for an existing EC2 launch template.
open class LaunchTemplateId {
}

/// The minimum number of instances allowed in the EC2 Auto Scaling group.
open class MinSize {
}

/// A list of labels to assign to the new game server group resource.
open class Tags {
}

/// A timestamp that indicates when this game server group was last updated.
open class LastUpdatedTime {
}

/// The current status of the game server group.
open class Status {
}

/// Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ.
open class EstimatedInstanceWarmup {
}

/// 
open class SuspendedActions {
}

/// Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group.
open class WeightedCapacity {
}

/// The version of the EC2 launch template to use.
open class Version {
}

/// Properties that describe a game server group resource. A game server group manages certain properties of a corresponding EC2 Auto Scaling group.
open class GameServerGroup {
    RoleArn: (RoleArn)?
    BalancingStrategy: (BalancingStrategy)?
    GameServerGroupArn: (GameServerGroupArn)?
    GameServerGroupName: (GameServerGroupName)?
    InstanceDefinitions: (InstanceDefinitions)?
    LastUpdatedTime: (LastUpdatedTime)?
    Status: (Status)?
    StatusReason: (StatusReason)?
    SuspendedActions: (SuspendedActions)?
    AutoScalingGroupArn: (AutoScalingGroupArn)?
    CreationTime: (CreationTime)?
    GameServerProtectionPolicy: (GameServerProtectionPolicy)?
}

/// A timestamp that indicates when this data object was created.
open class CreationTime {
}

/// The type of delete to perform.
open class DeleteOption {
}

/// The AWS::GameLift::GameServerGroup resource creates an Amazon GameLift (GameLift) GameServerGroup.
open class GameServerGroup extends cloudformation.Resource {

    Type = "AWS::GameLift::GameServerGroup"


    /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
    hidden RoleArn: RoleArn

    /// A list of labels to assign to the new game server group resource.
    hidden Tags: (Tags)?

    /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
    hidden VpcSubnets: (VpcSubnets)?

    /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
    hidden AutoScalingPolicy: (AutoScalingPolicy)?

    /// The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
    hidden BalancingStrategy: (BalancingStrategy)?

    /// The minimum number of instances allowed in the EC2 Auto Scaling group.
    hidden MinSize: (MinSize)?

    /// A flag that indicates whether instances in the game server group are protected from early termination.
    hidden GameServerProtectionPolicy: (GameServerProtectionPolicy)?

    /// A set of EC2 instance types to use when creating instances in the group.
    hidden InstanceDefinitions: InstanceDefinitions

    /// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
    hidden LaunchTemplate: (LaunchTemplate)?

    /// The maximum number of instances allowed in the EC2 Auto Scaling group.
    hidden MaxSize: (MaxSize)?

    /// The type of delete to perform.
    hidden DeleteOption: (DeleteOption)?

    /// An identifier for the new game server group.
    hidden GameServerGroupName: GameServerGroupName

    Properties {
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["Tags"] = if (Tags == null) null else Tags
        ["VpcSubnets"] = if (VpcSubnets == null) null else VpcSubnets
        ["AutoScalingPolicy"] = if (AutoScalingPolicy == null) null else AutoScalingPolicy
        ["BalancingStrategy"] = if (BalancingStrategy == null) null else BalancingStrategy
        ["MinSize"] = if (MinSize == null) null else MinSize
        ["GameServerProtectionPolicy"] = if (GameServerProtectionPolicy == null) null else GameServerProtectionPolicy
        ["InstanceDefinitions"] = if (InstanceDefinitions == null) null else InstanceDefinitions
        ["LaunchTemplate"] = if (LaunchTemplate == null) null else LaunchTemplate
        ["MaxSize"] = if (MaxSize == null) null else MaxSize
        ["DeleteOption"] = if (DeleteOption == null) null else DeleteOption
        ["GameServerGroupName"] = if (GameServerGroupName == null) null else GameServerGroupName
    }

}
