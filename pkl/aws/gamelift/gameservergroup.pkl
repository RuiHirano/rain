/// AWS::GameLift::GameServerGroup
///
/// Generated by rain build --pkl-class AWS::GameLift::GameServerGroup
module aws.gamelift.gameservergroup

import "../../cloudformation.pkl"

typealias GameServerGroupLaunchTemplateId = String|Mapping


typealias GameServerGroupMinSize = Number|Mapping


typealias GameServerGroupRoleArn = String|Mapping


/// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
open class GameServerGroupLaunchTemplate {
    LaunchTemplateId: (GameServerGroupLaunchTemplateId)?
    LaunchTemplateName: (GameServerGroupLaunchTemplateName)?
    Version: (GameServerGroupVersion)?
}

/// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
open class GameServerGroupAutoScalingPolicy {
    EstimatedInstanceWarmup: (GameServerGroupEstimatedInstanceWarmup)?
    TargetTrackingConfiguration: GameServerGroupTargetTrackingConfiguration
}

typealias GameServerGroupWeightedCapacity = String|Mapping


typealias GameServerGroupLaunchTemplateName = String|Mapping


typealias GameServerGroupInstanceType = String|Mapping


typealias GameServerGroupStatus = String|Mapping


/// Settings for a target-based scaling policy applied to Auto Scaling group.
open class GameServerGroupTargetTrackingConfiguration {
    TargetValue: GameServerGroupTargetValue
}

typealias GameServerGroupAutoScalingGroupArn = String|Mapping


typealias GameServerGroupEstimatedInstanceWarmup = Number|Mapping


typealias GameServerGroupTags = Listing<(GameServerGroupTag)?>


typealias GameServerGroupVersion = String|Mapping


typealias GameServerGroupGameServerProtectionPolicy = String|Mapping


typealias GameServerGroupMaxSize = Number|Mapping


typealias GameServerGroupTargetValue = Number|Mapping


typealias SuspendedActionsArray = "REPLACE_INSTANCE_TYPES"

typealias GameServerGroupSuspendedActions = Listing<(SuspendedActionsArray|Mapping)?>


typealias GameServerGroupGameServerGroupName = String|Mapping


/// An allowed instance type for your game server group.
open class GameServerGroupInstanceDefinition {
    InstanceType: GameServerGroupInstanceType
    WeightedCapacity: (GameServerGroupWeightedCapacity)?
}

/// Properties that describe a game server group resource. A game server group manages certain properties of a corresponding EC2 Auto Scaling group.
open class GameServerGroupGameServerGroup {
    StatusReason: (GameServerGroupStatusReason)?
    SuspendedActions: (GameServerGroupSuspendedActions)?
    CreationTime: (GameServerGroupCreationTime)?
    GameServerGroupName: (GameServerGroupGameServerGroupName)?
    GameServerProtectionPolicy: (GameServerGroupGameServerProtectionPolicy)?
    LastUpdatedTime: (GameServerGroupLastUpdatedTime)?
    RoleArn: (GameServerGroupRoleArn)?
    AutoScalingGroupArn: (GameServerGroupAutoScalingGroupArn)?
    BalancingStrategy: (GameServerGroupBalancingStrategy)?
    GameServerGroupArn: (GameServerGroupGameServerGroupArn)?
    InstanceDefinitions: (GameServerGroupInstanceDefinitions)?
    Status: (GameServerGroupStatus)?
}

typealias GameServerGroupInstanceDefinitions = Listing<(GameServerGroupInstanceDefinition)?>


/// 
open class GameServerGroupTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

typealias GameServerGroupGameServerGroupArn = String|Mapping


typealias GameServerGroupStatusReason = String|Mapping


typealias GameServerGroupBalancingStrategy = String|Mapping


typealias GameServerGroupCreationTime = String|Mapping


typealias GameServerGroupLastUpdatedTime = String|Mapping


typealias GameServerGroupDeleteOption = String|Mapping


typealias GameServerGroupVpcSubnets = Listing<(String(matches(Regex(#"^subnet-[0-9a-z]+$"#)))|Mapping)?>


/// The AWS::GameLift::GameServerGroup resource creates an Amazon GameLift (GameLift) GameServerGroup.
open class GameServerGroup extends cloudformation.Resource {

    Type = "AWS::GameLift::GameServerGroup"


    /// The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
    hidden BalancingStrategy: (GameServerGroupBalancingStrategy)?

    /// The maximum number of instances allowed in the EC2 Auto Scaling group.
    hidden MaxSize: (GameServerGroupMaxSize)?

    /// The minimum number of instances allowed in the EC2 Auto Scaling group.
    hidden MinSize: (GameServerGroupMinSize)?

    /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
    hidden RoleArn: GameServerGroupRoleArn

    /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
    hidden VpcSubnets: (GameServerGroupVpcSubnets)?

    /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
    hidden AutoScalingPolicy: (GameServerGroupAutoScalingPolicy)?

    /// The type of delete to perform.
    hidden DeleteOption: (GameServerGroupDeleteOption)?

    /// An identifier for the new game server group.
    hidden GameServerGroupName: GameServerGroupGameServerGroupName

    /// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
    hidden LaunchTemplate: (GameServerGroupLaunchTemplate)?

    /// A flag that indicates whether instances in the game server group are protected from early termination.
    hidden GameServerProtectionPolicy: (GameServerGroupGameServerProtectionPolicy)?

    /// A set of EC2 instance types to use when creating instances in the group.
    hidden InstanceDefinitions: GameServerGroupInstanceDefinitions

    /// A list of labels to assign to the new game server group resource.
    hidden Tags: (GameServerGroupTags)?

    Properties {
        ["BalancingStrategy"] = if (BalancingStrategy == null) null else BalancingStrategy
        ["MaxSize"] = if (MaxSize == null) null else MaxSize
        ["MinSize"] = if (MinSize == null) null else MinSize
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["VpcSubnets"] = if (VpcSubnets == null) null else VpcSubnets
        ["AutoScalingPolicy"] = if (AutoScalingPolicy == null) null else AutoScalingPolicy
        ["DeleteOption"] = if (DeleteOption == null) null else DeleteOption
        ["GameServerGroupName"] = if (GameServerGroupName == null) null else GameServerGroupName
        ["LaunchTemplate"] = if (LaunchTemplate == null) null else LaunchTemplate
        ["GameServerProtectionPolicy"] = if (GameServerProtectionPolicy == null) null else GameServerProtectionPolicy
        ["InstanceDefinitions"] = if (InstanceDefinitions == null) null else InstanceDefinitions
        ["Tags"] = if (Tags == null) null else Tags
    }

}
