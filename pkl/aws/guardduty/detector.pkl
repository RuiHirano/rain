/// AWS::GuardDuty::Detector
///
/// Generated by rain build --pkl-class AWS::GuardDuty::Detector
module aws.guardduty.detector

import "../../cloudformation.pkl"

/// 
open class DetectorCFNS3LogsConfiguration {
    Enable: Boolean|Mapping
}

/// 
open class DetectorCFNKubernetesConfiguration {
    AuditLogs: DetectorCFNKubernetesAuditLogsConfiguration
}

/// 
open class DetectorCFNDataSourceConfigurations {
    Kubernetes: (DetectorCFNKubernetesConfiguration)?
    MalwareProtection: (DetectorCFNMalwareProtectionConfiguration)?
    S3Logs: (DetectorCFNS3LogsConfiguration)?
}

/// 
open class DetectorCFNScanEc2InstanceWithFindingsConfiguration {
    EbsVolumes: (Boolean|Mapping)?
}

/// 
open class DetectorCFNFeatureAdditionalConfiguration {
    Name: (String|Mapping)?
    Status: (String|Mapping)?
}

/// 
open class DetectorTagItem {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class DetectorCFNKubernetesAuditLogsConfiguration {
    Enable: Boolean|Mapping
}

/// 
open class DetectorCFNMalwareProtectionConfiguration {
    ScanEc2InstanceWithFindings: (DetectorCFNScanEc2InstanceWithFindingsConfiguration)?
}

typealias CFNFeatureConfigurationStatus = "ENABLED"|"DISABLED"

/// 
open class DetectorCFNFeatureConfiguration {
    Status: CFNFeatureConfigurationStatus|Mapping
    AdditionalConfiguration: (Listing<DetectorCFNFeatureAdditionalConfiguration>)?
    Name: String|Mapping
}

/// Resource Type definition for AWS::GuardDuty::Detector
open class Detector extends cloudformation.Resource {

    Type = "AWS::GuardDuty::Detector"


    /// 
    hidden FindingPublishingFrequency: (String|Mapping)?

    /// 
    hidden Enable: Boolean|Mapping

    /// 
    hidden DataSources: (DetectorCFNDataSourceConfigurations)?

    /// 
    hidden Features: (Listing<DetectorCFNFeatureConfiguration>)?

    /// 
    hidden Tags: (Listing<DetectorTagItem>)?

    Properties {
        ["FindingPublishingFrequency"] = if (FindingPublishingFrequency == null) null else FindingPublishingFrequency
        ["Enable"] = if (Enable == null) null else Enable
        ["DataSources"] = if (DataSources == null) null else DataSources
        ["Features"] = if (Features == null) null else Features
        ["Tags"] = if (Tags == null) null else Tags
    }

}
