/// AWS::ImageBuilder::ContainerRecipe
///
/// Generated by rain build --pkl-class AWS::ImageBuilder::ContainerRecipe
module aws.imagebuilder.containerrecipe

import "../../cloudformation.pkl"

typealias EbsInstanceBlockDeviceSpecificationVolumeType = "standard"|"io1"|"io2"|"gp2"|"gp3"|"sc1"|"st1"

/// Amazon EBS-specific block device mapping specifications. 
open class EbsInstanceBlockDeviceSpecification {
    Throughput: (Int|Mapping)?
    VolumeSize: (Int|Mapping)?
    VolumeType: (EbsInstanceBlockDeviceSpecificationVolumeType|Mapping)?
    Encrypted: (Boolean|Mapping)?
    DeleteOnTermination: (Boolean|Mapping)?
    Iops: (Int|Mapping)?
    KmsKeyId: (String|Mapping)?
    SnapshotId: (String|Mapping)?
}

typealias TargetContainerRepositoryService = "ECR"

/// The container repository where the output container image is stored.
open class TargetContainerRepository {
    Service: (TargetContainerRepositoryService|Mapping)?
    RepositoryName: (String|Mapping)?
}

/// Contains a key/value pair that sets the named component parameter.
open class ComponentParameter {
    Name: String|Mapping
    Value: Listing<String|Mapping>
}

/// Configuration details of the component.
open class ComponentConfiguration {
    ComponentArn: (String|Mapping)?
    Parameters: (Listing<ComponentParameter>)?
}

/// A group of options that can be used to configure an instance for building and testing container images.
open class InstanceConfiguration {
    Image: (String|Mapping)?
    BlockDeviceMappings: (Listing<InstanceBlockDeviceMapping>)?
}

/// Defines block device mappings for the instance used to configure your image. 
open class InstanceBlockDeviceMapping {
    VirtualName: (String|Mapping)?
    NoDevice: (String|Mapping)?
    Ebs: (EbsInstanceBlockDeviceSpecification)?
    DeviceName: (String|Mapping)?
}

/// Resource schema for AWS::ImageBuilder::ContainerRecipe
open class ContainerRecipe extends cloudformation.Resource {

    Type = "AWS::ImageBuilder::ContainerRecipe"


    /// The semantic version of the container recipe (<major>.<minor>.<patch>).
    hidden Version: (String|Mapping)?

    /// Components for build and test that are included in the container recipe.
    hidden Components: (Listing<ComponentConfiguration>)?

    /// A group of options that can be used to configure an instance for building and testing container images.
    hidden InstanceConfiguration: (InstanceConfiguration)?

    /// The S3 URI for the Dockerfile that will be used to build your container image.
    hidden DockerfileTemplateUri: (String|Mapping)?

    /// Specifies the operating system version for the source image.
    hidden ImageOsVersionOverride: (String|Mapping)?

    /// The name of the container recipe.
    hidden Name: (String|Mapping)?

    /// The description of the container recipe.
    hidden Description: (String|Mapping)?

    /// Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
    hidden DockerfileTemplateData: (String|Mapping)?

    /// The destination repository for the container image.
    hidden TargetRepository: (TargetContainerRepository)?

    /// Specifies the operating system platform when you use a custom source image.
    hidden PlatformOverride: (ContainerRecipePlatformOverride|Mapping)?

    /// Specifies the type of container, such as Docker.
    hidden ContainerType: (ContainerRecipeContainerType|Mapping)?

    /// Identifies which KMS key is used to encrypt the container image.
    hidden KmsKeyId: (String|Mapping)?

    /// The source image for the container recipe.
    hidden ParentImage: (String|Mapping)?

    /// Tags that are attached to the container recipe.
    hidden Tags: (Dynamic)?

    /// The working directory to be used during build and test workflows.
    hidden WorkingDirectory: (String|Mapping)?

    Properties {
        ["Version"] = if (Version == null) null else Version
        ["Components"] = if (Components == null) null else Components
        ["InstanceConfiguration"] = if (InstanceConfiguration == null) null else InstanceConfiguration
        ["DockerfileTemplateUri"] = if (DockerfileTemplateUri == null) null else DockerfileTemplateUri
        ["ImageOsVersionOverride"] = if (ImageOsVersionOverride == null) null else ImageOsVersionOverride
        ["Name"] = if (Name == null) null else Name
        ["Description"] = if (Description == null) null else Description
        ["DockerfileTemplateData"] = if (DockerfileTemplateData == null) null else DockerfileTemplateData
        ["TargetRepository"] = if (TargetRepository == null) null else TargetRepository
        ["PlatformOverride"] = if (PlatformOverride == null) null else PlatformOverride
        ["ContainerType"] = if (ContainerType == null) null else ContainerType
        ["KmsKeyId"] = if (KmsKeyId == null) null else KmsKeyId
        ["ParentImage"] = if (ParentImage == null) null else ParentImage
        ["Tags"] = if (Tags == null) null else Tags
        ["WorkingDirectory"] = if (WorkingDirectory == null) null else WorkingDirectory
    }

}


typealias ContainerRecipePlatformOverride = "Windows"|"Linux"

typealias ContainerRecipeContainerType = "DOCKER"
