/// AWS::IoT::TopicRule
///
/// Generated by rain build --pkl-class AWS::IoT::TopicRule
module aws.iot.topicrule

import "../../cloudformation.pkl"

/// 
open class HttpActionHeader {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class PutAssetPropertyValueEntry {
    AssetId: (String|Mapping)?
    EntryId: (String|Mapping)?
    PropertyId: (String|Mapping)?
    PropertyAlias: (String|Mapping)?
    PropertyValues: Listing<AssetPropertyValue>
}

/// 
open class SqsAction {
    RoleArn: String|Mapping
    UseBase64: (Boolean|Mapping)?
    QueueUrl: String|Mapping
}

/// 
open class DynamoDBv2Action {
    PutItem: (PutItemInput)?
    RoleArn: (String|Mapping)?
}

/// 
open class SigV4Authorization {
    ServiceName: String|Mapping
    SigningRegion: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class RoleArn {
}

/// 
open class TopicRulePayload {
    ErrorAction: (Action)?
    Description: (String|Mapping)?
    AwsIotSqlVersion: (String|Mapping)?
    Actions: Listing<Action>
    Sql: String|Mapping
    RuleDisabled: (Boolean|Mapping)?
}

/// 
open class KinesisAction {
    RoleArn: String|Mapping
    PartitionKey: (String|Mapping)?
    StreamName: String|Mapping
}

/// 
open class LambdaAction {
    FunctionArn: (String|Mapping)?
}

/// 
open class LocationAction {
    Longitude: String|Mapping
    Timestamp: (Timestamp)?
    RoleArn: String|Mapping
    TrackerName: String|Mapping
    DeviceId: String|Mapping
    Latitude: String|Mapping
}

/// 
open class S3Action {
    BucketName: String|Mapping
    Key: String|Mapping
    RoleArn: String|Mapping
    CannedAcl: (CannedAccessControlList)?
}

/// 
open class AssetPropertyVariant {
    StringValue: (String|Mapping)?
    DoubleValue: (String|Mapping)?
    BooleanValue: (String|Mapping)?
    IntegerValue: (String|Mapping)?
}

/// 
open class IotAnalyticsAction {
    RoleArn: String|Mapping
    ChannelName: String|Mapping
    BatchMode: (Boolean|Mapping)?
}

/// 
open class AssetPropertyValue {
    Value: AssetPropertyVariant
    Timestamp: AssetPropertyTimestamp
    Quality: (String|Mapping)?
}

/// 
open class OpenSearchAction {
    Type: String|Mapping
    Index: String|Mapping
    Id: String|Mapping
    Endpoint: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class SnsAction {
    TargetArn: String|Mapping
    MessageFormat: (String|Mapping)?
    RoleArn: String|Mapping
}

/// 
open class TimestreamTimestamp {
    Value: String|Mapping
    Unit: String|Mapping
}

/// 
open class CloudwatchAlarmAction {
    StateValue: String|Mapping
    AlarmName: String|Mapping
    StateReason: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class CloudwatchLogsAction {
    LogGroupName: String|Mapping
    RoleArn: String|Mapping
    BatchMode: (Boolean|Mapping)?
}

/// 
open class CloudwatchMetricAction {
    MetricTimestamp: (String|Mapping)?
    MetricName: String|Mapping
    MetricValue: String|Mapping
    MetricNamespace: String|Mapping
    MetricUnit: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class HttpAuthorization {
    Sigv4: (SigV4Authorization)?
}

/// 
open class IotEventsAction {
    InputName: String|Mapping
    RoleArn: String|Mapping
    MessageId: (String|Mapping)?
    BatchMode: (Boolean|Mapping)?
}

/// 
open class KafkaAction {
    ClientProperties: Dynamic
    Headers: (Listing<KafkaActionHeader>)?
    DestinationArn: String|Mapping
    Topic: String|Mapping
    Key: (String|Mapping)?
    Partition: (String|Mapping)?
}

/// 
open class UserProperty {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class TimestreamAction {
    TableName: String|Mapping
    Dimensions: TimestreamDimensionsList
    Timestamp: (TimestreamTimestamp)?
    RoleArn: String|Mapping
    DatabaseName: String|Mapping
}

/// 
open class Action {
    IotSiteWise: (IotSiteWiseAction)?
    Kafka: (KafkaAction)?
    Lambda: (LambdaAction)?
    Sqs: (SqsAction)?
    StepFunctions: (StepFunctionsAction)?
    CloudwatchLogs: (CloudwatchLogsAction)?
    IotAnalytics: (IotAnalyticsAction)?
    Republish: (RepublishAction)?
    Timestream: (TimestreamAction)?
    CloudwatchAlarm: (CloudwatchAlarmAction)?
    IotEvents: (IotEventsAction)?
    Kinesis: (KinesisAction)?
    OpenSearch: (OpenSearchAction)?
    CloudwatchMetric: (CloudwatchMetricAction)?
    Firehose: (FirehoseAction)?
    Elasticsearch: (ElasticsearchAction)?
    Http: (HttpAction)?
    Location: (LocationAction)?
    S3: (S3Action)?
    Sns: (SnsAction)?
    DynamoDB: (DynamoDBAction)?
    DynamoDBv2: (DynamoDBv2Action)?
}

/// 
open class Tag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class Timestamp {
    Value: String|Mapping
    Unit: (String|Mapping)?
}

/// 
open class RepublishActionHeaders {
    UserProperties: (UserProperties)?
    PayloadFormatIndicator: (String|Mapping)?
    ContentType: (String|Mapping)?
    ResponseTopic: (String|Mapping)?
    CorrelationData: (String|Mapping)?
    MessageExpiry: (String|Mapping)?
}

/// 
open class StepFunctionsAction {
    ExecutionNamePrefix: (String|Mapping)?
    StateMachineName: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class PutItemInput {
    TableName: String|Mapping
}

/// 
open class ElasticsearchAction {
    Endpoint: String|Mapping
    RoleArn: String|Mapping
    Type: String|Mapping
    Index: String|Mapping
    Id: String|Mapping
}

/// 
open class FirehoseAction {
    BatchMode: (Boolean|Mapping)?
    DeliveryStreamName: String|Mapping
    RoleArn: String|Mapping
    Separator: (String|Mapping)?
}

/// 
open class RepublishAction {
    Headers: (RepublishActionHeaders)?
    Qos: (Int|Mapping)?
    Topic: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class UserProperties {
}

/// 
open class DynamoDBAction {
    TableName: String|Mapping
    PayloadField: (String|Mapping)?
    RangeKeyValue: (String|Mapping)?
    RoleArn: String|Mapping
    RangeKeyField: (String|Mapping)?
    HashKeyField: String|Mapping
    RangeKeyType: (String|Mapping)?
    HashKeyType: (String|Mapping)?
    HashKeyValue: String|Mapping
}

/// 
open class IotSiteWiseAction {
    RoleArn: String|Mapping
    PutAssetPropertyValueEntries: Listing<PutAssetPropertyValueEntry>
}

/// 
open class AssetPropertyTimestamp {
    TimeInSeconds: String|Mapping
    OffsetInNanos: (String|Mapping)?
}

/// 
open class KafkaActionHeader {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class CannedAccessControlList {
}

/// 
open class TimestreamDimensionsList {
}

/// 
open class TimestreamDimension {
    Name: String|Mapping
    Value: String|Mapping
}

/// 
open class HttpAction {
    ConfirmationUrl: (String|Mapping)?
    Headers: (Listing<HttpActionHeader>)?
    Url: String|Mapping
    Auth: (HttpAuthorization)?
}

/// Resource Type definition for AWS::IoT::TopicRule
open class TopicRule extends cloudformation.Resource {

    Type = "AWS::IoT::TopicRule"


    /// 
    hidden RuleName: (String|Mapping)?

    /// 
    hidden TopicRulePayload: TopicRulePayload

    /// 
    hidden Tags: (Listing<Tag>)?

    Properties {
        ["RuleName"] = if (RuleName == null) null else RuleName
        ["TopicRulePayload"] = if (TopicRulePayload == null) null else TopicRulePayload
        ["Tags"] = if (Tags == null) null else Tags
    }

}
