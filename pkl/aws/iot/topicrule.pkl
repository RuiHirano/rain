/// AWS::IoT::TopicRule
///
/// Generated by rain build --pkl-class AWS::IoT::TopicRule
module aws.iot.topicrule

import "../../cloudformation.pkl"

/// 
open class TopicRulePutAssetPropertyValueEntry {
    PropertyAlias: (String|Mapping)?
    PropertyValues: Listing<TopicRuleAssetPropertyValue>
    AssetId: (String|Mapping)?
    EntryId: (String|Mapping)?
    PropertyId: (String|Mapping)?
}

/// 
open class TopicRuleAssetPropertyVariant {
    StringValue: (String|Mapping)?
    DoubleValue: (String|Mapping)?
    BooleanValue: (String|Mapping)?
    IntegerValue: (String|Mapping)?
}

/// 
open class TopicRuleCloudwatchMetricAction {
    MetricName: String|Mapping
    MetricValue: String|Mapping
    MetricNamespace: String|Mapping
    MetricUnit: String|Mapping
    RoleArn: String|Mapping
    MetricTimestamp: (String|Mapping)?
}

/// 
open class TopicRulePutItemInput {
    TableName: String|Mapping
}

/// 
open class TopicRuleHttpActionHeader {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class TopicRuleHttpAuthorization {
    Sigv4: (TopicRuleSigV4Authorization)?
}

/// 
open class TopicRuleDynamoDBAction {
    TableName: String|Mapping
    PayloadField: (String|Mapping)?
    HashKeyField: String|Mapping
    RangeKeyValue: (String|Mapping)?
    HashKeyValue: String|Mapping
    RangeKeyField: (String|Mapping)?
    RangeKeyType: (String|Mapping)?
    HashKeyType: (String|Mapping)?
    RoleArn: String|Mapping
}

/// 
open class TopicRuleCloudwatchAlarmAction {
    RoleArn: String|Mapping
    StateValue: String|Mapping
    AlarmName: String|Mapping
    StateReason: String|Mapping
}

/// 
open class TopicRuleTopicRulePayload {
    ErrorAction: (TopicRuleAction)?
    Description: (String|Mapping)?
    AwsIotSqlVersion: (String|Mapping)?
    Actions: Listing<TopicRuleAction>
    Sql: String|Mapping
    RuleDisabled: (Boolean|Mapping)?
}

/// 
open class TopicRuleAssetPropertyValue {
    Value: TopicRuleAssetPropertyVariant
    Timestamp: TopicRuleAssetPropertyTimestamp
    Quality: (String|Mapping)?
}

/// 
open class TopicRuleOpenSearchAction {
    Index: String|Mapping
    Id: String|Mapping
    Endpoint: String|Mapping
    RoleArn: String|Mapping
    Type: String|Mapping
}

/// 
open class TopicRuleTimestreamAction {
    TableName: String|Mapping
    Dimensions: TopicRuleTimestreamDimensionsList
    Timestamp: (TopicRuleTimestreamTimestamp)?
    RoleArn: String|Mapping
    DatabaseName: String|Mapping
}

/// 
open class TopicRuleUserProperty {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class TopicRuleKafkaAction {
    Headers: (Listing<TopicRuleKafkaActionHeader>)?
    DestinationArn: String|Mapping
    Topic: String|Mapping
    Key: (String|Mapping)?
    Partition: (String|Mapping)?
    ClientProperties: Dynamic
}

/// 
open class TopicRuleDynamoDBv2Action {
    RoleArn: (String|Mapping)?
    PutItem: (TopicRulePutItemInput)?
}

/// 
open class TopicRuleRepublishActionHeaders {
    ContentType: (String|Mapping)?
    ResponseTopic: (String|Mapping)?
    CorrelationData: (String|Mapping)?
    MessageExpiry: (String|Mapping)?
    UserProperties: (TopicRuleUserProperties)?
    PayloadFormatIndicator: (String|Mapping)?
}

/// 
open class TopicRuleStepFunctionsAction {
    ExecutionNamePrefix: (String|Mapping)?
    StateMachineName: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class TopicRuleAction {
    DynamoDB: (TopicRuleDynamoDBAction)?
    IotSiteWise: (TopicRuleIotSiteWiseAction)?
    Location: (TopicRuleLocationAction)?
    S3: (TopicRuleS3Action)?
    CloudwatchLogs: (TopicRuleCloudwatchLogsAction)?
    Kinesis: (TopicRuleKinesisAction)?
    OpenSearch: (TopicRuleOpenSearchAction)?
    Sqs: (TopicRuleSqsAction)?
    StepFunctions: (TopicRuleStepFunctionsAction)?
    CloudwatchAlarm: (TopicRuleCloudwatchAlarmAction)?
    CloudwatchMetric: (TopicRuleCloudwatchMetricAction)?
    DynamoDBv2: (TopicRuleDynamoDBv2Action)?
    Http: (TopicRuleHttpAction)?
    IotAnalytics: (TopicRuleIotAnalyticsAction)?
    IotEvents: (TopicRuleIotEventsAction)?
    Republish: (TopicRuleRepublishAction)?
    Timestream: (TopicRuleTimestreamAction)?
    Elasticsearch: (TopicRuleElasticsearchAction)?
    Firehose: (TopicRuleFirehoseAction)?
    Kafka: (TopicRuleKafkaAction)?
    Lambda: (TopicRuleLambdaAction)?
    Sns: (TopicRuleSnsAction)?
}

/// 
open class TopicRuleTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class TopicRuleIotEventsAction {
    InputName: String|Mapping
    RoleArn: String|Mapping
    MessageId: (String|Mapping)?
    BatchMode: (Boolean|Mapping)?
}

typealias TopicRuleUserProperties = Listing<(TopicRuleUserProperty)?>


/// 
open class TopicRuleFirehoseAction {
    DeliveryStreamName: String|Mapping
    RoleArn: String|Mapping
    Separator: (String|Mapping)?
    BatchMode: (Boolean|Mapping)?
}

/// 
open class TopicRuleLambdaAction {
    FunctionArn: (String|Mapping)?
}

/// 
open class TopicRuleLocationAction {
    Latitude: String|Mapping
    Longitude: String|Mapping
    Timestamp: (TopicRuleTimestamp)?
    RoleArn: String|Mapping
    TrackerName: String|Mapping
    DeviceId: String|Mapping
}

/// 
open class TopicRuleCloudwatchLogsAction {
    LogGroupName: String|Mapping
    RoleArn: String|Mapping
    BatchMode: (Boolean|Mapping)?
}

/// 
open class TopicRuleKinesisAction {
    PartitionKey: (String|Mapping)?
    StreamName: String|Mapping
    RoleArn: String|Mapping
}

typealias TopicRuleRoleArn = String


/// 
open class TopicRuleKafkaActionHeader {
    Value: String|Mapping
    Key: String|Mapping
}

typealias TopicRuleTimestreamDimensionsList = Listing<(TopicRuleTimestreamDimension)?>


/// 
open class TopicRuleIotSiteWiseAction {
    RoleArn: String|Mapping
    PutAssetPropertyValueEntries: Listing<TopicRulePutAssetPropertyValueEntry>
}

/// 
open class TopicRuleHttpAction {
    Headers: (Listing<TopicRuleHttpActionHeader>)?
    Url: String|Mapping
    Auth: (TopicRuleHttpAuthorization)?
    ConfirmationUrl: (String|Mapping)?
}

/// 
open class TopicRuleRepublishAction {
    Qos: (Int|Mapping)?
    Topic: String|Mapping
    RoleArn: String|Mapping
    Headers: (TopicRuleRepublishActionHeaders)?
}

/// 
open class TopicRuleTimestreamDimension {
    Name: String|Mapping
    Value: String|Mapping
}

/// 
open class TopicRuleSnsAction {
    TargetArn: String|Mapping
    MessageFormat: (String|Mapping)?
    RoleArn: String|Mapping
}

/// 
open class TopicRuleAssetPropertyTimestamp {
    TimeInSeconds: String|Mapping
    OffsetInNanos: (String|Mapping)?
}

/// 
open class TopicRuleSigV4Authorization {
    ServiceName: String|Mapping
    SigningRegion: String|Mapping
    RoleArn: String|Mapping
}

/// 
open class TopicRuleS3Action {
    BucketName: String|Mapping
    Key: String|Mapping
    RoleArn: String|Mapping
    CannedAcl: (TopicRuleCannedAccessControlList)?
}

typealias TopicRuleCannedAccessControlList = "private"|"public-read"|"public-read-write"|"aws-exec-read"|"authenticated-read"|"bucket-owner-read"|"bucket-owner-full-control"|"log-delivery-write"


/// 
open class TopicRuleTimestamp {
    Value: String|Mapping
    Unit: (String|Mapping)?
}

/// 
open class TopicRuleSqsAction {
    RoleArn: String|Mapping
    UseBase64: (Boolean|Mapping)?
    QueueUrl: String|Mapping
}

/// 
open class TopicRuleElasticsearchAction {
    Endpoint: String|Mapping
    RoleArn: String|Mapping
    Type: String|Mapping
    Index: String|Mapping
    Id: String|Mapping
}

/// 
open class TopicRuleTimestreamTimestamp {
    Value: String|Mapping
    Unit: String|Mapping
}

/// 
open class TopicRuleIotAnalyticsAction {
    RoleArn: String|Mapping
    ChannelName: String|Mapping
    BatchMode: (Boolean|Mapping)?
}

/// Resource Type definition for AWS::IoT::TopicRule
open class TopicRule extends cloudformation.Resource {

    Type = "AWS::IoT::TopicRule"


    /// 
    hidden TopicRulePayload: TopicRuleTopicRulePayload

    /// 
    hidden Tags: (Listing<TopicRuleTag>)?

    /// 
    hidden RuleName: (String|Mapping)?

    Properties {
        ["TopicRulePayload"] = if (TopicRulePayload == null) null else TopicRulePayload
        ["Tags"] = if (Tags == null) null else Tags
        ["RuleName"] = if (RuleName == null) null else RuleName
    }

}
