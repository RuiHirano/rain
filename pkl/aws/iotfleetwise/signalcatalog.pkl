/// AWS::IoTFleetWise::SignalCatalog
///
/// Generated by rain build --pkl-class AWS::IoTFleetWise::SignalCatalog
module aws.iotfleetwise.signalcatalog

import "../../cloudformation.pkl"

/// 
open class Attribute {
    DataType: NodeDataType
    Description: (String(matches(Regex(#"^[^\u0000-\u001F\u007F]+$"#)))|Mapping)?
    Min: (Number|Mapping)?
    AssignedValue: (String|Mapping)?
    DefaultValue: (String|Mapping)?
    FullyQualifiedName: String|Mapping
    Unit: (String|Mapping)?
    AllowedValues: (AllowedValues)?
    Max: (Number|Mapping)?
}

/// 
open class NodeCounts {
    TotalActuators: (Number|Mapping)?
    TotalNodes: (Number|Mapping)?
    TotalBranches: (Number|Mapping)?
    TotalSensors: (Number|Mapping)?
    TotalAttributes: (Number|Mapping)?
}

/// 
open class Sensor {
    Min: (Number|Mapping)?
    Max: (Number|Mapping)?
    FullyQualifiedName: String|Mapping
    DataType: NodeDataType
    Description: (String(matches(Regex(#"^[^\u0000-\u001F\u007F]+$"#)))|Mapping)?
    Unit: (String|Mapping)?
    AllowedValues: (AllowedValues)?
}

/// 
open class Actuator {
    DataType: NodeDataType
    Description: (String(matches(Regex(#"^[^\u0000-\u001F\u007F]+$"#)))|Mapping)?
    Unit: (String|Mapping)?
    AllowedValues: (AllowedValues)?
    Min: (Number|Mapping)?
    Max: (Number|Mapping)?
    AssignedValue: (String|Mapping)?
    FullyQualifiedName: String|Mapping
}

/// 
open class AllowedValues {
}

/// 
open class Branch {
    FullyQualifiedName: String|Mapping
    Description: (String(matches(Regex(#"^[^\u0000-\u001F\u007F]+$"#)))|Mapping)?
}

/// 
open class Node {
}

/// 
open class NodeDataType {
}

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Definition of AWS::IoTFleetWise::SignalCatalog Resource Type
open class SignalCatalog extends cloudformation.Resource {

    Type = "AWS::IoTFleetWise::SignalCatalog"


    /// 
    hidden NodeCounts: (NodeCounts)?

    /// 
    hidden Nodes: (Listing<Node>)?

    /// 
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden Description: (String(matches(Regex(#"^[^\u0000-\u001F\u007F]+$"#)))|Mapping)?

    /// 
    hidden Name: (String(matches(Regex(#"^[a-zA-Z\d\-_:]+$"#)))|Mapping)?

    Properties {
        ["NodeCounts"] = if (NodeCounts == null) null else NodeCounts
        ["Nodes"] = if (Nodes == null) null else Nodes
        ["Tags"] = if (Tags == null) null else Tags
        ["Description"] = if (Description == null) null else Description
        ["Name"] = if (Name == null) null else Name
    }

}
