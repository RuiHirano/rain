/// AWS::IoTSiteWise::AssetModel
///
/// Generated by rain build --pkl-class AWS::IoTSiteWise::AssetModel
module aws.iotsitewise.assetmodel

import "../../cloudformation.pkl"

/// 
open class VariableValue {
    PropertyLogicalId: (String(matches(Regex(#"[^\u0000-\u001F\u007F]+"#)))|Mapping)?
    PropertyId: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
    PropertyExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
    PropertyPath: (Listing<PropertyPathDefinition>)?
    HierarchyLogicalId: (String(matches(Regex(#"[^\u0000-\u001F\u007F]+"#)))|Mapping)?
    HierarchyId: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
    HierarchyExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
}

/// Contains information about an asset model hierarchy.
open class AssetModelHierarchy {
    LogicalId: (String(matches(Regex(#"[^\u0000-\u001F\u007F]+"#)))|Mapping)?
    Name: String|Mapping
    ChildAssetModelId: String|Mapping
    Id: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
    ExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
}

/// 
open class TypeName {
}

/// Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.
open class TumblingWindow {
    Interval: Interval
    Offset: (Offset)?
}

/// The shift or reference point on timeline for the contiguous time intervals.
open class Offset {
}

/// 
open class DataType {
}

/// 
open class DataTypeSpec {
}

/// The time interval for the tumbling window.
open class Interval {
}

/// 
open class ExpressionVariable {
    Name: String|Mapping
    Value: VariableValue
}

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class Metric {
    Expression: String|Mapping
    Variables: Listing<ExpressionVariable>
    Window: MetricWindow
}

/// Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).
open class MetricWindow {
    Tumbling: (TumblingWindow)?
}

/// Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.
open class AssetModelCompositeModel {
    Id: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
    Description: (String|Mapping)?
    Name: String|Mapping
    ExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
    ComposedAssetModelId: (String|Mapping)?
    ParentAssetModelCompositeModelExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
    Path: (Listing<String|Mapping>)?
    Type: String|Mapping
    CompositeModelProperties: (Listing<AssetModelProperty>)?
}

/// The definition for property path which is used to reference properties in transforms/metrics
open class PropertyPathDefinition {
    Name: String|Mapping
}

/// Contains information about an asset model property.
open class AssetModelProperty {
    LogicalId: (String(matches(Regex(#"[^\u0000-\u001F\u007F]+"#)))|Mapping)?
    Id: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
    ExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?
    Name: String|Mapping
    DataType: DataType
    DataTypeSpec: (DataTypeSpec)?
    Unit: (String|Mapping)?
    Type: PropertyType
}

/// Contains a property type, which can be one of attribute, measurement, metric, or transform.
open class PropertyType {
    TypeName: TypeName
    Attribute: (Attribute)?
    Transform: (Transform)?
    Metric: (Metric)?
}

/// 
open class Attribute {
    DefaultValue: (String|Mapping)?
}

/// 
open class Transform {
    Expression: String|Mapping
    Variables: Listing<ExpressionVariable>
}

/// Resource schema for AWS::IoTSiteWise::AssetModel
open class AssetModel extends cloudformation.Resource {

    Type = "AWS::IoTSiteWise::AssetModel"


    /// The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
    hidden AssetModelCompositeModels: (Listing<AssetModelCompositeModel>)?

    /// The type of the asset model (ASSET_MODEL OR COMPONENT_MODEL)
    hidden AssetModelType: (String|Mapping)?

    /// A description for the asset model.
    hidden AssetModelDescription: (String|Mapping)?

    /// A list of key-value pairs that contain metadata for the asset model.
    hidden Tags: (Listing<Tag>)?

    /// The external ID of the asset model.
    hidden AssetModelExternalId: (String(matches(Regex(#"[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+"#)))|Mapping)?

    /// A unique, friendly name for the asset model.
    hidden AssetModelName: String|Mapping

    /// The property definitions of the asset model. You can specify up to 200 properties per asset model.
    hidden AssetModelProperties: (Listing<AssetModelProperty>)?

    /// The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
    hidden AssetModelHierarchies: (Listing<AssetModelHierarchy>)?

    Properties {
        ["AssetModelCompositeModels"] = if (AssetModelCompositeModels == null) null else AssetModelCompositeModels
        ["AssetModelType"] = if (AssetModelType == null) null else AssetModelType
        ["AssetModelDescription"] = if (AssetModelDescription == null) null else AssetModelDescription
        ["Tags"] = if (Tags == null) null else Tags
        ["AssetModelExternalId"] = if (AssetModelExternalId == null) null else AssetModelExternalId
        ["AssetModelName"] = if (AssetModelName == null) null else AssetModelName
        ["AssetModelProperties"] = if (AssetModelProperties == null) null else AssetModelProperties
        ["AssetModelHierarchies"] = if (AssetModelHierarchies == null) null else AssetModelHierarchies
    }

}
