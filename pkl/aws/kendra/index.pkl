/// AWS::Kendra::Index
///
/// Generated by rain build --pkl-class AWS::Kendra::Index
module aws.kendra.index

import "../../cloudformation.pkl"

/// 
open class GroupAttributeField {
}

/// List of tags
open class TagList {
}

/// 
open class DocumentMetadataConfigurationName {
}

/// 
open class UserNameAttributeField {
}

/// 
open class KeyLocation {
}

/// 
open class Issuer {
}

/// 
open class Url {
}

/// 
open class ValueImportanceItems {
}

/// 
open class ValueImportanceItemKey {
}

/// 
open class QueryCapacityUnits {
}

/// Name of index
open class Name {
}

/// 
open class Arn {
}

/// 
open class KmsKeyId {
}

/// 
open class Duration {
}

/// 
open class ValueImportanceItem {
    Key: (ValueImportanceItemKey)?
    Value: (Importance)?
}

/// A label for tagging Kendra resources
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class Order {
}

/// 
open class DocumentAttributeValueType {
}

/// 
open class StorageCapacityUnits {
}

/// Unique ID of index
open class Id {
}

/// 
open class ClaimRegex {
}

/// 
open class Description {
}

/// 
open class DocumentMetadataConfigurationList {
}

/// 
open class CapacityUnitsConfiguration {
    StorageCapacityUnits: StorageCapacityUnits
    QueryCapacityUnits: QueryCapacityUnits
}

/// Role Arn
open class RoleArn {
}

/// 
open class UserContextPolicy {
}

/// 
open class UserTokenConfiguration {
    JwtTokenTypeConfiguration: (JwtTokenTypeConfiguration)?
    JsonTokenTypeConfiguration: (JsonTokenTypeConfiguration)?
}

/// 
open class Relevance {
    Freshness: (Freshness)?
    Importance: (Importance)?
    Duration: (Duration)?
    RankOrder: (Order)?
    ValueImportanceItems: (ValueImportanceItems)?
}

/// 
open class DocumentMetadataConfiguration {
    Search: (Search)?
    Name: DocumentMetadataConfigurationName
    Type: DocumentAttributeValueType
    Relevance: (Relevance)?
}

/// Edition of index
open class Edition {
}

/// 
open class JsonTokenTypeConfiguration {
    UserNameAttributeField: UserNameAttributeField
    GroupAttributeField: GroupAttributeField
}

/// 
open class Importance {
}

/// 
open class Freshness {
}

/// 
open class Search {
    Facetable: (Boolean|Mapping)?
    Searchable: (Boolean|Mapping)?
    Displayable: (Boolean|Mapping)?
    Sortable: (Boolean|Mapping)?
}

/// 
open class JwtTokenTypeConfiguration {
    KeyLocation: KeyLocation
    URL: (Url)?
    SecretManagerArn: (RoleArn)?
    UserNameAttributeField: (UserNameAttributeField)?
    GroupAttributeField: (GroupAttributeField)?
    Issuer: (Issuer)?
    ClaimRegex: (ClaimRegex)?
}

/// 
open class UserTokenConfigurationList {
}

/// 
open class ServerSideEncryptionConfiguration {
    KmsKeyId: (KmsKeyId)?
}

/// A Kendra index
open class Index extends cloudformation.Resource {

    Type = "AWS::Kendra::Index"


    /// Server side encryption configuration
    hidden ServerSideEncryptionConfiguration: (ServerSideEncryptionConfiguration)?

    /// Tags for labeling the index
    hidden Tags: (TagList)?

    /// 
    hidden Name: Name

    /// 
    hidden Edition: Edition

    /// Document metadata configurations
    hidden DocumentMetadataConfigurations: (DocumentMetadataConfigurationList)?

    /// Capacity units
    hidden CapacityUnits: (CapacityUnitsConfiguration)?

    /// 
    hidden UserContextPolicy: (UserContextPolicy)?

    /// 
    hidden RoleArn: RoleArn

    /// 
    hidden UserTokenConfigurations: (UserTokenConfigurationList)?

    /// A description for the index
    hidden Description: (Description)?

    Properties {
        ["ServerSideEncryptionConfiguration"] = if (ServerSideEncryptionConfiguration == null) null else ServerSideEncryptionConfiguration
        ["Tags"] = if (Tags == null) null else Tags
        ["Name"] = if (Name == null) null else Name
        ["Edition"] = if (Edition == null) null else Edition
        ["DocumentMetadataConfigurations"] = if (DocumentMetadataConfigurations == null) null else DocumentMetadataConfigurations
        ["CapacityUnits"] = if (CapacityUnits == null) null else CapacityUnits
        ["UserContextPolicy"] = if (UserContextPolicy == null) null else UserContextPolicy
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["UserTokenConfigurations"] = if (UserTokenConfigurations == null) null else UserTokenConfigurations
        ["Description"] = if (Description == null) null else Description
    }

}
