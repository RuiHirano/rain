/// AWS::LookoutMetrics::AnomalyDetector
///
/// Generated by rain build --pkl-class AWS::LookoutMetrics::AnomalyDetector
module aws.lookoutmetrics.anomalydetector

import "../../cloudformation.pkl"

/// 
open class RDSSourceConfig {
    DatabaseHost: DatabaseHost
    DatabasePort: DatabasePort
    SecretManagerArn: SecretManagerArn
    DatabaseName: String(matches(Regex(#"[a-zA-Z0-9_]+"#)))|Mapping
    TableName: TableName
    RoleArn: Arn
    VpcConfiguration: VpcConfiguration
    DBInstanceIdentifier: String(matches(Regex(#"^[a-zA-Z](?!.*--)(?!.*-$)[0-9a-zA-Z\-]*$"#)))|Mapping
}

typealias MetricSetMetricSetFrequency = "PT5M"|"PT10M"|"PT1H"|"P1D"

/// 
open class MetricSet {
    MetricSetFrequency: (MetricSetMetricSetFrequency|Mapping)?
    Timezone: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
    MetricSetName: String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9\-_]*"#)))|Mapping
    MetricSetDescription: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
    MetricSource: MetricSource
    MetricList: Listing<Metric>
    Offset: (Int|Mapping)?
    TimestampColumn: (TimestampColumn)?
    DimensionList: (Listing<ColumnName>)?
}

/// 
open class AppFlowConfig {
    RoleArn: Arn
    FlowName: String(matches(Regex(#"[a-zA-Z0-9][\w!@#.-]+"#)))|Mapping
}

/// 
open class CloudwatchConfig {
    RoleArn: Arn
}

/// 
open class DatabaseHost {
}

/// 
open class SecurityGroupIdList {
}

/// 
open class VpcConfiguration {
    SecurityGroupIdList: SecurityGroupIdList
    SubnetIdList: SubnetIdList
}

/// 
open class MetricSource {
    RedshiftSourceConfig: (RedshiftSourceConfig)?
    CloudwatchConfig: (CloudwatchConfig)?
    AppFlowConfig: (AppFlowConfig)?
    S3SourceConfig: (S3SourceConfig)?
    RDSSourceConfig: (RDSSourceConfig)?
}

/// Frequency of anomaly detection
open class AnomalyDetectorFrequency {
}

/// 
open class AnomalyDetectorConfig {
    AnomalyDetectorFrequency: AnomalyDetectorFrequency
}

/// 
open class Arn {
}

typealias JsonFormatDescriptorFileCompression = "NONE"|"GZIP"

/// 
open class JsonFormatDescriptor {
    FileCompression: (JsonFormatDescriptorFileCompression|Mapping)?
    Charset: (Charset)?
}

/// 
open class DatabasePort {
}

/// 
open class SubnetIdList {
}

/// 
open class SecretManagerArn {
}

/// Name of a column in the data.
open class ColumnName {
}

/// 
open class FileFormatDescriptor {
    CsvFormatDescriptor: (CsvFormatDescriptor)?
    JsonFormatDescriptor: (JsonFormatDescriptor)?
}

/// 
open class S3SourceConfig {
    FileFormatDescriptor: FileFormatDescriptor
    RoleArn: Arn
    TemplatedPathList: (Listing<String|Mapping>)?
    HistoricalDataPathList: (Listing<String|Mapping>)?
}

/// 
open class TableName {
}

/// 
open class RedshiftSourceConfig {
    DatabasePort: DatabasePort
    SecretManagerArn: SecretManagerArn
    DatabaseName: String(matches(Regex(#"[a-z0-9]+"#)))|Mapping
    TableName: TableName
    RoleArn: Arn
    VpcConfiguration: VpcConfiguration
    ClusterIdentifier: String(matches(Regex(#"^[a-z](?!.*--)(?!.*-$)[0-9a-z\-]*$"#)))|Mapping
    DatabaseHost: DatabaseHost
}

/// 
open class TimestampColumn {
    ColumnName: (ColumnName)?
    ColumnFormat: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
}

typealias MetricAggregationFunction = "AVG"|"SUM"

/// 
open class Metric {
    MetricName: ColumnName
    AggregationFunction: MetricAggregationFunction|Mapping
    Namespace: (String(matches(Regex(#"[^:].*"#)))|Mapping)?
}

/// 
open class Charset {
}

typealias CsvFormatDescriptorFileCompression = "NONE"|"GZIP"

/// 
open class CsvFormatDescriptor {
    HeaderList: (Listing<ColumnName>)?
    QuoteSymbol: (String(matches(Regex(#"[^\r\n]|^$"#)))|Mapping)?
    ContainsHeader: (Boolean|Mapping)?
    FileCompression: (CsvFormatDescriptorFileCompression|Mapping)?
    Charset: (Charset)?
    Delimiter: (String(matches(Regex(#"[^\r\n]"#)))|Mapping)?
}

/// An Amazon Lookout for Metrics Detector
open class AnomalyDetector extends cloudformation.Resource {

    Type = "AWS::LookoutMetrics::AnomalyDetector"


    /// Name for the Amazon Lookout for Metrics Anomaly Detector
    hidden AnomalyDetectorName: (String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9\-_]*"#)))|Mapping)?

    /// A description for the AnomalyDetector.
    hidden AnomalyDetectorDescription: (String(matches(Regex(#".*\S.*"#)))|Mapping)?

    /// Configuration options for the AnomalyDetector
    hidden AnomalyDetectorConfig: AnomalyDetectorConfig

    /// List of metric sets for anomaly detection
    hidden MetricSetList: Listing<MetricSet>

    /// KMS key used to encrypt the AnomalyDetector data
    hidden KmsKeyArn: (String(matches(Regex(#"arn:aws.*:kms:.*:[0-9]{12}:key/.*"#)))|Mapping)?

    Properties {
        ["AnomalyDetectorName"] = if (AnomalyDetectorName == null) null else AnomalyDetectorName
        ["AnomalyDetectorDescription"] = if (AnomalyDetectorDescription == null) null else AnomalyDetectorDescription
        ["AnomalyDetectorConfig"] = if (AnomalyDetectorConfig == null) null else AnomalyDetectorConfig
        ["MetricSetList"] = if (MetricSetList == null) null else MetricSetList
        ["KmsKeyArn"] = if (KmsKeyArn == null) null else KmsKeyArn
    }

}
