/// AWS::LookoutMetrics::AnomalyDetector
///
/// Generated by rain build --pkl-class AWS::LookoutMetrics::AnomalyDetector
module aws.lookoutmetrics.anomalydetector

import "../../cloudformation.pkl"

typealias MetricAggregationFunction = "AVG"|"SUM"

/// 
open class AnomalyDetectorMetric {
    Namespace: (String(matches(Regex(#"[^:].*"#)))|Mapping)?
    MetricName: AnomalyDetectorColumnName
    AggregationFunction: MetricAggregationFunction|Mapping
}

/// 
open class AnomalyDetectorFileFormatDescriptor {
    JsonFormatDescriptor: (AnomalyDetectorJsonFormatDescriptor)?
    CsvFormatDescriptor: (AnomalyDetectorCsvFormatDescriptor)?
}

/// 
open class AnomalyDetectorVpcConfiguration {
    SecurityGroupIdList: AnomalyDetectorSecurityGroupIdList
    SubnetIdList: AnomalyDetectorSubnetIdList
}

typealias AnomalyDetectorDatabasePort = Int|Mapping


typealias MetricSetMetricSetFrequency = "PT5M"|"PT10M"|"PT1H"|"P1D"

/// 
open class AnomalyDetectorMetricSet {
    MetricSetDescription: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
    MetricSource: AnomalyDetectorMetricSource
    MetricList: Listing<AnomalyDetectorMetric>
    DimensionList: (Listing<AnomalyDetectorColumnName>)?
    MetricSetFrequency: (MetricSetMetricSetFrequency|Mapping)?
    Timezone: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
    MetricSetName: String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9\-_]*"#)))|Mapping
    Offset: (Int|Mapping)?
    TimestampColumn: (AnomalyDetectorTimestampColumn)?
}

typealias AnomalyDetectorSecretManagerArn = String|Mapping


typealias AnomalyDetectorAnomalyDetectorFrequency = String|Mapping


typealias AnomalyDetectorTableName = String|Mapping


typealias AnomalyDetectorSubnetIdList = Listing<(String(matches(Regex(#"[\-0-9a-zA-Z]+"#)))|Mapping)?>


/// 
open class AnomalyDetectorAnomalyDetectorConfig {
    AnomalyDetectorFrequency: AnomalyDetectorAnomalyDetectorFrequency
}

/// 
open class AnomalyDetectorRedshiftSourceConfig {
    DatabasePort: AnomalyDetectorDatabasePort
    SecretManagerArn: AnomalyDetectorSecretManagerArn
    DatabaseName: String(matches(Regex(#"[a-z0-9]+"#)))|Mapping
    TableName: AnomalyDetectorTableName
    RoleArn: AnomalyDetectorArn
    VpcConfiguration: AnomalyDetectorVpcConfiguration
    ClusterIdentifier: String(matches(Regex(#"^[a-z](?!.*--)(?!.*-$)[0-9a-z\-]*$"#)))|Mapping
    DatabaseHost: AnomalyDetectorDatabaseHost
}

/// 
open class AnomalyDetectorMetricSource {
    S3SourceConfig: (AnomalyDetectorS3SourceConfig)?
    RDSSourceConfig: (AnomalyDetectorRDSSourceConfig)?
    RedshiftSourceConfig: (AnomalyDetectorRedshiftSourceConfig)?
    CloudwatchConfig: (AnomalyDetectorCloudwatchConfig)?
    AppFlowConfig: (AnomalyDetectorAppFlowConfig)?
}

/// 
open class AnomalyDetectorCloudwatchConfig {
    RoleArn: AnomalyDetectorArn
}

/// 
open class AnomalyDetectorAppFlowConfig {
    RoleArn: AnomalyDetectorArn
    FlowName: String(matches(Regex(#"[a-zA-Z0-9][\w!@#.-]+"#)))|Mapping
}

typealias AnomalyDetectorColumnName = String|Mapping


/// 
open class AnomalyDetectorS3SourceConfig {
    HistoricalDataPathList: (Listing<String|Mapping>)?
    FileFormatDescriptor: AnomalyDetectorFileFormatDescriptor
    RoleArn: AnomalyDetectorArn
    TemplatedPathList: (Listing<String|Mapping>)?
}

typealias CsvFormatDescriptorFileCompression = "NONE"|"GZIP"

/// 
open class AnomalyDetectorCsvFormatDescriptor {
    FileCompression: (CsvFormatDescriptorFileCompression|Mapping)?
    Charset: (AnomalyDetectorCharset)?
    Delimiter: (String(matches(Regex(#"[^\r\n]"#)))|Mapping)?
    HeaderList: (Listing<AnomalyDetectorColumnName>)?
    QuoteSymbol: (String(matches(Regex(#"[^\r\n]|^$"#)))|Mapping)?
    ContainsHeader: (Boolean|Mapping)?
}

typealias JsonFormatDescriptorFileCompression = "NONE"|"GZIP"

/// 
open class AnomalyDetectorJsonFormatDescriptor {
    FileCompression: (JsonFormatDescriptorFileCompression|Mapping)?
    Charset: (AnomalyDetectorCharset)?
}

typealias AnomalyDetectorArn = String|Mapping


typealias AnomalyDetectorDatabaseHost = String|Mapping


/// 
open class AnomalyDetectorRDSSourceConfig {
    SecretManagerArn: AnomalyDetectorSecretManagerArn
    DatabaseName: String(matches(Regex(#"[a-zA-Z0-9_]+"#)))|Mapping
    TableName: AnomalyDetectorTableName
    RoleArn: AnomalyDetectorArn
    VpcConfiguration: AnomalyDetectorVpcConfiguration
    DBInstanceIdentifier: String(matches(Regex(#"^[a-zA-Z](?!.*--)(?!.*-$)[0-9a-zA-Z\-]*$"#)))|Mapping
    DatabaseHost: AnomalyDetectorDatabaseHost
    DatabasePort: AnomalyDetectorDatabasePort
}

/// 
open class AnomalyDetectorTimestampColumn {
    ColumnName: (AnomalyDetectorColumnName)?
    ColumnFormat: (String(matches(Regex(#".*\S.*"#)))|Mapping)?
}

typealias AnomalyDetectorCharset = String|Mapping


typealias AnomalyDetectorSecurityGroupIdList = Listing<(String(matches(Regex(#"[-0-9a-zA-Z]+"#)))|Mapping)?>


/// An Amazon Lookout for Metrics Detector
open class AnomalyDetector extends cloudformation.Resource {

    Type = "AWS::LookoutMetrics::AnomalyDetector"


    /// Name for the Amazon Lookout for Metrics Anomaly Detector
    hidden AnomalyDetectorName: (String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9\-_]*"#)))|Mapping)?

    /// A description for the AnomalyDetector.
    hidden AnomalyDetectorDescription: (String(matches(Regex(#".*\S.*"#)))|Mapping)?

    /// Configuration options for the AnomalyDetector
    hidden AnomalyDetectorConfig: AnomalyDetectorAnomalyDetectorConfig

    /// List of metric sets for anomaly detection
    hidden MetricSetList: Listing<AnomalyDetectorMetricSet>

    /// KMS key used to encrypt the AnomalyDetector data
    hidden KmsKeyArn: (String(matches(Regex(#"arn:aws.*:kms:.*:[0-9]{12}:key/.*"#)))|Mapping)?

    Properties {
        ["AnomalyDetectorName"] = if (AnomalyDetectorName == null) null else AnomalyDetectorName
        ["AnomalyDetectorDescription"] = if (AnomalyDetectorDescription == null) null else AnomalyDetectorDescription
        ["AnomalyDetectorConfig"] = if (AnomalyDetectorConfig == null) null else AnomalyDetectorConfig
        ["MetricSetList"] = if (MetricSetList == null) null else MetricSetList
        ["KmsKeyArn"] = if (KmsKeyArn == null) null else KmsKeyArn
    }

}
