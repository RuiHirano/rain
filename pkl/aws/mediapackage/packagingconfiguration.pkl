/// AWS::MediaPackage::PackagingConfiguration
///
/// Generated by rain build --pkl-class AWS::MediaPackage::PackagingConfiguration
module aws.mediapackage.packagingconfiguration

import "../../cloudformation.pkl"

/// A CMAF encryption configuration.
open class MssEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}

typealias EncryptionContractConfigurationPresetSpeke20Audio = "PRESET-AUDIO-1"|"PRESET-AUDIO-2"|"PRESET-AUDIO-3"|"SHARED"|"UNENCRYPTED"

typealias EncryptionContractConfigurationPresetSpeke20Video = "PRESET-VIDEO-1"|"PRESET-VIDEO-2"|"PRESET-VIDEO-3"|"PRESET-VIDEO-4"|"PRESET-VIDEO-5"|"PRESET-VIDEO-6"|"PRESET-VIDEO-7"|"PRESET-VIDEO-8"|"SHARED"|"UNENCRYPTED"

/// The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
open class EncryptionContractConfiguration {
    PresetSpeke20Audio: EncryptionContractConfigurationPresetSpeke20Audio|Mapping
    PresetSpeke20Video: EncryptionContractConfigurationPresetSpeke20Video|Mapping
}

typealias DashManifestScteMarkersSource = "SEGMENTS"|"MANIFEST"

typealias DashManifestManifestLayout = "FULL"|"COMPACT"

typealias DashManifestProfile = "NONE"|"HBBTV_1_5"

/// A DASH manifest configuration.
open class DashManifest {
    ScteMarkersSource: (DashManifestScteMarkersSource|Mapping)?
    StreamSelection: (StreamSelection)?
    ManifestLayout: (DashManifestManifestLayout|Mapping)?
    ManifestName: (ManifestName)?
    MinBufferTimeSeconds: (Int|Mapping)?
    Profile: (DashManifestProfile|Mapping)?
}

/// A CMAF encryption configuration.
open class CmafEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}

/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
open class DashEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}

/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
open class SpekeKeyProvider {
    Url: String|Mapping
    EncryptionContractConfiguration: (EncryptionContractConfiguration)?
    RoleArn: RoleArn
    SystemIds: Listing<String|Mapping>
}

/// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
open class SegmentDurationSeconds {
}

/// An optional string to include in the name of the manifest.
open class ManifestName {
}

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// A Microsoft Smooth Streaming (MSS) manifest configuration.
open class MssManifest {
    StreamSelection: (StreamSelection)?
    ManifestName: (ManifestName)?
}

typealias DashPackagePeriodTriggers = "ADS"

typealias DashPackageSegmentTemplateFormat = "NUMBER_WITH_TIMELINE"|"TIME_WITH_TIMELINE"|"NUMBER_WITH_DURATION"

/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
open class DashPackage {
    Encryption: (DashEncryption)?
    PeriodTriggers: (Listing<DashPackagePeriodTriggers|Mapping>)?
    SegmentDurationSeconds: (SegmentDurationSeconds)?
    SegmentTemplateFormat: (DashPackageSegmentTemplateFormat|Mapping)?
    IncludeEncoderConfigurationInSegments: (Boolean|Mapping)?
    IncludeIframeOnlyStream: (Boolean|Mapping)?
    DashManifests: Listing<DashManifest>
}

/// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
open class MssPackage {
    Encryption: (MssEncryption)?
    MssManifests: Listing<MssManifest>
    SegmentDurationSeconds: (SegmentDurationSeconds)?
}

typealias HlsEncryptionEncryptionMethod = "AES_128"|"SAMPLE_AES"

/// An HTTP Live Streaming (HLS) encryption configuration.
open class HlsEncryption {
    ConstantInitializationVector: (String|Mapping)?
    EncryptionMethod: (HlsEncryptionEncryptionMethod|Mapping)?
    SpekeKeyProvider: SpekeKeyProvider
}

/// An HTTP Live Streaming (HLS) packaging configuration.
open class HlsPackage {
    Encryption: (HlsEncryption)?
    HlsManifests: Listing<HlsManifest>
    IncludeDvbSubtitles: (Boolean|Mapping)?
    SegmentDurationSeconds: (SegmentDurationSeconds)?
    UseAudioRenditionGroup: (Boolean|Mapping)?
}

/// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
open class RoleArn {
}

typealias StreamSelectionStreamOrder = "ORIGINAL"|"VIDEO_BITRATE_ASCENDING"|"VIDEO_BITRATE_DESCENDING"

/// A StreamSelection configuration.
open class StreamSelection {
    MinVideoBitsPerSecond: (Int|Mapping)?
    StreamOrder: (StreamSelectionStreamOrder|Mapping)?
    MaxVideoBitsPerSecond: (Int|Mapping)?
}

typealias HlsManifestAdMarkers = "NONE"|"SCTE35_ENHANCED"|"PASSTHROUGH"

/// An HTTP Live Streaming (HLS) manifest configuration.
open class HlsManifest {
    IncludeIframeOnlyStream: (Boolean|Mapping)?
    ManifestName: (ManifestName)?
    ProgramDateTimeIntervalSeconds: (Int|Mapping)?
    RepeatExtXKey: (Boolean|Mapping)?
    StreamSelection: (StreamSelection)?
    AdMarkers: (HlsManifestAdMarkers|Mapping)?
}

/// A CMAF packaging configuration.
open class CmafPackage {
    HlsManifests: Listing<HlsManifest>
    SegmentDurationSeconds: (SegmentDurationSeconds)?
    IncludeEncoderConfigurationInSegments: (Boolean|Mapping)?
    Encryption: (CmafEncryption)?
}

/// Resource schema for AWS::MediaPackage::PackagingConfiguration
open class PackagingConfiguration extends cloudformation.Resource {

    Type = "AWS::MediaPackage::PackagingConfiguration"


    /// A CMAF packaging configuration.
    hidden CmafPackage: (CmafPackage)?

    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    hidden DashPackage: (DashPackage)?

    /// An HTTP Live Streaming (HLS) packaging configuration.
    hidden HlsPackage: (HlsPackage)?

    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    hidden MssPackage: (MssPackage)?

    /// A collection of tags associated with a resource
    hidden Tags: (Listing<Tag>)?

    /// The ID of the PackagingConfiguration.
    hidden Id: String|Mapping

    /// The ID of a PackagingGroup.
    hidden PackagingGroupId: String|Mapping

    Properties {
        ["CmafPackage"] = if (CmafPackage == null) null else CmafPackage
        ["DashPackage"] = if (DashPackage == null) null else DashPackage
        ["HlsPackage"] = if (HlsPackage == null) null else HlsPackage
        ["MssPackage"] = if (MssPackage == null) null else MssPackage
        ["Tags"] = if (Tags == null) null else Tags
        ["Id"] = if (Id == null) null else Id
        ["PackagingGroupId"] = if (PackagingGroupId == null) null else PackagingGroupId
    }

}
