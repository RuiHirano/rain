/// AWS::MediaStore::Container
///
/// Generated by rain build --pkl-class AWS::MediaStore::Container
module aws.mediastore.container

import "../../cloudformation.pkl"

/// 
open class ContainerCorsRule {
    MaxAgeSeconds: (Int|Mapping)?
    AllowedHeaders: (Listing<String|Mapping>)?
    AllowedMethods: (Listing<String|Mapping>)?
    AllowedOrigins: (Listing<String|Mapping>)?
    ExposeHeaders: (Listing<String|Mapping>)?
}

/// 
open class ContainerMetricPolicy {
    ContainerLevelMetrics: String|Mapping
    MetricPolicyRules: (Listing<ContainerMetricPolicyRule>)?
}

/// 
open class ContainerTag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class ContainerMetricPolicyRule {
    ObjectGroupName: String|Mapping
    ObjectGroup: String|Mapping
}

/// Resource Type definition for AWS::MediaStore::Container
open class Container extends cloudformation.Resource {

    Type = "AWS::MediaStore::Container"


    /// 
    hidden Policy: (String|Mapping)?

    /// 
    hidden MetricPolicy: (ContainerMetricPolicy)?

    /// 
    hidden LifecyclePolicy: (String|Mapping)?

    /// 
    hidden ContainerName: String|Mapping

    /// 
    hidden CorsPolicy: (Listing<ContainerCorsRule>)?

    /// 
    hidden AccessLoggingEnabled: (Boolean|Mapping)?

    /// 
    hidden Tags: (Listing<ContainerTag>)?

    Properties {
        ["Policy"] = if (Policy == null) null else Policy
        ["MetricPolicy"] = if (MetricPolicy == null) null else MetricPolicy
        ["LifecyclePolicy"] = if (LifecyclePolicy == null) null else LifecyclePolicy
        ["ContainerName"] = if (ContainerName == null) null else ContainerName
        ["CorsPolicy"] = if (CorsPolicy == null) null else CorsPolicy
        ["AccessLoggingEnabled"] = if (AccessLoggingEnabled == null) null else AccessLoggingEnabled
        ["Tags"] = if (Tags == null) null else Tags
    }

}
