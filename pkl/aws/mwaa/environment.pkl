/// AWS::MWAA::Environment
///
/// Generated by rain build --pkl-class AWS::MWAA::Environment
module aws.mwaa.environment

import "../../cloudformation.pkl"

/// IAM role to be used by tasks.
open class ExecutionRoleArn {
}

/// 
open class ConfigValue {
}

/// Minimum worker compute units.
open class MinWorkers {
}

/// Configures the network resources of the environment.
open class NetworkConfiguration {
    SubnetIds: (Listing<SubnetId>)?
    SecurityGroupIds: (Listing<SecurityGroupId>)?
}

/// Configures logging for the environment.
open class LoggingConfigurationInput {
    DagProcessingLogs: (ModuleLoggingConfigurationInput)?
    SchedulerLogs: (ModuleLoggingConfigurationInput)?
    WebserverLogs: (ModuleLoggingConfigurationInput)?
    WorkerLogs: (ModuleLoggingConfigurationInput)?
    TaskLogs: (ModuleLoggingConfigurationInput)?
}

/// Error message describing a failed operation.
open class ErrorMessage {
}

/// Defines whether the VPC endpoints configured for the environment are created, and managed, by the customer or by Amazon MWAA.
open class EndpointManagement {
}

/// The database VPC endpoint service name.
open class DatabaseVpcEndpointService {
}

/// The error associated with an update request.
open class UpdateError {
    ErrorMessage: (ErrorMessage)?
    ErrorCode: (ErrorCode)?
}

/// ARN for the MWAA environment.
open class EnvironmentArn {
}

/// When the environment resource was created.
open class CreatedAt {
}

/// IAM role to be used by MWAA to perform AWS API calls on behalf of the customer.
open class ServiceRoleArn {
}

/// Represents an version ID for an S3 object.
open class S3ObjectVersion {
}

/// Start time for the weekly maintenance window.
open class WeeklyMaintenanceWindowStart {
}

/// The status of the environment.
open class EnvironmentStatus {
}

/// 
open class AirflowArn {
}

/// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for MWAA data encryption.
////// 
///     You can specify the CMK using any of the following:
/// 
///     Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.
/// 
///     Key alias. For example, alias/ExampleAlias.
/// 
///     Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
/// 
///     Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
/// 
///     AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
open class KmsKey {
}

/// 
open class CloudWatchLogGroupArn {
}

/// 
open class LoggingEnabled {
}

/// Scheduler compute units.
open class Schedulers {
}

/// Configures airflow component logging for the environment.
open class ModuleLoggingConfigurationInput {
    Enabled: (LoggingEnabled)?
    LogLevel: (LoggingLevel)?
}

/// Details about the last update performed on the environment.
open class LastUpdate {
    Status: (UpdateStatus)?
    CreatedAt: (UpdateCreatedAt)?
    Error: (UpdateError)?
}

/// The webserver VPC endpoint service name, applicable if private webserver access mode selected.
open class WebserverVpcEndpointService {
}

/// Customer-defined identifier for the environment, unique per customer region.
open class EnvironmentName {
}

/// When the update request was created.
open class UpdateCreatedAt {
}

/// 
open class ConfigKey {
}

/// Templated configuration for airflow processes and backing infrastructure.
open class EnvironmentClass {
}

/// Version of airflow to deploy to the environment.
open class AirflowVersion {
}

/// 
open class SecurityGroupId {
}

/// Choice for mode of webserver access including over public internet or via private VPC endpoint.
open class WebserverAccessMode {
}

/// The celery executor queue associated with the environment.
open class CeleryExecutorQueue {
}

/// 
open class UpdateStatus {
}

/// 
open class SubnetId {
}

/// ARN for the AWS S3 bucket to use as the source of DAGs and plugins for the environment.
open class S3BucketArn {
}

/// Url endpoint for the environment's Airflow UI.
open class WebserverUrl {
}

/// Logging configuration for the environment.
open class LoggingConfiguration {
    WorkerLogs: (ModuleLoggingConfiguration)?
    TaskLogs: (ModuleLoggingConfiguration)?
    DagProcessingLogs: (ModuleLoggingConfiguration)?
    SchedulerLogs: (ModuleLoggingConfiguration)?
    WebserverLogs: (ModuleLoggingConfiguration)?
}

/// Logging configuration for a specific airflow component.
open class ModuleLoggingConfiguration {
    Enabled: (LoggingEnabled)?
    LogLevel: (LoggingLevel)?
    CloudWatchLogGroupArn: (CloudWatchLogGroupArn)?
}

/// Represents an S3 prefix relative to the root of an S3 bucket.
open class RelativePath {
}

/// 
open class LoggingLevel {
}

/// Maximum worker compute units.
open class MaxWorkers {
}

/// The error code associated with an error.
open class ErrorCode {
}

/// Resource schema for AWS::MWAA::Environment
open class Environment extends cloudformation.Resource {

    Type = "AWS::MWAA::Environment"


    /// 
    hidden ExecutionRoleArn: (ExecutionRoleArn)?

    /// 
    hidden SourceBucketArn: (S3BucketArn)?

    /// Key/value pairs representing Airflow configuration variables.
    ///    ///     Keys are prefixed by their section:
    /// 
    ///     [core]
    ///     dags_folder={AIRFLOW_HOME}/dags
    /// 
    ///     Would be represented as
    /// 
    ///     "core.dags_folder": "{AIRFLOW_HOME}/dags"
    hidden AirflowConfigurationOptions: (Dynamic)?

    /// 
    hidden MaxWorkers: (MaxWorkers)?

    /// 
    hidden MinWorkers: (MinWorkers)?

    /// 
    hidden Name: EnvironmentName

    /// 
    hidden WeeklyMaintenanceWindowStart: (WeeklyMaintenanceWindowStart)?

    /// 
    hidden WebserverAccessMode: (WebserverAccessMode)?

    /// 
    hidden DagS3Path: (RelativePath)?

    /// 
    hidden PluginsS3Path: (RelativePath)?

    /// 
    hidden StartupScriptS3Path: (RelativePath)?

    /// 
    hidden PluginsS3ObjectVersion: (S3ObjectVersion)?

    /// 
    hidden StartupScriptS3ObjectVersion: (S3ObjectVersion)?

    /// 
    hidden EnvironmentClass: (EnvironmentClass)?

    /// 
    hidden EndpointManagement: (EndpointManagement)?

    /// 
    hidden KmsKey: (KmsKey)?

    /// 
    hidden AirflowVersion: (AirflowVersion)?

    /// 
    hidden RequirementsS3ObjectVersion: (S3ObjectVersion)?

    /// 
    hidden NetworkConfiguration: (NetworkConfiguration)?

    /// 
    hidden LoggingConfiguration: (LoggingConfiguration)?

    /// A map of tags for the environment.
    hidden Tags: (Dynamic)?

    /// 
    hidden RequirementsS3Path: (RelativePath)?

    /// 
    hidden Schedulers: (Schedulers)?

    Properties {
        ["ExecutionRoleArn"] = if (ExecutionRoleArn == null) null else ExecutionRoleArn
        ["SourceBucketArn"] = if (SourceBucketArn == null) null else SourceBucketArn
        ["AirflowConfigurationOptions"] = if (AirflowConfigurationOptions == null) null else AirflowConfigurationOptions
        ["MaxWorkers"] = if (MaxWorkers == null) null else MaxWorkers
        ["MinWorkers"] = if (MinWorkers == null) null else MinWorkers
        ["Name"] = if (Name == null) null else Name
        ["WeeklyMaintenanceWindowStart"] = if (WeeklyMaintenanceWindowStart == null) null else WeeklyMaintenanceWindowStart
        ["WebserverAccessMode"] = if (WebserverAccessMode == null) null else WebserverAccessMode
        ["DagS3Path"] = if (DagS3Path == null) null else DagS3Path
        ["PluginsS3Path"] = if (PluginsS3Path == null) null else PluginsS3Path
        ["StartupScriptS3Path"] = if (StartupScriptS3Path == null) null else StartupScriptS3Path
        ["PluginsS3ObjectVersion"] = if (PluginsS3ObjectVersion == null) null else PluginsS3ObjectVersion
        ["StartupScriptS3ObjectVersion"] = if (StartupScriptS3ObjectVersion == null) null else StartupScriptS3ObjectVersion
        ["EnvironmentClass"] = if (EnvironmentClass == null) null else EnvironmentClass
        ["EndpointManagement"] = if (EndpointManagement == null) null else EndpointManagement
        ["KmsKey"] = if (KmsKey == null) null else KmsKey
        ["AirflowVersion"] = if (AirflowVersion == null) null else AirflowVersion
        ["RequirementsS3ObjectVersion"] = if (RequirementsS3ObjectVersion == null) null else RequirementsS3ObjectVersion
        ["NetworkConfiguration"] = if (NetworkConfiguration == null) null else NetworkConfiguration
        ["LoggingConfiguration"] = if (LoggingConfiguration == null) null else LoggingConfiguration
        ["Tags"] = if (Tags == null) null else Tags
        ["RequirementsS3Path"] = if (RequirementsS3Path == null) null else RequirementsS3Path
        ["Schedulers"] = if (Schedulers == null) null else Schedulers
    }

}
