/// AWS::NetworkFirewall::RuleGroup
///
/// Generated by rain build --pkl-class AWS::NetworkFirewall::RuleGroup
module aws.networkfirewall.rulegroup

import "../../cloudformation.pkl"

/// 
open class RulesString {
}

/// 
open class VariableDefinition {
}

/// 
open class Setting {
}

/// 
open class PortRangeBound {
}

/// 
open class Dimension {
    Value: String(matches(Regex(#"^[a-zA-Z0-9-_ ]+$"#)))|Mapping
}

/// 
open class RuleGroup {
    RuleVariables: (RuleVariables)?
    ReferenceSets: (ReferenceSets)?
    RulesSource: RulesSource
    StatefulRuleOptions: (StatefulRuleOptions)?
}

/// 
open class IPSet {
    Definition: (Listing<VariableDefinition>)?
}

/// 
open class RulesSourceList {
    Targets: Listing<String|Mapping>
    TargetTypes: Listing<TargetType>
    GeneratedRulesType: GeneratedRulesType
}

/// 
open class StatelessRule {
    RuleDefinition: RuleDefinition
    Priority: Int|Mapping
}

/// 
open class Address {
    AddressDefinition: String(matches(Regex(#"^([a-fA-F\d:\.]+/\d{1,3})$"#)))|Mapping
}

/// 
open class TCPFlag {
}

/// A resource ARN.
open class ResourceArn {
}

/// 
open class ReferenceSets {
    IPSetReferences: (Dynamic)?
}

/// 
open class GeneratedRulesType {
}

typealias HeaderDirection = "FORWARD"|"ANY"

typealias HeaderProtocol = "IP"|"TCP"|"UDP"|"ICMP"|"HTTP"|"FTP"|"TLS"|"SMB"|"DNS"|"DCERPC"|"SSH"|"SMTP"|"IMAP"|"MSN"|"KRB5"|"IKEV2"|"TFTP"|"NTP"|"DHCP"

/// 
open class Header {
    SourcePort: Port
    Direction: HeaderDirection|Mapping
    Destination: String(matches(Regex(#"^.*$"#)))|Mapping
    DestinationPort: Port
    Protocol: HeaderProtocol|Mapping
    Source: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// 
open class TCPFlagField {
    Flags: Listing<TCPFlag>
    Masks: (Listing<TCPFlag>)?
}

/// 
open class StatefulRuleOptions {
    RuleOrder: (RuleOrder)?
}

/// 
open class RuleVariables {
    PortSets: (Dynamic)?
    IPSets: (Dynamic)?
}

/// 
open class RuleDefinition {
    MatchAttributes: MatchAttributes
    Actions: Listing<String|Mapping>
}

/// 
open class PortRange {
    FromPort: PortRangeBound
    ToPort: PortRangeBound
}

/// 
open class CustomAction {
    ActionName: String(matches(Regex(#"^[a-zA-Z0-9]+$"#)))|Mapping
    ActionDefinition: ActionDefinition
}

/// 
open class PublishMetricAction {
    Dimensions: Listing<Dimension>
}

/// 
open class Tag {
    Key: String(matches(Regex(#"^.*$"#)))|Mapping
    Value: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// 
open class IPSetReference {
    ReferenceArn: (ResourceArn)?
}

/// 
open class TargetType {
}

/// 
open class Port {
}

/// 
open class ProtocolNumber {
}

/// 
open class ActionDefinition {
    PublishMetricAction: (PublishMetricAction)?
}

/// 
open class PortSet {
    Definition: (Listing<VariableDefinition>)?
}

/// 
open class RuleOption {
    Keyword: String(matches(Regex(#"^.*$"#)))|Mapping
    Settings: (Listing<Setting>)?
}

/// 
open class RuleOrder {
}

/// 
open class RulesSource {
    StatelessRulesAndCustomActions: (StatelessRulesAndCustomActions)?
    RulesString: (RulesString)?
    RulesSourceList: (RulesSourceList)?
    StatefulRules: (Listing<StatefulRule>)?
}

typealias StatefulRuleAction = "PASS"|"DROP"|"ALERT"|"REJECT"

/// 
open class StatefulRule {
    Action: StatefulRuleAction|Mapping
    Header: Header
    RuleOptions: Listing<RuleOption>
}

/// 
open class StatelessRulesAndCustomActions {
    StatelessRules: Listing<StatelessRule>
    CustomActions: (Listing<CustomAction>)?
}

/// 
open class MatchAttributes {
    Sources: (Listing<Address>)?
    Destinations: (Listing<Address>)?
    SourcePorts: (Listing<PortRange>)?
    DestinationPorts: (Listing<PortRange>)?
    Protocols: (Listing<ProtocolNumber>)?
    TCPFlags: (Listing<TCPFlagField>)?
}

/// Resource type definition for AWS::NetworkFirewall::RuleGroup
open class RuleGroup extends cloudformation.Resource {

    Type = "AWS::NetworkFirewall::RuleGroup"


    /// 
    hidden RuleGroup: (RuleGroup)?

    /// 
    hidden TypeProperty: RuleGroupType|Mapping

    /// 
    hidden Capacity: Int|Mapping

    /// 
    hidden Description: (String(matches(Regex(#"^.*$"#)))|Mapping)?

    /// 
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden RuleGroupName: String(matches(Regex(#"^[a-zA-Z0-9-]+$"#)))|Mapping

    Properties {
        ["RuleGroup"] = if (RuleGroup == null) null else RuleGroup
        ["Type"] = if (TypeProperty == null) null else TypeProperty
        ["Capacity"] = if (Capacity == null) null else Capacity
        ["Description"] = if (Description == null) null else Description
        ["Tags"] = if (Tags == null) null else Tags
        ["RuleGroupName"] = if (RuleGroupName == null) null else RuleGroupName
    }

}


typealias RuleGroupType = "STATELESS"|"STATEFUL"
