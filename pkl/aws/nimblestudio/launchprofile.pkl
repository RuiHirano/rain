/// AWS::NimbleStudio::LaunchProfile
///
/// Generated by rain build --pkl-class AWS::NimbleStudio::LaunchProfile
module aws.nimblestudio.launchprofile

import "../../cloudformation.pkl"

/// <p>A configuration for a streaming session.</p>
open class LaunchProfileStreamConfiguration {
    ClipboardMode: LaunchProfileStreamingClipboardMode
    Ec2InstanceTypes: Listing<LaunchProfileStreamingInstanceType>
    MaxStoppedSessionLengthInMinutes: (Number|Mapping)?
    VolumeConfiguration: (LaunchProfileVolumeConfiguration)?
    MaxSessionLengthInMinutes: (Number|Mapping)?
    StreamingImageIds: Listing<String|Mapping>
    SessionStorage: (LaunchProfileStreamConfigurationSessionStorage)?
    SessionBackup: (LaunchProfileStreamConfigurationSessionBackup)?
    SessionPersistenceMode: (LaunchProfileSessionPersistenceMode)?
    AutomaticTerminationMode: (LaunchProfileAutomaticTerminationMode)?
}

/// <p>Configures how streaming sessions are backed up when launched from this launch
///
///             profile.</p>
open class LaunchProfileStreamConfigurationSessionBackup {
    Mode: (LaunchProfileSessionBackupMode)?
    MaxBackupsToRetain: (Number|Mapping)?
}

typealias LaunchProfileStreamingSessionStorageMode = String|Mapping


/// <p>The upload storage root location (folder) on streaming workstations where files are
///
///             uploaded.</p>
open class LaunchProfileStreamingSessionStorageRoot {
    Linux: (String(matches(Regex(#"^(\$HOME|/)[/]?([A-Za-z0-9-_]+/)*([A-Za-z0-9_-]+)$"#)))|Mapping)?
    Windows: (String(matches(Regex(#"^((\%HOMEPATH\%)|[a-zA-Z]:)[\\/](?:[a-zA-Z0-9_-]+[\\/])*[a-zA-Z0-9_-]+$"#)))|Mapping)?
}

typealias LaunchProfileStreamingClipboardMode = String|Mapping


/// <p>Custom volume configuration for the root volumes that are attached to streaming
///
///             sessions.</p>
///          <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
///                 <code>ACTIVATED</code>.</p>
open class LaunchProfileVolumeConfiguration {
    Size: (Number|Mapping)?
    Throughput: (Number|Mapping)?
    Iops: (Number|Mapping)?
}

typealias LaunchProfileTags = Mapping<String, Any>


typealias LaunchProfileSessionBackupMode = String|Mapping


typealias LaunchProfileSessionPersistenceMode = String|Mapping


typealias LaunchProfileStreamingInstanceType = String|Mapping


typealias LaunchProfileAutomaticTerminationMode = String|Mapping


/// <p>The configuration for a streaming session?s upload storage.</p>
open class LaunchProfileStreamConfigurationSessionStorage {
    Root: (LaunchProfileStreamingSessionStorageRoot)?
    Mode: Listing<LaunchProfileStreamingSessionStorageMode>
}

/// Represents a launch profile which delegates access to a collection of studio components to studio users
open class LaunchProfile extends cloudformation.Resource {

    Type = "AWS::NimbleStudio::LaunchProfile"


    /// <p>The studio ID. </p>
    hidden StudioId: String|Mapping

    /// <p>The description.</p>
    hidden Description: (String|Mapping)?

    /// <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from.
    ///
    ///             These subnets must support the specified instance types. </p>
    hidden Ec2SubnetIds: Listing<String|Mapping>

    /// <p>Unique identifiers for a collection of studio components that can be used with this
    ///
    ///             launch profile.</p>
    hidden StudioComponentIds: Listing<String|Mapping>

    /// 
    hidden Tags: (LaunchProfileTags)?

    /// <p>The version number of the protocol that is used by the launch profile. The only valid
    ///
    ///             version is "2021-03-31".</p>
    hidden LaunchProfileProtocolVersions: Listing<String|Mapping>

    /// <p>The name for the launch profile.</p>
    hidden Name: String|Mapping

    /// 
    hidden StreamConfiguration: LaunchProfileStreamConfiguration

    Properties {
        ["StudioId"] = if (StudioId == null) null else StudioId
        ["Description"] = if (Description == null) null else Description
        ["Ec2SubnetIds"] = if (Ec2SubnetIds == null) null else Ec2SubnetIds
        ["StudioComponentIds"] = if (StudioComponentIds == null) null else StudioComponentIds
        ["Tags"] = if (Tags == null) null else Tags
        ["LaunchProfileProtocolVersions"] = if (LaunchProfileProtocolVersions == null) null else LaunchProfileProtocolVersions
        ["Name"] = if (Name == null) null else Name
        ["StreamConfiguration"] = if (StreamConfiguration == null) null else StreamConfiguration
    }

}
