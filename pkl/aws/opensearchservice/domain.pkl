/// AWS::OpenSearchService::Domain
///
/// Generated by rain build --pkl-class AWS::OpenSearchService::Domain
module aws.opensearchservice.domain

import "../../cloudformation.pkl"

/// 
open class VPCOptions {
    SecurityGroupIds: (Listing<String|Mapping>)?
    SubnetIds: (Listing<String|Mapping>)?
}

/// 
open class MasterUserOptions {
    MasterUserName: (String|Mapping)?
    MasterUserARN: (String|Mapping)?
    MasterUserPassword: (String|Mapping)?
}

/// 
open class OffPeakWindow {
    WindowStartTime: (WindowStartTime)?
}

/// 
open class WindowStartTime {
    Hours: Int|Mapping
    Minutes: Int|Mapping
}

/// 
open class SoftwareUpdateOptions {
    AutoSoftwareUpdateEnabled: (Boolean|Mapping)?
}

/// 
open class ZoneAwarenessConfig {
    AvailabilityZoneCount: (Int|Mapping)?
}

/// 
open class CognitoOptions {
    Enabled: (Boolean|Mapping)?
    IdentityPoolId: (String|Mapping)?
    UserPoolId: (String|Mapping)?
    RoleArn: (String|Mapping)?
}

/// 
open class AdvancedSecurityOptionsInput {
    AnonymousAuthEnabled: (Boolean|Mapping)?
    SAMLOptions: (SAMLOptions)?
    AnonymousAuthDisableDate: (String|Mapping)?
    Enabled: (Boolean|Mapping)?
    MasterUserOptions: (MasterUserOptions)?
    InternalUserDatabaseEnabled: (Boolean|Mapping)?
}

/// 
open class EncryptionAtRestOptions {
    KmsKeyId: (String|Mapping)?
    Enabled: (Boolean|Mapping)?
}

/// 
open class Tag {
    Value: String|Mapping
    Key: String|Mapping
}

/// 
open class ServiceSoftwareOptions {
    AutomatedUpdateDate: (String|Mapping)?
    OptionalDeployment: (Boolean|Mapping)?
    CurrentVersion: (String|Mapping)?
    NewVersion: (String|Mapping)?
    UpdateAvailable: (Boolean|Mapping)?
    Cancellable: (Boolean|Mapping)?
    UpdateStatus: (String|Mapping)?
    Description: (String|Mapping)?
}

/// 
open class OffPeakWindowOptions {
    Enabled: (Boolean|Mapping)?
    OffPeakWindow: (OffPeakWindow)?
}

/// 
open class LogPublishingOption {
    CloudWatchLogsLogGroupArn: (String|Mapping)?
    Enabled: (Boolean|Mapping)?
}

/// 
open class DomainEndpointOptions {
    EnforceHTTPS: (Boolean|Mapping)?
    CustomEndpoint: (String|Mapping)?
    TLSSecurityPolicy: (String|Mapping)?
    CustomEndpointCertificateArn: (String|Mapping)?
    CustomEndpointEnabled: (Boolean|Mapping)?
}

/// 
open class SAMLOptions {
    MasterUserName: (String|Mapping)?
    MasterBackendRole: (String|Mapping)?
    SubjectKey: (String|Mapping)?
    RolesKey: (String|Mapping)?
    SessionTimeoutMinutes: (Int|Mapping)?
    Enabled: (Boolean|Mapping)?
    Idp: (Idp)?
}

/// 
open class EBSOptions {
    VolumeSize: (Int|Mapping)?
    Throughput: (Int|Mapping)?
    EBSEnabled: (Boolean|Mapping)?
    VolumeType: (String|Mapping)?
    Iops: (Int|Mapping)?
}

/// 
open class ColdStorageOptions {
    Enabled: (Boolean|Mapping)?
}

/// 
open class ClusterConfig {
    WarmEnabled: (Boolean|Mapping)?
    WarmCount: (Int|Mapping)?
    ZoneAwarenessConfig: (ZoneAwarenessConfig)?
    InstanceType: (String|Mapping)?
    WarmType: (String|Mapping)?
    ZoneAwarenessEnabled: (Boolean|Mapping)?
    MultiAZWithStandbyEnabled: (Boolean|Mapping)?
    InstanceCount: (Int|Mapping)?
    DedicatedMasterEnabled: (Boolean|Mapping)?
    DedicatedMasterCount: (Int|Mapping)?
    DedicatedMasterType: (String|Mapping)?
    ColdStorageOptions: (ColdStorageOptions)?
}

/// 
open class SnapshotOptions {
    AutomatedSnapshotStartHour: (Int|Mapping)?
}

/// 
open class NodeToNodeEncryptionOptions {
    Enabled: (Boolean|Mapping)?
}

/// 
open class Idp {
    MetadataContent: String|Mapping
    EntityId: String|Mapping
}

/// An example resource schema demonstrating some basic constructs and validation rules.
open class Domain extends cloudformation.Resource {

    Type = "AWS::OpenSearchService::Domain"


    /// 
    hidden IPAddressType: (String|Mapping)?

    /// 
    hidden EncryptionAtRestOptions: (EncryptionAtRestOptions)?

    /// 
    hidden LogPublishingOptions: (Dynamic)?

    /// 
    hidden SnapshotOptions: (SnapshotOptions)?

    /// 
    hidden VPCOptions: (VPCOptions)?

    /// 
    hidden OffPeakWindowOptions: (OffPeakWindowOptions)?

    /// 
    hidden DomainEndpointOptions: (DomainEndpointOptions)?

    /// 
    hidden AdvancedSecurityOptions: (AdvancedSecurityOptionsInput)?

    /// An arbitrary set of tags (key-value pairs) for this Domain.
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden ClusterConfig: (ClusterConfig)?

    /// 
    hidden AccessPolicies: (Dynamic)?

    /// 
    hidden SoftwareUpdateOptions: (SoftwareUpdateOptions)?

    /// 
    hidden EngineVersion: (String|Mapping)?

    /// 
    hidden AdvancedOptions: (Dynamic)?

    /// 
    hidden EBSOptions: (EBSOptions)?

    /// 
    hidden DomainName: (String|Mapping)?

    /// 
    hidden NodeToNodeEncryptionOptions: (NodeToNodeEncryptionOptions)?

    /// 
    hidden CognitoOptions: (CognitoOptions)?

    Properties {
        ["IPAddressType"] = if (IPAddressType == null) null else IPAddressType
        ["EncryptionAtRestOptions"] = if (EncryptionAtRestOptions == null) null else EncryptionAtRestOptions
        ["LogPublishingOptions"] = if (LogPublishingOptions == null) null else LogPublishingOptions
        ["SnapshotOptions"] = if (SnapshotOptions == null) null else SnapshotOptions
        ["VPCOptions"] = if (VPCOptions == null) null else VPCOptions
        ["OffPeakWindowOptions"] = if (OffPeakWindowOptions == null) null else OffPeakWindowOptions
        ["DomainEndpointOptions"] = if (DomainEndpointOptions == null) null else DomainEndpointOptions
        ["AdvancedSecurityOptions"] = if (AdvancedSecurityOptions == null) null else AdvancedSecurityOptions
        ["Tags"] = if (Tags == null) null else Tags
        ["ClusterConfig"] = if (ClusterConfig == null) null else ClusterConfig
        ["AccessPolicies"] = if (AccessPolicies == null) null else AccessPolicies
        ["SoftwareUpdateOptions"] = if (SoftwareUpdateOptions == null) null else SoftwareUpdateOptions
        ["EngineVersion"] = if (EngineVersion == null) null else EngineVersion
        ["AdvancedOptions"] = if (AdvancedOptions == null) null else AdvancedOptions
        ["EBSOptions"] = if (EBSOptions == null) null else EBSOptions
        ["DomainName"] = if (DomainName == null) null else DomainName
        ["NodeToNodeEncryptionOptions"] = if (NodeToNodeEncryptionOptions == null) null else NodeToNodeEncryptionOptions
        ["CognitoOptions"] = if (CognitoOptions == null) null else CognitoOptions
    }

}
