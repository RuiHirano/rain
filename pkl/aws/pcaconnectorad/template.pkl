/// AWS::PCAConnectorAD::Template
///
/// Generated by rain build --pkl-class AWS::PCAConnectorAD::Template
module aws.pcaconnectorad.template

import "../../cloudformation.pkl"

/// 
open class TemplateTemplateDefinitionTemplateV3 {
    TemplateV3: TemplateTemplateV3
}

/// 
open class TemplateTemplateV3 {
    PrivateKeyAttributes: TemplatePrivateKeyAttributesV3
    EnrollmentFlags: TemplateEnrollmentFlagsV3
    SubjectNameFlags: TemplateSubjectNameFlagsV3
    Extensions: TemplateExtensionsV3
    CertificateValidity: TemplateCertificateValidity
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyFlags: TemplatePrivateKeyFlagsV3
    GeneralFlags: TemplateGeneralFlagsV3
    HashAlgorithm: TemplateHashAlgorithm
}

typealias TemplateValidityPeriodType = String|Mapping


typealias TemplateClientCompatibilityV3 = String|Mapping


typealias TemplateKeyUsageProperty = TemplateKeyUsagePropertyPropertyType|TemplateKeyUsagePropertyPropertyFlags


/// 
open class TemplateGeneralFlagsV2 {
    MachineType: (Boolean|Mapping)?
    AutoEnrollment: (Boolean|Mapping)?
}

/// 
open class TemplatePrivateKeyFlagsV2 {
    ExportableKey: (Boolean|Mapping)?
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    ClientVersion: TemplateClientCompatibilityV2
}

/// 
open class TemplateSubjectNameFlagsV3 {
    SanRequireUpn: (Boolean|Mapping)?
    RequireDnsAsCn: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireEmail: (Boolean|Mapping)?
    SanRequireDomainDns: (Boolean|Mapping)?
}

typealias TemplateHashAlgorithm = String|Mapping


/// 
open class TemplatePrivateKeyFlagsV3 {
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    RequireAlternateSignatureAlgorithm: (Boolean|Mapping)?
    ClientVersion: TemplateClientCompatibilityV3
    ExportableKey: (Boolean|Mapping)?
}

/// 
open class TemplateKeyUsage {
    Critical: (Boolean|Mapping)?
    UsageFlags: TemplateKeyUsageFlags
}

/// 
open class TemplateValidityPeriod {
    PeriodType: TemplateValidityPeriodType
    Period: Number|Mapping
}

/// 
open class TemplateKeyUsagePropertyFlags {
    Decrypt: (Boolean|Mapping)?
    KeyAgreement: (Boolean|Mapping)?
    Sign: (Boolean|Mapping)?
}

/// 
open class TemplateSubjectNameFlagsV2 {
    SanRequireDomainDns: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    RequireDnsAsCn: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireUpn: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireEmail: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
}

typealias TemplateClientCompatibilityV2 = String|Mapping


/// 
open class TemplateTemplateDefinitionTemplateV2 {
    TemplateV2: TemplateTemplateV2
}

/// 
open class TemplateSubjectNameFlagsV4 {
    RequireDnsAsCn: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    SanRequireUpn: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    SanRequireDomainDns: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireEmail: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
}

typealias TemplateApplicationPolicy = TemplateApplicationPolicyPolicyType|TemplateApplicationPolicyPolicyObjectIdentifier


/// 
open class TemplateApplicationPolicyPolicyObjectIdentifier {
    PolicyObjectIdentifier: String(matches(Regex(#"^([0-2])\.([0-9]|([0-3][0-9]))(\.([0-9]+)){0,126}$"#)))|Mapping
}

/// 
open class TemplateEnrollmentFlagsV2 {
    UserInteractionRequired: (Boolean|Mapping)?
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
    NoSecurityExtension: (Boolean|Mapping)?
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
}

/// 
open class TemplateKeyUsageFlags {
    KeyEncipherment: (Boolean|Mapping)?
    DataEncipherment: (Boolean|Mapping)?
    KeyAgreement: (Boolean|Mapping)?
    DigitalSignature: (Boolean|Mapping)?
    NonRepudiation: (Boolean|Mapping)?
}

/// 
open class TemplateExtensionsV3 {
    KeyUsage: TemplateKeyUsage
    ApplicationPolicies: (TemplateApplicationPolicies)?
}

typealias TemplateTags = Mapping<String, Any>


/// 
open class TemplateTemplateDefinitionTemplateV4 {
    TemplateV4: TemplateTemplateV4
}

/// 
open class TemplateTemplateV4 {
    EnrollmentFlags: TemplateEnrollmentFlagsV4
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyFlags: TemplatePrivateKeyFlagsV4
    SubjectNameFlags: TemplateSubjectNameFlagsV4
    GeneralFlags: TemplateGeneralFlagsV4
    HashAlgorithm: (TemplateHashAlgorithm)?
    Extensions: TemplateExtensionsV4
    CertificateValidity: TemplateCertificateValidity
    PrivateKeyAttributes: TemplatePrivateKeyAttributesV4
}

/// 
open class TemplatePrivateKeyFlagsV4 {
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    RequireAlternateSignatureAlgorithm: (Boolean|Mapping)?
    RequireSameKeyRenewal: (Boolean|Mapping)?
    UseLegacyProvider: (Boolean|Mapping)?
    ClientVersion: TemplateClientCompatibilityV4
    ExportableKey: (Boolean|Mapping)?
}

/// 
open class TemplateGeneralFlagsV4 {
    AutoEnrollment: (Boolean|Mapping)?
    MachineType: (Boolean|Mapping)?
}

typealias TemplateApplicationPolicyType = String|Mapping


/// 
open class TemplateGeneralFlagsV3 {
    AutoEnrollment: (Boolean|Mapping)?
    MachineType: (Boolean|Mapping)?
}

/// 
open class TemplatePrivateKeyAttributesV2 {
    MinimalKeyLength: Number|Mapping
    KeySpec: TemplateKeySpec
    CryptoProviders: (Listing<String|Mapping>)?
}

/// 
open class TemplateCertificateValidity {
    ValidityPeriod: TemplateValidityPeriod
    RenewalPeriod: TemplateValidityPeriod
}

/// 
open class TemplateApplicationPolicyPolicyType {
    PolicyType: TemplateApplicationPolicyType
}

/// 
open class TemplateKeyUsagePropertyPropertyType {
    PropertyType: TemplateKeyUsagePropertyType
}

typealias TemplateKeySpec = String|Mapping


/// 
open class TemplatePrivateKeyAttributesV3 {
    MinimalKeyLength: Number|Mapping
    KeySpec: TemplateKeySpec
    CryptoProviders: (Listing<String|Mapping>)?
    KeyUsageProperty: TemplateKeyUsageProperty
    Algorithm: TemplatePrivateKeyAlgorithm
}

typealias TemplateClientCompatibilityV4 = String|Mapping


/// 
open class TemplatePrivateKeyAttributesV4 {
    MinimalKeyLength: Number|Mapping
    KeySpec: TemplateKeySpec
    CryptoProviders: (Listing<String|Mapping>)?
    KeyUsageProperty: (TemplateKeyUsageProperty)?
    Algorithm: (TemplatePrivateKeyAlgorithm)?
}

/// 
open class TemplateApplicationPolicies {
    Critical: (Boolean|Mapping)?
    Policies: Listing<TemplateApplicationPolicy>
}

/// 
open class TemplateKeyUsagePropertyPropertyFlags {
    PropertyFlags: TemplateKeyUsagePropertyFlags
}

/// 
open class TemplateEnrollmentFlagsV3 {
    NoSecurityExtension: (Boolean|Mapping)?
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
    UserInteractionRequired: (Boolean|Mapping)?
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
}

typealias TemplateKeyUsagePropertyType = String|Mapping


/// 
open class TemplateExtensionsV2 {
    KeyUsage: TemplateKeyUsage
    ApplicationPolicies: (TemplateApplicationPolicies)?
}

/// 
open class TemplateEnrollmentFlagsV4 {
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
    NoSecurityExtension: (Boolean|Mapping)?
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
    UserInteractionRequired: (Boolean|Mapping)?
}

/// 
open class TemplateTemplateV2 {
    PrivateKeyFlags: TemplatePrivateKeyFlagsV2
    EnrollmentFlags: TemplateEnrollmentFlagsV2
    SubjectNameFlags: TemplateSubjectNameFlagsV2
    GeneralFlags: TemplateGeneralFlagsV2
    Extensions: TemplateExtensionsV2
    CertificateValidity: TemplateCertificateValidity
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyAttributes: TemplatePrivateKeyAttributesV2
}

/// 
open class TemplateExtensionsV4 {
    KeyUsage: TemplateKeyUsage
    ApplicationPolicies: (TemplateApplicationPolicies)?
}

typealias TemplateTemplateDefinition = TemplateTemplateDefinitionTemplateV2|TemplateTemplateDefinitionTemplateV3|TemplateTemplateDefinitionTemplateV4


typealias TemplatePrivateKeyAlgorithm = String|Mapping


/// Represents a template that defines certificate configurations, both for issuance and client handling
open class Template extends cloudformation.Resource {

    Type = "AWS::PCAConnectorAD::Template"


    /// 
    hidden ConnectorArn: String(matches(Regex(#"^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$"#)))|Mapping

    /// 
    hidden Definition: TemplateTemplateDefinition

    /// 
    hidden Name: String(matches(Regex(#"^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$"#)))|Mapping

    /// 
    hidden ReenrollAllCertificateHolders: (Boolean|Mapping)?

    /// 
    hidden Tags: (TemplateTags)?

    Properties {
        ["ConnectorArn"] = if (ConnectorArn == null) null else ConnectorArn
        ["Definition"] = if (Definition == null) null else Definition
        ["Name"] = if (Name == null) null else Name
        ["ReenrollAllCertificateHolders"] = if (ReenrollAllCertificateHolders == null) null else ReenrollAllCertificateHolders
        ["Tags"] = if (Tags == null) null else Tags
    }

}
