/// AWS::PCAConnectorAD::Template
///
/// Generated by rain build --pkl-class AWS::PCAConnectorAD::Template
module aws.pcaconnectorad.template

import "../../cloudformation.pkl"

/// 
open class ClientCompatibilityV3 {
}

/// 
open class KeyUsagePropertyType {
}

/// 
open class PrivateKeyAttributesV3 {
    MinimalKeyLength: Number|Mapping
    KeySpec: KeySpec
    CryptoProviders: (Listing<String|Mapping>)?
    KeyUsageProperty: KeyUsageProperty
    Algorithm: PrivateKeyAlgorithm
}

/// 
open class PrivateKeyAttributesV4 {
    KeyUsageProperty: (KeyUsageProperty)?
    Algorithm: (PrivateKeyAlgorithm)?
    MinimalKeyLength: Number|Mapping
    KeySpec: KeySpec
    CryptoProviders: (Listing<String|Mapping>)?
}

/// 
open class PrivateKeyFlagsV3 {
    ClientVersion: ClientCompatibilityV3
    ExportableKey: (Boolean|Mapping)?
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    RequireAlternateSignatureAlgorithm: (Boolean|Mapping)?
}

/// 
open class ApplicationPolicies {
    Critical: (Boolean|Mapping)?
    Policies: Listing<ApplicationPolicy>
}

/// 
open class GeneralFlagsV2 {
    AutoEnrollment: (Boolean|Mapping)?
    MachineType: (Boolean|Mapping)?
}

/// 
open class GeneralFlagsV3 {
    AutoEnrollment: (Boolean|Mapping)?
    MachineType: (Boolean|Mapping)?
}

/// 
open class GeneralFlagsV4 {
    AutoEnrollment: (Boolean|Mapping)?
    MachineType: (Boolean|Mapping)?
}

/// 
open class Tags {
}

/// 
open class TemplateDefinition {
}

/// 
open class ApplicationPolicy {
}

/// 
open class CertificateValidity {
    ValidityPeriod: ValidityPeriod
    RenewalPeriod: ValidityPeriod
}

/// 
open class KeyUsageFlags {
    DigitalSignature: (Boolean|Mapping)?
    NonRepudiation: (Boolean|Mapping)?
    KeyEncipherment: (Boolean|Mapping)?
    DataEncipherment: (Boolean|Mapping)?
    KeyAgreement: (Boolean|Mapping)?
}

/// 
open class SubjectNameFlagsV2 {
    SanRequireDomainDns: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
    RequireDnsAsCn: (Boolean|Mapping)?
    RequireEmail: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireUpn: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
}

/// 
open class TemplateV4 {
    GeneralFlags: GeneralFlagsV4
    Extensions: ExtensionsV4
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyAttributes: PrivateKeyAttributesV4
    PrivateKeyFlags: PrivateKeyFlagsV4
    EnrollmentFlags: EnrollmentFlagsV4
    CertificateValidity: CertificateValidity
    SubjectNameFlags: SubjectNameFlagsV4
    HashAlgorithm: (HashAlgorithm)?
}

/// 
open class EnrollmentFlagsV4 {
    UserInteractionRequired: (Boolean|Mapping)?
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
    NoSecurityExtension: (Boolean|Mapping)?
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
}

/// 
open class PrivateKeyAttributesV2 {
    MinimalKeyLength: Number|Mapping
    KeySpec: KeySpec
    CryptoProviders: (Listing<String|Mapping>)?
}

/// 
open class PrivateKeyFlagsV2 {
    ExportableKey: (Boolean|Mapping)?
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    ClientVersion: ClientCompatibilityV2
}

/// 
open class PrivateKeyFlagsV4 {
    RequireSameKeyRenewal: (Boolean|Mapping)?
    UseLegacyProvider: (Boolean|Mapping)?
    ClientVersion: ClientCompatibilityV4
    ExportableKey: (Boolean|Mapping)?
    StrongKeyProtectionRequired: (Boolean|Mapping)?
    RequireAlternateSignatureAlgorithm: (Boolean|Mapping)?
}

/// 
open class SubjectNameFlagsV3 {
    RequireEmail: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    SanRequireDomainDns: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    RequireDnsAsCn: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireUpn: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
}

/// 
open class ValidityPeriodType {
}

/// 
open class ApplicationPolicyType {
}

/// 
open class ClientCompatibilityV2 {
}

/// 
open class KeyUsagePropertyFlags {
    KeyAgreement: (Boolean|Mapping)?
    Sign: (Boolean|Mapping)?
    Decrypt: (Boolean|Mapping)?
}

/// 
open class PrivateKeyAlgorithm {
}

/// 
open class SubjectNameFlagsV4 {
    SanRequireUpn: (Boolean|Mapping)?
    SanRequireEmail: (Boolean|Mapping)?
    SanRequireDns: (Boolean|Mapping)?
    RequireDnsAsCn: (Boolean|Mapping)?
    RequireCommonName: (Boolean|Mapping)?
    SanRequireDomainDns: (Boolean|Mapping)?
    SanRequireSpn: (Boolean|Mapping)?
    SanRequireDirectoryGuid: (Boolean|Mapping)?
    RequireDirectoryPath: (Boolean|Mapping)?
    RequireEmail: (Boolean|Mapping)?
}

/// 
open class EnrollmentFlagsV2 {
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
    UserInteractionRequired: (Boolean|Mapping)?
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
    NoSecurityExtension: (Boolean|Mapping)?
}

/// 
open class KeyUsage {
    Critical: (Boolean|Mapping)?
    UsageFlags: KeyUsageFlags
}

/// 
open class TemplateV3 {
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyFlags: PrivateKeyFlagsV3
    EnrollmentFlags: EnrollmentFlagsV3
    SubjectNameFlags: SubjectNameFlagsV3
    GeneralFlags: GeneralFlagsV3
    CertificateValidity: CertificateValidity
    PrivateKeyAttributes: PrivateKeyAttributesV3
    HashAlgorithm: HashAlgorithm
    Extensions: ExtensionsV3
}

/// 
open class EnrollmentFlagsV3 {
    IncludeSymmetricAlgorithms: (Boolean|Mapping)?
    UserInteractionRequired: (Boolean|Mapping)?
    RemoveInvalidCertificateFromPersonalStore: (Boolean|Mapping)?
    NoSecurityExtension: (Boolean|Mapping)?
    EnableKeyReuseOnNtTokenKeysetStorageFull: (Boolean|Mapping)?
}

/// 
open class ExtensionsV2 {
    KeyUsage: KeyUsage
    ApplicationPolicies: (ApplicationPolicies)?
}

/// 
open class ExtensionsV4 {
    KeyUsage: KeyUsage
    ApplicationPolicies: (ApplicationPolicies)?
}

/// 
open class HashAlgorithm {
}

/// 
open class KeyUsageProperty {
}

/// 
open class ClientCompatibilityV4 {
}

/// 
open class ExtensionsV3 {
    KeyUsage: KeyUsage
    ApplicationPolicies: (ApplicationPolicies)?
}

/// 
open class KeySpec {
}

/// 
open class TemplateV2 {
    SubjectNameFlags: SubjectNameFlagsV2
    GeneralFlags: GeneralFlagsV2
    Extensions: ExtensionsV2
    CertificateValidity: CertificateValidity
    SupersededTemplates: (Listing<String|Mapping>)?
    PrivateKeyAttributes: PrivateKeyAttributesV2
    PrivateKeyFlags: PrivateKeyFlagsV2
    EnrollmentFlags: EnrollmentFlagsV2
}

/// 
open class ValidityPeriod {
    PeriodType: ValidityPeriodType
    Period: Number|Mapping
}

/// Represents a template that defines certificate configurations, both for issuance and client handling
open class Template extends cloudformation.Resource {

    Type = "AWS::PCAConnectorAD::Template"


    /// 
    hidden Tags: (Tags)?

    /// 
    hidden ConnectorArn: String(matches(Regex(#"^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$"#)))|Mapping

    /// 
    hidden Definition: TemplateDefinition

    /// 
    hidden Name: String(matches(Regex(#"^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$"#)))|Mapping

    /// 
    hidden ReenrollAllCertificateHolders: (Boolean|Mapping)?

    Properties {
        ["Tags"] = if (Tags == null) null else Tags
        ["ConnectorArn"] = if (ConnectorArn == null) null else ConnectorArn
        ["Definition"] = if (Definition == null) null else Definition
        ["Name"] = if (Name == null) null else Name
        ["ReenrollAllCertificateHolders"] = if (ReenrollAllCertificateHolders == null) null else ReenrollAllCertificateHolders
    }

}
