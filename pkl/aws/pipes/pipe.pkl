/// AWS::Pipes::Pipe
///
/// Generated by rain build --pkl-class AWS::Pipes::Pipe
module aws.pipes.pipe

import "../../cloudformation.pkl"

/// 
open class BatchJobDependency {
    Type: (BatchJobDependencyType)?
    JobId: (String|Mapping)?
}

/// 
open class BatchRetryStrategy {
    Attempts: (Int|Mapping)?
}

/// 
open class PipeSourceRabbitMQBrokerParameters {
    Credentials: MQBrokerAccessCredentials
    QueueName: String(matches(Regex(#"^[\s\S]*$"#)))|Mapping
    VirtualHost: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
}

/// 
open class PipeSourceSqsQueueParameters {
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
}

/// 
open class EcsResourceRequirement {
    Value: String|Mapping
    Type: EcsResourceRequirementType
}

/// 
open class PipeTargetKinesisStreamParameters {
    PartitionKey: String|Mapping
}

/// 
open class PropagateTags {
}

/// 
open class RequestedPipeState {
}

/// 
open class EcsResourceRequirementType {
}

/// 
open class NetworkConfiguration {
    AwsvpcConfiguration: (AwsVpcConfiguration)?
}

/// 
open class PipeTargetRedshiftDataParameters {
    SecretManagerArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
    Database: String|Mapping
    DbUser: (String|Mapping)?
    StatementName: (String|Mapping)?
    WithEvent: (Boolean|Mapping)?
    Sqls: Listing<String|Mapping>
}

/// 
open class PipeTargetSageMakerPipelineParameters {
    PipelineParameterList: (Listing<SageMakerPipelineParameter>)?
}

/// 
open class PlacementStrategy {
    Type: (PlacementStrategyType)?
    Field: (String|Mapping)?
}

/// 
open class DeadLetterConfig {
    Arn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping)?
}

/// 
open class PipeTargetStateMachineParameters {
    InvocationType: (PipeTargetInvocationType)?
}

/// 
open class S3OutputFormat {
}

/// 
open class SelfManagedKafkaStartPosition {
}

/// 
open class OnPartialBatchItemFailureStreams {
}

/// 
open class PipeEnrichmentParameters {
    InputTemplate: (String|Mapping)?
    HttpParameters: (PipeEnrichmentHttpParameters)?
}

/// 
open class BatchContainerOverrides {
    InstanceType: (String|Mapping)?
    ResourceRequirements: (Listing<BatchResourceRequirement>)?
    Command: (Listing<String|Mapping>)?
    Environment: (Listing<BatchEnvironmentVariable>)?
}

/// 
open class BatchJobDependencyType {
}

/// 
open class KinesisStreamStartPosition {
}

/// 
open class LogLevel {
}

/// 
open class MSKStartPosition {
}

/// 
open class PipeSourceDynamoDBStreamParameters {
    MaximumRetryAttempts: (Int|Mapping)?
    ParallelizationFactor: (Int|Mapping)?
    StartingPosition: DynamoDBStreamStartPosition
    BatchSize: (Int|Mapping)?
    DeadLetterConfig: (DeadLetterConfig)?
    OnPartialBatchItemFailure: (OnPartialBatchItemFailureStreams)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    MaximumRecordAgeInSeconds: (Int|Mapping)?
}

/// 
open class PipeState {
}

/// 
open class QueryStringParametersMap {
}

/// 
open class PlacementStrategyType {
}

/// 
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class BatchEnvironmentVariable {
    Value: (String|Mapping)?
    Name: (String|Mapping)?
}

/// 
open class BatchResourceRequirementType {
}

/// 
open class FirehoseLogDestination {
    DeliveryStreamArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:firehose:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):deliverystream/.+)$"#)))|Mapping)?
}

/// 
open class HeaderParametersMap {
}

/// 
open class LaunchType {
}

/// 
open class PlacementConstraint {
    Type: (PlacementConstraintType)?
    Expression: (String|Mapping)?
}

/// 
open class S3LogDestination {
    Prefix: (String|Mapping)?
    BucketOwner: (String|Mapping)?
    OutputFormat: (S3OutputFormat)?
    BucketName: (String|Mapping)?
}

/// 
open class AssignPublicIp {
}

/// 
open class BatchParametersMap {
}

/// 
open class Filter {
    Pattern: (String|Mapping)?
}

/// 
open class PipeSourceParameters {
    ManagedStreamingKafkaParameters: (PipeSourceManagedStreamingKafkaParameters)?
    SelfManagedKafkaParameters: (PipeSourceSelfManagedKafkaParameters)?
    FilterCriteria: (FilterCriteria)?
    KinesisStreamParameters: (PipeSourceKinesisStreamParameters)?
    DynamoDBStreamParameters: (PipeSourceDynamoDBStreamParameters)?
    SqsQueueParameters: (PipeSourceSqsQueueParameters)?
    ActiveMQBrokerParameters: (PipeSourceActiveMQBrokerParameters)?
    RabbitMQBrokerParameters: (PipeSourceRabbitMQBrokerParameters)?
}

/// 
open class PipeTargetInvocationType {
}

/// 
open class PipeLogConfiguration {
    IncludeExecutionData: (Listing<IncludeExecutionDataOption>)?
    S3LogDestination: (S3LogDestination)?
    FirehoseLogDestination: (FirehoseLogDestination)?
    CloudwatchLogsLogDestination: (CloudwatchLogsLogDestination)?
    Level: (LogLevel)?
}

/// 
open class PipeTargetHttpParameters {
    QueryStringParameters: (QueryStringParametersMap)?
    PathParameterValues: (Listing<String|Mapping>)?
    HeaderParameters: (HeaderParametersMap)?
}

/// 
open class BatchArrayProperties {
    Size: (Int|Mapping)?
}

/// 
open class EcsEnvironmentFile {
    Type: EcsEnvironmentFileType
    Value: String|Mapping
}

/// 
open class EcsEnvironmentVariable {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

/// 
open class MQBrokerAccessCredentials {
}

/// 
open class MSKAccessCredentials {
}

/// 
open class PipeSourceManagedStreamingKafkaParameters {
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    ConsumerGroupID: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
    Credentials: (MSKAccessCredentials)?
    TopicName: String(matches(Regex(#"^[^.]([a-zA-Z0-9\-_.]+)$"#)))|Mapping
    StartingPosition: (MSKStartPosition)?
}

/// 
open class PlacementConstraintType {
}

/// 
open class PipeTargetSqsQueueParameters {
    MessageGroupId: (String|Mapping)?
    MessageDeduplicationId: (String|Mapping)?
}

/// 
open class PipeSourceSelfManagedKafkaParameters {
    Vpc: (SelfManagedKafkaAccessConfigurationVpc)?
    TopicName: String(matches(Regex(#"^[^.]([a-zA-Z0-9\-_.]+)$"#)))|Mapping
    AdditionalBootstrapServers: (Listing<String|Mapping>)?
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    Credentials: (SelfManagedKafkaAccessConfigurationCredentials)?
    ServerRootCaCertificate: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping)?
    StartingPosition: (SelfManagedKafkaStartPosition)?
    ConsumerGroupID: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
}

/// 
open class PipeTargetParameters {
    CloudWatchLogsParameters: (PipeTargetCloudWatchLogsParameters)?
    InputTemplate: (String|Mapping)?
    LambdaFunctionParameters: (PipeTargetLambdaFunctionParameters)?
    StepFunctionStateMachineParameters: (PipeTargetStateMachineParameters)?
    HttpParameters: (PipeTargetHttpParameters)?
    RedshiftDataParameters: (PipeTargetRedshiftDataParameters)?
    EventBridgeEventBusParameters: (PipeTargetEventBridgeEventBusParameters)?
    KinesisStreamParameters: (PipeTargetKinesisStreamParameters)?
    EcsTaskParameters: (PipeTargetEcsTaskParameters)?
    BatchJobParameters: (PipeTargetBatchJobParameters)?
    SqsQueueParameters: (PipeTargetSqsQueueParameters)?
    SageMakerPipelineParameters: (PipeTargetSageMakerPipelineParameters)?
}

/// 
open class SelfManagedKafkaAccessConfigurationCredentials {
}

/// 
open class CloudwatchLogsLogDestination {
    LogGroupArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:logs:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):log-group:.+)$"#)))|Mapping)?
}

/// 
open class EcsContainerOverride {
    ResourceRequirements: (Listing<EcsResourceRequirement>)?
    Command: (Listing<String|Mapping>)?
    Cpu: (Int|Mapping)?
    Environment: (Listing<EcsEnvironmentVariable>)?
    EnvironmentFiles: (Listing<EcsEnvironmentFile>)?
    Memory: (Int|Mapping)?
    MemoryReservation: (Int|Mapping)?
    Name: (String|Mapping)?
}

/// 
open class EcsEnvironmentFileType {
}

/// 
open class EcsTaskOverride {
    ContainerOverrides: (Listing<EcsContainerOverride>)?
    Cpu: (String|Mapping)?
    EphemeralStorage: (EcsEphemeralStorage)?
    ExecutionRoleArn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
    InferenceAcceleratorOverrides: (Listing<EcsInferenceAcceleratorOverride>)?
    Memory: (String|Mapping)?
    TaskRoleArn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
}

/// 
open class PipeSourceActiveMQBrokerParameters {
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    Credentials: MQBrokerAccessCredentials
    QueueName: String(matches(Regex(#"^[\s\S]*$"#)))|Mapping
    BatchSize: (Int|Mapping)?
}

/// 
open class BatchResourceRequirement {
    Type: BatchResourceRequirementType
    Value: String|Mapping
}

/// 
open class PipeTargetEcsTaskParameters {
    Overrides: (EcsTaskOverride)?
    PlacementStrategy: (Listing<PlacementStrategy>)?
    ReferenceId: (String|Mapping)?
    CapacityProviderStrategy: (Listing<CapacityProviderStrategyItem>)?
    EnableExecuteCommand: (Boolean|Mapping)?
    Tags: (Listing<Tag>)?
    NetworkConfiguration: (NetworkConfiguration)?
    PlatformVersion: (String|Mapping)?
    EnableECSManagedTags: (Boolean|Mapping)?
    PlacementConstraints: (Listing<PlacementConstraint>)?
    TaskDefinitionArn: String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping
    Group: (String|Mapping)?
    PropagateTags: (PropagateTags)?
    TaskCount: (Int|Mapping)?
    LaunchType: (LaunchType)?
}

/// 
open class PipeTargetLambdaFunctionParameters {
    InvocationType: (PipeTargetInvocationType)?
}

/// 
open class TagMap {
}

/// 
open class AwsVpcConfiguration {
    Subnets: Listing<String|Mapping>
    SecurityGroups: (Listing<String|Mapping>)?
    AssignPublicIp: (AssignPublicIp)?
}

/// 
open class DynamoDBStreamStartPosition {
}

/// 
open class PipeEnrichmentHttpParameters {
    PathParameterValues: (Listing<String|Mapping>)?
    HeaderParameters: (HeaderParametersMap)?
    QueryStringParameters: (QueryStringParametersMap)?
}

/// 
open class PipeTargetBatchJobParameters {
    JobDefinition: String|Mapping
    JobName: String|Mapping
    ArrayProperties: (BatchArrayProperties)?
    RetryStrategy: (BatchRetryStrategy)?
    ContainerOverrides: (BatchContainerOverrides)?
    DependsOn: (Listing<BatchJobDependency>)?
    Parameters: (BatchParametersMap)?
}

/// 
open class PipeSourceKinesisStreamParameters {
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    StartingPosition: KinesisStreamStartPosition
    DeadLetterConfig: (DeadLetterConfig)?
    OnPartialBatchItemFailure: (OnPartialBatchItemFailureStreams)?
    MaximumRecordAgeInSeconds: (Int|Mapping)?
    MaximumRetryAttempts: (Int|Mapping)?
    ParallelizationFactor: (Int|Mapping)?
    StartingPositionTimestamp: (String|Mapping)?
}

/// 
open class PipeTargetCloudWatchLogsParameters {
    LogStreamName: (String|Mapping)?
    Timestamp: (String(matches(Regex(#"^\$(\.[\w_-]+(\[(\d+|\*)\])*)*$"#)))|Mapping)?
}

/// 
open class PipeTargetEventBridgeEventBusParameters {
    EndpointId: (String(matches(Regex(#"^[A-Za-z0-9\-]+[\.][A-Za-z0-9\-]+$"#)))|Mapping)?
    DetailType: (String|Mapping)?
    Source: (String(matches(Regex(#"(?=[/\.\-_A-Za-z0-9]+)((?!aws\.).*)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)"#)))|Mapping)?
    Resources: (Listing<String|Mapping>)?
    Time: (String(matches(Regex(#"^\$(\.[\w/_-]+(\[(\d+|\*)\])*)*$"#)))|Mapping)?
}

/// 
open class CapacityProviderStrategyItem {
    CapacityProvider: String|Mapping
    Weight: (Int|Mapping)?
    Base: (Int|Mapping)?
}

/// 
open class EcsEphemeralStorage {
    SizeInGiB: Int|Mapping
}

/// 
open class EcsInferenceAcceleratorOverride {
    DeviceName: (String|Mapping)?
    DeviceType: (String|Mapping)?
}

/// 
open class FilterCriteria {
    Filters: (Listing<Filter>)?
}

/// 
open class IncludeExecutionDataOption {
}

/// 
open class SageMakerPipelineParameter {
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9])*|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping
    Value: String|Mapping
}

/// 
open class SelfManagedKafkaAccessConfigurationVpc {
    Subnets: (Listing<String|Mapping>)?
    SecurityGroup: (Listing<String|Mapping>)?
}

/// Definition of AWS::Pipes::Pipe Resource Type
open class Pipe extends cloudformation.Resource {

    Type = "AWS::Pipes::Pipe"


    /// 
    hidden DesiredState: (RequestedPipeState)?

    /// 
    hidden Description: (String(matches(Regex(#"^.*$"#)))|Mapping)?

    /// 
    hidden Source: String(matches(Regex(#"^smk://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping

    /// 
    hidden SourceParameters: (PipeSourceParameters)?

    /// 
    hidden Tags: (TagMap)?

    /// 
    hidden Target: String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping

    /// 
    hidden EnrichmentParameters: (PipeEnrichmentParameters)?

    /// 
    hidden LogConfiguration: (PipeLogConfiguration)?

    /// 
    hidden Name: (String(matches(Regex(#"^[\.\-_A-Za-z0-9]+$"#)))|Mapping)?

    /// 
    hidden RoleArn: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$"#)))|Mapping

    /// 
    hidden TargetParameters: (PipeTargetParameters)?

    /// 
    hidden Enrichment: (String(matches(Regex(#"^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping)?

    Properties {
        ["DesiredState"] = if (DesiredState == null) null else DesiredState
        ["Description"] = if (Description == null) null else Description
        ["Source"] = if (Source == null) null else Source
        ["SourceParameters"] = if (SourceParameters == null) null else SourceParameters
        ["Tags"] = if (Tags == null) null else Tags
        ["Target"] = if (Target == null) null else Target
        ["EnrichmentParameters"] = if (EnrichmentParameters == null) null else EnrichmentParameters
        ["LogConfiguration"] = if (LogConfiguration == null) null else LogConfiguration
        ["Name"] = if (Name == null) null else Name
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["TargetParameters"] = if (TargetParameters == null) null else TargetParameters
        ["Enrichment"] = if (Enrichment == null) null else Enrichment
    }

}
