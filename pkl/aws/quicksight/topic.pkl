/// AWS::QuickSight::Topic
///
/// Generated by rain build --pkl-class AWS::QuickSight::Topic
module aws.quicksight.topic

import "../../cloudformation.pkl"

typealias TopicConstantType = String|Mapping


/// 
open class TopicDatasetMetadata {
    NamedEntities: (Listing<TopicTopicNamedEntity>)?
    DatasetArn: String|Mapping
    DatasetName: (String|Mapping)?
    DatasetDescription: (String|Mapping)?
    DataAggregation: (TopicDataAggregation)?
    Filters: (Listing<TopicTopicFilter>)?
    Columns: (Listing<TopicTopicColumn>)?
    CalculatedFields: (Listing<TopicTopicCalculatedField>)?
}

typealias TopicNumberScale = String|Mapping


/// 
open class TopicTopicCategoryFilter {
    CategoryFilterFunction: (TopicCategoryFilterFunction)?
    CategoryFilterType: (TopicCategoryFilterType)?
    Constant: (TopicTopicCategoryFilterConstant)?
    Inverse: (Boolean|Mapping)?
}

/// 
open class TopicTopicNumericEqualityFilter {
    Constant: (TopicTopicSingularFilterConstant)?
    Aggregation: (TopicNamedFilterAggType)?
}

typealias TopicTopicUserExperienceVersion = String|Mapping


/// 
open class TopicCellValueSynonym {
    CellValue: (String|Mapping)?
    Synonyms: (Listing<String|Mapping>)?
}

typealias TopicDefaultAggregation = String|Mapping


typealias TopicDisplayFormat = String|Mapping


typealias TopicNamedFilterAggType = String|Mapping


/// 
open class TopicRangeConstant {
    Minimum: (String|Mapping)?
    Maximum: (String|Mapping)?
}

/// 
open class TopicTopicCategoryFilterConstant {
    ConstantType: (TopicConstantType)?
    SingularConstant: (String|Mapping)?
    CollectiveConstant: (TopicCollectiveConstant)?
}

/// 
open class TopicTopicDateRangeFilter {
    Constant: (TopicTopicRangeFilterConstant)?
    Inclusive: (Boolean|Mapping)?
}

/// 
open class TopicTopicRangeFilterConstant {
    ConstantType: (TopicConstantType)?
    RangeConstant: (TopicRangeConstant)?
}

typealias TopicAggregationFunctionParameters = Mapping<String, Any>


typealias TopicNamedFilterType = String|Mapping


/// 
open class TopicTopicNamedEntity {
    EntityName: String|Mapping
    EntityDescription: (String|Mapping)?
    EntitySynonyms: (Listing<String|Mapping>)?
    SemanticEntityType: (TopicSemanticEntityType)?
    Definition: (Listing<TopicNamedEntityDefinition>)?
}

typealias TopicTypeParameters = Mapping<String, Any>


typealias TopicUndefinedSpecifiedValueType = String|Mapping


typealias TopicCategoryFilterFunction = String|Mapping


/// 
open class TopicCollectiveConstant {
    ValueList: (Listing<String|Mapping>)?
}

/// 
open class TopicComparativeOrder {
    SpecifedOrder: (Listing<String|Mapping>)?
    TreatUndefinedSpecifiedValues: (TopicUndefinedSpecifiedValueType)?
    UseOrdering: (TopicColumnOrderingType)?
}

/// 
open class TopicNegativeFormat {
    Prefix: (String|Mapping)?
    Suffix: (String|Mapping)?
}

typealias TopicAuthorSpecifiedAggregation = String|Mapping


/// 
open class TopicDataAggregation {
    DatasetRowDateGranularity: (TopicTopicTimeGranularity)?
    DefaultDateColumnName: (String|Mapping)?
}

/// 
open class TopicNamedEntityDefinition {
    FieldName: (String|Mapping)?
    PropertyName: (String|Mapping)?
    PropertyRole: (TopicPropertyRole)?
    PropertyUsage: (TopicPropertyUsage)?
    Metric: (TopicNamedEntityDefinitionMetric)?
}

typealias TopicPropertyUsage = String|Mapping


/// 
open class TopicTopicCalculatedField {
    SemanticType: (TopicSemanticType)?
    CalculatedFieldName: String|Mapping
    IsIncludedInTopic: (Boolean|Mapping)?
    Aggregation: (TopicDefaultAggregation)?
    NeverAggregateInFilter: (Boolean|Mapping)?
    CalculatedFieldDescription: (String|Mapping)?
    Expression: String|Mapping
    TimeGranularity: (TopicTopicTimeGranularity)?
    AllowedAggregations: (Listing<TopicAuthorSpecifiedAggregation>)?
    NotAllowedAggregations: (Listing<TopicAuthorSpecifiedAggregation>)?
    CellValueSynonyms: (Listing<TopicCellValueSynonym>)?
    CalculatedFieldSynonyms: (Listing<String|Mapping>)?
    ColumnDataRole: (TopicColumnDataRole)?
    NonAdditive: (Boolean|Mapping)?
    DefaultFormatting: (TopicDefaultFormatting)?
    ComparativeOrder: (TopicComparativeOrder)?
}

/// 
open class TopicTopicSingularFilterConstant {
    SingularConstant: (String|Mapping)?
    ConstantType: (TopicConstantType)?
}

typealias TopicTopicTimeGranularity = String|Mapping


typealias TopicColumnDataRole = String|Mapping


typealias TopicTopicRelativeDateFilterFunction = String|Mapping


typealias TopicCategoryFilterType = String|Mapping


/// 
open class TopicDefaultFormatting {
    DisplayFormat: (TopicDisplayFormat)?
    DisplayFormatOptions: (TopicDisplayFormatOptions)?
}

/// 
open class TopicNamedEntityDefinitionMetric {
    Aggregation: (TopicNamedEntityAggType)?
    AggregationFunctionParameters: (TopicAggregationFunctionParameters)?
}

typealias TopicPropertyRole = String|Mapping


/// 
open class TopicTopicDetails {
    Description: (String|Mapping)?
    DataSets: (Listing<TopicDatasetMetadata>)?
    UserExperienceVersion: (TopicTopicUserExperienceVersion)?
    Name: (String|Mapping)?
}

/// 
open class TopicTopicFilter {
    FilterDescription: (String|Mapping)?
    FilterName: String|Mapping
    FilterSynonyms: (Listing<String|Mapping>)?
    OperandFieldName: String|Mapping
    CategoryFilter: (TopicTopicCategoryFilter)?
    NumericEqualityFilter: (TopicTopicNumericEqualityFilter)?
    NumericRangeFilter: (TopicTopicNumericRangeFilter)?
    FilterClass: (TopicFilterClass)?
    FilterType: (TopicNamedFilterType)?
    DateRangeFilter: (TopicTopicDateRangeFilter)?
    RelativeDateFilter: (TopicTopicRelativeDateFilter)?
}

typealias TopicColumnOrderingType = String|Mapping


typealias TopicFilterClass = String|Mapping


typealias TopicNamedEntityAggType = String|Mapping


/// 
open class TopicSemanticEntityType {
    SubTypeName: (String|Mapping)?
    TypeParameters: (TopicTypeParameters)?
    TypeName: (String|Mapping)?
}

/// 
open class TopicSemanticType {
    FalseyCellValueSynonyms: (Listing<String|Mapping>)?
    TypeName: (String|Mapping)?
    SubTypeName: (String|Mapping)?
    TypeParameters: (TopicTypeParameters)?
    TruthyCellValue: (String|Mapping)?
    TruthyCellValueSynonyms: (Listing<String|Mapping>)?
    FalseyCellValue: (String|Mapping)?
}

/// 
open class TopicTopicColumn {
    SemanticType: (TopicSemanticType)?
    NotAllowedAggregations: (Listing<TopicAuthorSpecifiedAggregation>)?
    NonAdditive: (Boolean|Mapping)?
    ColumnDescription: (String|Mapping)?
    ColumnSynonyms: (Listing<String|Mapping>)?
    ColumnDataRole: (TopicColumnDataRole)?
    IsIncludedInTopic: (Boolean|Mapping)?
    DefaultFormatting: (TopicDefaultFormatting)?
    NeverAggregateInFilter: (Boolean|Mapping)?
    ColumnName: String|Mapping
    Aggregation: (TopicDefaultAggregation)?
    TimeGranularity: (TopicTopicTimeGranularity)?
    ColumnFriendlyName: (String|Mapping)?
    ComparativeOrder: (TopicComparativeOrder)?
    AllowedAggregations: (Listing<TopicAuthorSpecifiedAggregation>)?
    CellValueSynonyms: (Listing<TopicCellValueSynonym>)?
}

/// 
open class TopicTopicNumericRangeFilter {
    Inclusive: (Boolean|Mapping)?
    Constant: (TopicTopicRangeFilterConstant)?
    Aggregation: (TopicNamedFilterAggType)?
}

typealias TopicTopicNumericSeparatorSymbol = String|Mapping


/// 
open class TopicDisplayFormatOptions {
    UseBlankCellFormat: (Boolean|Mapping)?
    DateFormat: (String|Mapping)?
    GroupingSeparator: (String|Mapping)?
    Prefix: (String|Mapping)?
    Suffix: (String|Mapping)?
    NegativeFormat: (TopicNegativeFormat)?
    CurrencySymbol: (String|Mapping)?
    BlankCellFormat: (String|Mapping)?
    DecimalSeparator: (TopicTopicNumericSeparatorSymbol)?
    UseGrouping: (Boolean|Mapping)?
    FractionDigits: (Number|Mapping)?
    UnitScaler: (TopicNumberScale)?
}

/// 
open class TopicTopicRelativeDateFilter {
    RelativeDateFilterFunction: (TopicTopicRelativeDateFilterFunction)?
    Constant: (TopicTopicSingularFilterConstant)?
    TimeGranularity: (TopicTopicTimeGranularity)?
}

/// Definition of the AWS::QuickSight::Topic Resource Type.
open class Topic extends cloudformation.Resource {

    Type = "AWS::QuickSight::Topic"


    /// 
    hidden AwsAccountId: (String(matches(Regex(#"^[0-9]{12}$"#)))|Mapping)?

    /// 
    hidden DataSets: (Listing<TopicDatasetMetadata>)?

    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden Name: (String|Mapping)?

    /// 
    hidden TopicId: (String(matches(Regex(#"^[A-Za-z0-9-_.\\+]*$"#)))|Mapping)?

    /// 
    hidden UserExperienceVersion: (TopicTopicUserExperienceVersion)?

    Properties {
        ["AwsAccountId"] = if (AwsAccountId == null) null else AwsAccountId
        ["DataSets"] = if (DataSets == null) null else DataSets
        ["Description"] = if (Description == null) null else Description
        ["Name"] = if (Name == null) null else Name
        ["TopicId"] = if (TopicId == null) null else TopicId
        ["UserExperienceVersion"] = if (UserExperienceVersion == null) null else UserExperienceVersion
    }

}
