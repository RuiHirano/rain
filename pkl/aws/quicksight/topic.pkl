/// AWS::QuickSight::Topic
///
/// Generated by rain build --pkl-class AWS::QuickSight::Topic
module aws.quicksight.topic

import "../../cloudformation.pkl"

/// 
open class DefaultFormatting {
    DisplayFormat: (DisplayFormat)?
    DisplayFormatOptions: (DisplayFormatOptions)?
}

/// 
open class PropertyUsage {
}

/// 
open class RangeConstant {
    Minimum: (String|Mapping)?
    Maximum: (String|Mapping)?
}

/// 
open class TopicCategoryFilterConstant {
    ConstantType: (ConstantType)?
    SingularConstant: (String|Mapping)?
    CollectiveConstant: (CollectiveConstant)?
}

/// 
open class TopicNumericRangeFilter {
    Inclusive: (Boolean|Mapping)?
    Constant: (TopicRangeFilterConstant)?
    Aggregation: (NamedFilterAggType)?
}

/// 
open class TopicSingularFilterConstant {
    ConstantType: (ConstantType)?
    SingularConstant: (String|Mapping)?
}

/// 
open class TopicTimeGranularity {
}

/// 
open class DataAggregation {
    DatasetRowDateGranularity: (TopicTimeGranularity)?
    DefaultDateColumnName: (String|Mapping)?
}

/// 
open class DatasetMetadata {
    DatasetName: (String|Mapping)?
    DatasetDescription: (String|Mapping)?
    DataAggregation: (DataAggregation)?
    Filters: (Listing<TopicFilter>)?
    Columns: (Listing<TopicColumn>)?
    CalculatedFields: (Listing<TopicCalculatedField>)?
    NamedEntities: (Listing<TopicNamedEntity>)?
    DatasetArn: String|Mapping
}

/// 
open class DisplayFormat {
}

/// 
open class SemanticEntityType {
    TypeName: (String|Mapping)?
    SubTypeName: (String|Mapping)?
    TypeParameters: (TypeParameters)?
}

/// 
open class TopicDateRangeFilter {
    Inclusive: (Boolean|Mapping)?
    Constant: (TopicRangeFilterConstant)?
}

/// 
open class TopicRangeFilterConstant {
    ConstantType: (ConstantType)?
    RangeConstant: (RangeConstant)?
}

/// 
open class TopicRelativeDateFilter {
    TimeGranularity: (TopicTimeGranularity)?
    RelativeDateFilterFunction: (TopicRelativeDateFilterFunction)?
    Constant: (TopicSingularFilterConstant)?
}

/// 
open class AggregationFunctionParameters {
}

/// 
open class CategoryFilterFunction {
}

/// 
open class DisplayFormatOptions {
    DateFormat: (String|Mapping)?
    DecimalSeparator: (TopicNumericSeparatorSymbol)?
    FractionDigits: (Number|Mapping)?
    Suffix: (String|Mapping)?
    NegativeFormat: (NegativeFormat)?
    CurrencySymbol: (String|Mapping)?
    UseBlankCellFormat: (Boolean|Mapping)?
    GroupingSeparator: (String|Mapping)?
    UseGrouping: (Boolean|Mapping)?
    Prefix: (String|Mapping)?
    UnitScaler: (NumberScale)?
    BlankCellFormat: (String|Mapping)?
}

/// 
open class NamedEntityAggType {
}

/// 
open class NumberScale {
}

/// 
open class SemanticType {
    TruthyCellValue: (String|Mapping)?
    TruthyCellValueSynonyms: (Listing<String|Mapping>)?
    FalseyCellValue: (String|Mapping)?
    FalseyCellValueSynonyms: (Listing<String|Mapping>)?
    TypeName: (String|Mapping)?
    SubTypeName: (String|Mapping)?
    TypeParameters: (TypeParameters)?
}

/// 
open class TopicCalculatedField {
    Aggregation: (DefaultAggregation)?
    SemanticType: (SemanticType)?
    NotAllowedAggregations: (Listing<AuthorSpecifiedAggregation>)?
    NonAdditive: (Boolean|Mapping)?
    CalculatedFieldSynonyms: (Listing<String|Mapping>)?
    DefaultFormatting: (DefaultFormatting)?
    TimeGranularity: (TopicTimeGranularity)?
    CalculatedFieldName: String|Mapping
    Expression: String|Mapping
    NeverAggregateInFilter: (Boolean|Mapping)?
    CellValueSynonyms: (Listing<CellValueSynonym>)?
    CalculatedFieldDescription: (String|Mapping)?
    IsIncludedInTopic: (Boolean|Mapping)?
    AllowedAggregations: (Listing<AuthorSpecifiedAggregation>)?
    ColumnDataRole: (ColumnDataRole)?
    ComparativeOrder: (ComparativeOrder)?
}

/// 
open class TopicNumericSeparatorSymbol {
}

/// 
open class TopicUserExperienceVersion {
}

/// 
open class TopicNumericEqualityFilter {
    Constant: (TopicSingularFilterConstant)?
    Aggregation: (NamedFilterAggType)?
}

/// 
open class CellValueSynonym {
    Synonyms: (Listing<String|Mapping>)?
    CellValue: (String|Mapping)?
}

/// 
open class DefaultAggregation {
}

/// 
open class NamedEntityDefinitionMetric {
    Aggregation: (NamedEntityAggType)?
    AggregationFunctionParameters: (AggregationFunctionParameters)?
}

/// 
open class NamedFilterAggType {
}

/// 
open class NamedFilterType {
}

/// 
open class PropertyRole {
}

/// 
open class TopicDetails {
    Name: (String|Mapping)?
    Description: (String|Mapping)?
    DataSets: (Listing<DatasetMetadata>)?
    UserExperienceVersion: (TopicUserExperienceVersion)?
}

/// 
open class TopicNamedEntity {
    EntityDescription: (String|Mapping)?
    EntitySynonyms: (Listing<String|Mapping>)?
    SemanticEntityType: (SemanticEntityType)?
    Definition: (Listing<NamedEntityDefinition>)?
    EntityName: String|Mapping
}

/// 
open class AuthorSpecifiedAggregation {
}

/// 
open class CollectiveConstant {
    ValueList: (Listing<String|Mapping>)?
}

/// 
open class ColumnDataRole {
}

/// 
open class ColumnOrderingType {
}

/// 
open class ComparativeOrder {
    UseOrdering: (ColumnOrderingType)?
    SpecifedOrder: (Listing<String|Mapping>)?
    TreatUndefinedSpecifiedValues: (UndefinedSpecifiedValueType)?
}

/// 
open class NamedEntityDefinition {
    FieldName: (String|Mapping)?
    PropertyName: (String|Mapping)?
    PropertyRole: (PropertyRole)?
    PropertyUsage: (PropertyUsage)?
    Metric: (NamedEntityDefinitionMetric)?
}

/// 
open class TopicColumn {
    ColumnSynonyms: (Listing<String|Mapping>)?
    DefaultFormatting: (DefaultFormatting)?
    CellValueSynonyms: (Listing<CellValueSynonym>)?
    ColumnFriendlyName: (String|Mapping)?
    TimeGranularity: (TopicTimeGranularity)?
    ColumnDescription: (String|Mapping)?
    ColumnDataRole: (ColumnDataRole)?
    Aggregation: (DefaultAggregation)?
    IsIncludedInTopic: (Boolean|Mapping)?
    ComparativeOrder: (ComparativeOrder)?
    SemanticType: (SemanticType)?
    AllowedAggregations: (Listing<AuthorSpecifiedAggregation>)?
    ColumnName: String|Mapping
    NotAllowedAggregations: (Listing<AuthorSpecifiedAggregation>)?
    NeverAggregateInFilter: (Boolean|Mapping)?
    NonAdditive: (Boolean|Mapping)?
}

/// 
open class TopicRelativeDateFilterFunction {
}

/// 
open class FilterClass {
}

/// 
open class CategoryFilterType {
}

/// 
open class ConstantType {
}

/// 
open class NegativeFormat {
    Prefix: (String|Mapping)?
    Suffix: (String|Mapping)?
}

/// 
open class TopicCategoryFilter {
    CategoryFilterFunction: (CategoryFilterFunction)?
    CategoryFilterType: (CategoryFilterType)?
    Constant: (TopicCategoryFilterConstant)?
    Inverse: (Boolean|Mapping)?
}

/// 
open class TopicFilter {
    FilterDescription: (String|Mapping)?
    NumericEqualityFilter: (TopicNumericEqualityFilter)?
    NumericRangeFilter: (TopicNumericRangeFilter)?
    RelativeDateFilter: (TopicRelativeDateFilter)?
    DateRangeFilter: (TopicDateRangeFilter)?
    FilterClass: (FilterClass)?
    FilterName: String|Mapping
    FilterSynonyms: (Listing<String|Mapping>)?
    OperandFieldName: String|Mapping
    FilterType: (NamedFilterType)?
    CategoryFilter: (TopicCategoryFilter)?
}

/// 
open class TypeParameters {
}

/// 
open class UndefinedSpecifiedValueType {
}

/// Definition of the AWS::QuickSight::Topic Resource Type.
open class Topic extends cloudformation.Resource {

    Type = "AWS::QuickSight::Topic"


    /// 
    hidden TopicId: (String(matches(Regex(#"^[A-Za-z0-9-_.\\+]*$"#)))|Mapping)?

    /// 
    hidden UserExperienceVersion: (TopicUserExperienceVersion)?

    /// 
    hidden AwsAccountId: (String(matches(Regex(#"^[0-9]{12}$"#)))|Mapping)?

    /// 
    hidden DataSets: (Listing<DatasetMetadata>)?

    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden Name: (String|Mapping)?

    Properties {
        ["TopicId"] = if (TopicId == null) null else TopicId
        ["UserExperienceVersion"] = if (UserExperienceVersion == null) null else UserExperienceVersion
        ["AwsAccountId"] = if (AwsAccountId == null) null else AwsAccountId
        ["DataSets"] = if (DataSets == null) null else DataSets
        ["Description"] = if (Description == null) null else Description
        ["Name"] = if (Name == null) null else Name
    }

}
