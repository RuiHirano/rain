/// AWS::RedshiftServerless::Namespace
///
/// Generated by rain build --pkl-class AWS::RedshiftServerless::Namespace
module aws.redshiftserverless.namespace

import "../../cloudformation.pkl"

typealias NamespaceLogExport = String|Mapping


/// 
open class NamespaceNamespace {
    NamespaceArn: (String|Mapping)?
    DefaultIamRoleArn: (String|Mapping)?
    AdminPasswordSecretArn: (String|Mapping)?
    CreationDate: (String|Mapping)?
    NamespaceId: (String|Mapping)?
    NamespaceName: (String(matches(Regex(#"^[a-z0-9-]+$"#)))|Mapping)?
    IamRoles: (Listing<String|Mapping>)?
    Status: (NamespaceNamespaceStatus)?
    AdminUsername: (String|Mapping)?
    DbName: (String(matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))|Mapping)?
    LogExports: (Listing<NamespaceLogExport>)?
    AdminPasswordSecretKmsKeyId: (String|Mapping)?
    KmsKeyId: (String|Mapping)?
}

typealias NamespaceNamespaceStatus = String|Mapping


/// 
open class NamespaceTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Definition of AWS::RedshiftServerless::Namespace Resource Type
open class Namespace extends cloudformation.Resource {

    Type = "AWS::RedshiftServerless::Namespace"


    /// The default IAM role ARN for the namespace that is being created.
    hidden DefaultIamRoleArn: (String|Mapping)?

    /// The list of tags for the namespace.
    hidden Tags: (Listing<NamespaceTag>)?

    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    hidden RedshiftIdcApplicationArn: (String|Mapping)?

    /// The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret. You can only use this parameter if manageAdminPassword is true.
    hidden AdminPasswordSecretKmsKeyId: (String|Mapping)?

    /// The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
    hidden AdminUsername: (String(matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))|Mapping)?

    /// The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
    hidden DbName: (String(matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))|Mapping)?

    /// The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
    hidden LogExports: (Listing<NamespaceLogExport>)?

    /// A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
    hidden NamespaceName: String(matches(Regex(#"^[a-z0-9-]+$"#)))|Mapping

    /// The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
    hidden AdminUserPassword: (String(matches(Regex(#"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+"#)))|Mapping)?

    /// The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
    hidden FinalSnapshotRetentionPeriod: (Int|Mapping)?

    /// The resource policy document that will be attached to the namespace.
    hidden NamespaceResourcePolicy: (Dynamic)?

    /// The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
    hidden FinalSnapshotName: (String(matches(Regex(#"[a-z][a-z0-9]*(-[a-z0-9]+)*"#)))|Mapping)?

    /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
    hidden KmsKeyId: (String|Mapping)?

    /// If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses adminUserPassword for the admin user account's password.
    hidden ManageAdminPassword: (Boolean|Mapping)?

    /// A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
    hidden IamRoles: (Listing<String|Mapping>)?

    Properties {
        ["DefaultIamRoleArn"] = if (DefaultIamRoleArn == null) null else DefaultIamRoleArn
        ["Tags"] = if (Tags == null) null else Tags
        ["RedshiftIdcApplicationArn"] = if (RedshiftIdcApplicationArn == null) null else RedshiftIdcApplicationArn
        ["AdminPasswordSecretKmsKeyId"] = if (AdminPasswordSecretKmsKeyId == null) null else AdminPasswordSecretKmsKeyId
        ["AdminUsername"] = if (AdminUsername == null) null else AdminUsername
        ["DbName"] = if (DbName == null) null else DbName
        ["LogExports"] = if (LogExports == null) null else LogExports
        ["NamespaceName"] = if (NamespaceName == null) null else NamespaceName
        ["AdminUserPassword"] = if (AdminUserPassword == null) null else AdminUserPassword
        ["FinalSnapshotRetentionPeriod"] = if (FinalSnapshotRetentionPeriod == null) null else FinalSnapshotRetentionPeriod
        ["NamespaceResourcePolicy"] = if (NamespaceResourcePolicy == null) null else NamespaceResourcePolicy
        ["FinalSnapshotName"] = if (FinalSnapshotName == null) null else FinalSnapshotName
        ["KmsKeyId"] = if (KmsKeyId == null) null else KmsKeyId
        ["ManageAdminPassword"] = if (ManageAdminPassword == null) null else ManageAdminPassword
        ["IamRoles"] = if (IamRoles == null) null else IamRoles
    }

}
