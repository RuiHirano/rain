/// AWS::S3::Bucket
///
/// Generated by rain build --pkl-class AWS::S3::Bucket
module aws.s3.bucket

import "../../cloudformation.pkl"

open class EncryptionConfiguration {
    ReplicaKmsKeyID: String|Mapping
}

typealias SseKmsEncryptedObjectsStatus = "Disabled"|"Enabled"

open class SseKmsEncryptedObjects {
    Status: SseKmsEncryptedObjectsStatus|Mapping
}

open class ServerSideEncryptionRule {
    BucketKeyEnabled: (Boolean|Mapping)?
    ServerSideEncryptionByDefault: (ServerSideEncryptionByDefault)?
}

typealias IntelligentTieringConfigurationStatus = "Disabled"|"Enabled"

open class IntelligentTieringConfiguration {
    Id: String|Mapping
    Prefix: (String|Mapping)?
    Status: IntelligentTieringConfigurationStatus|Mapping
    TagFilters: (Listing<TagFilter>)?
    Tierings: Listing<Tiering>
}

typealias DeleteMarkerReplicationStatus = "Disabled"|"Enabled"

open class DeleteMarkerReplication {
    Status: (DeleteMarkerReplicationStatus|Mapping)?
}

typealias DestinationFormat = "CSV"|"ORC"|"Parquet"

open class Destination {
    BucketArn: String|Mapping
    BucketAccountId: (String|Mapping)?
    Format: DestinationFormat|Mapping
    Prefix: (String|Mapping)?
}

open class AnalyticsConfiguration {
    TagFilters: (Listing<TagFilter>)?
    StorageClassAnalysis: StorageClassAnalysis
    Id: String|Mapping
    Prefix: (String|Mapping)?
}

open class CorsConfiguration {
    CorsRules: Listing<CorsRule>
}

typealias OwnershipControlsRuleObjectOwnership = "ObjectWriter"|"BucketOwnerPreferred"|"BucketOwnerEnforced"

open class OwnershipControlsRule {
    ObjectOwnership: (OwnershipControlsRuleObjectOwnership|Mapping)?
}

typealias ReplicationTimeStatus = "Disabled"|"Enabled"

open class ReplicationTime {
    Time: ReplicationTimeValue
    Status: ReplicationTimeStatus|Mapping
}

open class RoutingRuleCondition {
    KeyPrefixEquals: (String|Mapping)?
    HttpErrorCodeReturnedEquals: (String|Mapping)?
}

open class TagFilter {
    Value: String|Mapping
    Key: String|Mapping
}

open class OwnershipControls {
    Rules: Listing<OwnershipControlsRule>
}

open class AccessControlTranslation {
    Owner: String|Mapping
}

typealias InventoryConfigurationScheduleFrequency = "Daily"|"Weekly"

typealias InventoryConfigurationIncludedObjectVersions = "All"|"Current"

typealias InventoryConfigurationOptionalFields = "Size"|"LastModifiedDate"|"StorageClass"|"ETag"|"IsMultipartUploaded"|"ReplicationStatus"|"EncryptionStatus"|"ObjectLockRetainUntilDate"|"ObjectLockMode"|"ObjectLockLegalHoldStatus"|"IntelligentTieringAccessTier"|"BucketKeyStatus"|"ChecksumAlgorithm"|"ObjectAccessControlList"|"ObjectOwner"

open class InventoryConfiguration {
    ScheduleFrequency: InventoryConfigurationScheduleFrequency|Mapping
    Destination: Destination
    Enabled: Boolean|Mapping
    Id: String|Mapping
    IncludedObjectVersions: InventoryConfigurationIncludedObjectVersions|Mapping
    OptionalFields: (Listing<InventoryConfigurationOptionalFields|Mapping>)?
    Prefix: (String|Mapping)?
}

typealias MetricsStatus = "Disabled"|"Enabled"

open class Metrics {
    EventThreshold: (ReplicationTimeValue)?
    Status: MetricsStatus|Mapping
}

open class ReplicationRuleFilter {
    And: (ReplicationRuleAndOperator)?
    Prefix: (String|Mapping)?
    TagFilter: (TagFilter)?
}

typealias AccelerateConfigurationAccelerationStatus = "Enabled"|"Suspended"

open class AccelerateConfiguration {
    AccelerationStatus: AccelerateConfigurationAccelerationStatus|Mapping
}

typealias ServerSideEncryptionByDefaultSSEAlgorithm = "aws:kms"|"AES256"|"aws:kms:dsse"

open class ServerSideEncryptionByDefault {
    KMSMasterKeyID: (String|Mapping)?
    SSEAlgorithm: ServerSideEncryptionByDefaultSSEAlgorithm|Mapping
}

typealias TieringAccessTier = "ARCHIVE_ACCESS"|"DEEP_ARCHIVE_ACCESS"

open class Tiering {
    AccessTier: TieringAccessTier|Mapping
    Days: Int|Mapping
}

typealias ReplicationDestinationStorageClass = "DEEP_ARCHIVE"|"GLACIER"|"GLACIER_IR"|"INTELLIGENT_TIERING"|"ONEZONE_IA"|"REDUCED_REDUNDANCY"|"STANDARD"|"STANDARD_IA"

open class ReplicationDestination {
    ReplicationTime: (ReplicationTime)?
    StorageClass: (ReplicationDestinationStorageClass|Mapping)?
    AccessControlTranslation: (AccessControlTranslation)?
    Account: (String|Mapping)?
    Bucket: String|Mapping
    EncryptionConfiguration: (EncryptionConfiguration)?
    Metrics: (Metrics)?
}

typealias ReplicaModificationsStatus = "Enabled"|"Disabled"

open class ReplicaModifications {
    Status: ReplicaModificationsStatus|Mapping
}

open class BucketEncryption {
    ServerSideEncryptionConfiguration: Listing<ServerSideEncryptionRule>
}

open class TopicConfiguration {
    Event: String|Mapping
    Filter: (NotificationFilter)?
    Topic: String|Mapping
}

open class NotificationFilter {
    S3Key: S3KeyFilter
}

open class ObjectLockRule {
    DefaultRetention: (DefaultRetention)?
}

typealias ReplicationRuleStatus = "Disabled"|"Enabled"

open class ReplicationRule {
    Prefix: (String|Mapping)?
    Priority: (Int|Mapping)?
    SourceSelectionCriteria: (SourceSelectionCriteria)?
    Status: ReplicationRuleStatus|Mapping
    DeleteMarkerReplication: (DeleteMarkerReplication)?
    Destination: ReplicationDestination
    Filter: (ReplicationRuleFilter)?
    Id: (String|Mapping)?
}

typealias RedirectRuleProtocol = "http"|"https"

open class RedirectRule {
    ReplaceKeyPrefixWith: (String|Mapping)?
    ReplaceKeyWith: (String|Mapping)?
    HostName: (String|Mapping)?
    HttpRedirectCode: (String|Mapping)?
    Protocol: (RedirectRuleProtocol|Mapping)?
}

open class Arn {
}

open class StorageClassAnalysis {
    DataExport: (DataExport)?
}

open class LifecycleConfiguration {
    Rules: Listing<Rule>
}

open class NotificationConfiguration {
    TopicConfigurations: (Listing<TopicConfiguration>)?
    EventBridgeConfiguration: (EventBridgeConfiguration)?
    LambdaConfigurations: (Listing<LambdaConfiguration>)?
    QueueConfigurations: (Listing<QueueConfiguration>)?
}

open class DataExport {
    Destination: Destination
    OutputSchemaVersion: String|Mapping
}

open class RoutingRule {
    RoutingRuleCondition: (RoutingRuleCondition)?
    RedirectRule: RedirectRule
}

open class ReplicationConfiguration {
    Role: String|Mapping
    Rules: Listing<ReplicationRule>
}

open class TargetObjectKeyFormat {
}

open class MetricsConfiguration {
    Prefix: (String|Mapping)?
    TagFilters: (Listing<TagFilter>)?
    AccessPointArn: (String|Mapping)?
    Id: String|Mapping
}

open class S3KeyFilter {
    Rules: Listing<FilterRule>
}

open class LoggingConfiguration {
    DestinationBucketName: (String|Mapping)?
    LogFilePrefix: (String|Mapping)?
    TargetObjectKeyFormat: (TargetObjectKeyFormat)?
}

open class LambdaConfiguration {
    Event: String|Mapping
    Filter: (NotificationFilter)?
    Function: String|Mapping
}

open class SourceSelectionCriteria {
    ReplicaModifications: (ReplicaModifications)?
    SseKmsEncryptedObjects: (SseKmsEncryptedObjects)?
}

typealias VersioningConfigurationStatus = "Enabled"|"Suspended"

open class VersioningConfiguration {
    Status: VersioningConfigurationStatus|Mapping
}

typealias RedirectAllRequestsToProtocol = "http"|"https"

open class RedirectAllRequestsTo {
    HostName: String|Mapping
    Protocol: (RedirectAllRequestsToProtocol|Mapping)?
}

typealias NoncurrentVersionTransitionStorageClass = "DEEP_ARCHIVE"|"GLACIER"|"Glacier"|"GLACIER_IR"|"INTELLIGENT_TIERING"|"ONEZONE_IA"|"STANDARD_IA"

open class NoncurrentVersionTransition {
    TransitionInDays: Int|Mapping
    NewerNoncurrentVersions: (Int|Mapping)?
    StorageClass: NoncurrentVersionTransitionStorageClass|Mapping
}

typealias DefaultRetentionMode = "COMPLIANCE"|"GOVERNANCE"

open class DefaultRetention {
    Years: (Int|Mapping)?
    Days: (Int|Mapping)?
    Mode: (DefaultRetentionMode|Mapping)?
}

open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

open class AbortIncompleteMultipartUpload {
    DaysAfterInitiation: Int|Mapping
}

open class QueueConfiguration {
    Event: String|Mapping
    Filter: (NotificationFilter)?
    Queue: String|Mapping
}

open class ReplicationTimeValue {
    Minutes: Int|Mapping
}

typealias CorsRuleAllowedMethods = "GET"|"PUT"|"HEAD"|"POST"|"DELETE"

open class CorsRule {
    AllowedOrigins: Listing<String|Mapping>
    ExposedHeaders: (Listing<String|Mapping>)?
    Id: (String|Mapping)?
    MaxAge: (Int|Mapping)?
    AllowedHeaders: (Listing<String|Mapping>)?
    AllowedMethods: Listing<CorsRuleAllowedMethods|Mapping>
}

open class FilterRule {
    Name: String|Mapping
    Value: String|Mapping
}

open class PublicAccessBlockConfiguration {
    BlockPublicAcls: (Boolean|Mapping)?
    BlockPublicPolicy: (Boolean|Mapping)?
    IgnorePublicAcls: (Boolean|Mapping)?
    RestrictPublicBuckets: (Boolean|Mapping)?
}

open class iso8601UTC {
}

open class EventBridgeConfiguration {
    EventBridgeEnabled: Boolean|Mapping
}

typealias PartitionedPrefixPartitionDateSource = "EventTime"|"DeliveryTime"

open class PartitionedPrefix {
    PartitionDateSource: (PartitionedPrefixPartitionDateSource|Mapping)?
}

open class ReplicationRuleAndOperator {
    Prefix: (String|Mapping)?
    TagFilters: (Listing<TagFilter>)?
}

open class WebsiteConfiguration {
    IndexDocument: (String|Mapping)?
    RoutingRules: (Listing<RoutingRule>)?
    RedirectAllRequestsTo: (RedirectAllRequestsTo)?
    ErrorDocument: (String|Mapping)?
}

typealias RuleStatus = "Enabled"|"Disabled"

open class Rule {
    TagFilters: (Listing<TagFilter>)?
    NoncurrentVersionTransition: (NoncurrentVersionTransition)?
    ExpiredObjectDeleteMarker: (Boolean|Mapping)?
    Id: (String|Mapping)?
    NoncurrentVersionExpirationInDays: (Int|Mapping)?
    Status: RuleStatus|Mapping
    ObjectSizeLessThan: (String(matches(Regex(#"[0-9]+"#)))|Mapping)?
    Transitions: (Listing<Transition>)?
    ExpirationDate: (iso8601UTC)?
    ObjectSizeGreaterThan: (String(matches(Regex(#"[0-9]+"#)))|Mapping)?
    AbortIncompleteMultipartUpload: (AbortIncompleteMultipartUpload)?
    NoncurrentVersionExpiration: (NoncurrentVersionExpiration)?
    NoncurrentVersionTransitions: (Listing<NoncurrentVersionTransition>)?
    Prefix: (String|Mapping)?
    Transition: (Transition)?
    ExpirationInDays: (Int|Mapping)?
}

open class NoncurrentVersionExpiration {
    NoncurrentDays: Int|Mapping
    NewerNoncurrentVersions: (Int|Mapping)?
}

typealias TransitionStorageClass = "DEEP_ARCHIVE"|"GLACIER"|"Glacier"|"GLACIER_IR"|"INTELLIGENT_TIERING"|"ONEZONE_IA"|"STANDARD_IA"

open class Transition {
    StorageClass: TransitionStorageClass|Mapping
    TransitionDate: (iso8601UTC)?
    TransitionInDays: (Int|Mapping)?
}

open class ObjectLockConfiguration {
    ObjectLockEnabled: (String|Mapping)?
    Rule: (ObjectLockRule)?
}

open class Bucket extends cloudformation.Resource {

    Type = "AWS::S3::Bucket"

    hidden CorsConfiguration: (CorsConfiguration)?
    hidden MetricsConfigurations: (Listing<MetricsConfiguration>)?
    hidden ObjectLockEnabled: (Boolean|Mapping)?
    hidden VersioningConfiguration: (VersioningConfiguration)?
    hidden AccelerateConfiguration: (AccelerateConfiguration)?
    hidden BucketEncryption: (BucketEncryption)?
    hidden InventoryConfigurations: (Listing<InventoryConfiguration>)?
    hidden NotificationConfiguration: (NotificationConfiguration)?
    hidden OwnershipControls: (OwnershipControls)?
    hidden AnalyticsConfigurations: (Listing<AnalyticsConfiguration>)?
    hidden IntelligentTieringConfigurations: (Listing<IntelligentTieringConfiguration>)?
    hidden ObjectLockConfiguration: (ObjectLockConfiguration)?
    hidden BucketName: (String(matches(Regex(#"^[a-z0-9][a-z0-9//.//-]*[a-z0-9]$"#)))|Mapping)?
    hidden LifecycleConfiguration: (LifecycleConfiguration)?
    hidden PublicAccessBlockConfiguration: (PublicAccessBlockConfiguration)?
    hidden AccessControl: (BucketAccessControl|Mapping)?
    hidden ReplicationConfiguration: (ReplicationConfiguration)?
    hidden WebsiteConfiguration: (WebsiteConfiguration)?
    hidden Tags: (Listing<Tag>)?
    hidden LoggingConfiguration: (LoggingConfiguration)?

    Properties {
        ["CorsConfiguration"] = if (CorsConfiguration == null) null else CorsConfiguration
        ["MetricsConfigurations"] = if (MetricsConfigurations == null) null else MetricsConfigurations
        ["ObjectLockEnabled"] = if (ObjectLockEnabled == null) null else ObjectLockEnabled
        ["VersioningConfiguration"] = if (VersioningConfiguration == null) null else VersioningConfiguration
        ["AccelerateConfiguration"] = if (AccelerateConfiguration == null) null else AccelerateConfiguration
        ["BucketEncryption"] = if (BucketEncryption == null) null else BucketEncryption
        ["InventoryConfigurations"] = if (InventoryConfigurations == null) null else InventoryConfigurations
        ["NotificationConfiguration"] = if (NotificationConfiguration == null) null else NotificationConfiguration
        ["OwnershipControls"] = if (OwnershipControls == null) null else OwnershipControls
        ["AnalyticsConfigurations"] = if (AnalyticsConfigurations == null) null else AnalyticsConfigurations
        ["IntelligentTieringConfigurations"] = if (IntelligentTieringConfigurations == null) null else IntelligentTieringConfigurations
        ["ObjectLockConfiguration"] = if (ObjectLockConfiguration == null) null else ObjectLockConfiguration
        ["BucketName"] = if (BucketName == null) null else BucketName
        ["LifecycleConfiguration"] = if (LifecycleConfiguration == null) null else LifecycleConfiguration
        ["PublicAccessBlockConfiguration"] = if (PublicAccessBlockConfiguration == null) null else PublicAccessBlockConfiguration
        ["AccessControl"] = if (AccessControl == null) null else AccessControl
        ["ReplicationConfiguration"] = if (ReplicationConfiguration == null) null else ReplicationConfiguration
        ["WebsiteConfiguration"] = if (WebsiteConfiguration == null) null else WebsiteConfiguration
        ["Tags"] = if (Tags == null) null else Tags
        ["LoggingConfiguration"] = if (LoggingConfiguration == null) null else LoggingConfiguration
    }

}


typealias BucketAccessControl = "AuthenticatedRead"|"AwsExecRead"|"BucketOwnerFullControl"|"BucketOwnerRead"|"LogDeliveryWrite"|"Private"|"PublicRead"|"PublicReadWrite"
