/// AWS::SageMaker::ModelExplainabilityJobDefinition
///
/// Generated by rain build --pkl-class AWS::SageMaker::ModelExplainabilityJobDefinition
module aws.sagemaker.modelexplainabilityjobdefinition

import "../../cloudformation.pkl"

/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
open class VpcConfig {
    Subnets: Listing<String|Mapping>
    SecurityGroupIds: Listing<String|Mapping>
}

/// The time offsets in ISO duration format
open class MonitoringTimeOffsetString {
}

/// The CSV format
open class Csv {
    Header: (Boolean|Mapping)?
}

/// Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
open class ModelExplainabilityBaselineConfig {
    BaseliningJobName: (ProcessingJobName)?
    ConstraintsResource: (ConstraintsResource)?
}

/// The baseline constraints resource for a monitoring job.
open class ConstraintsResource {
    S3Uri: (S3Uri)?
}

/// The inputs for a monitoring job.
open class ModelExplainabilityJobInput {
    EndpointInput: (EndpointInput)?
    BatchTransformInput: (BatchTransformInput)?
}

/// The output configuration for monitoring jobs.
open class MonitoringOutputConfig {
    MonitoringOutputs: Listing<MonitoringOutput>
    KmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
open class NetworkConfig {
    EnableInterContainerTrafficEncryption: (Boolean|Mapping)?
    EnableNetworkIsolation: (Boolean|Mapping)?
    VpcConfig: (VpcConfig)?
}

/// A flag indicating if the dataset format is Parquet
open class Parquet {
}

/// Container image configuration object for the monitoring job.
open class ModelExplainabilityAppSpecification {
    ImageUri: String(matches(Regex(#".*"#)))|Mapping
    ConfigUri: S3Uri
    Environment: (Dynamic)?
}

typealias S3OutputS3UploadMode = "Continuous"|"EndOfJob"

/// Information about where and how to store the results of a monitoring job.
open class S3Output {
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3UploadMode: (S3OutputS3UploadMode|Mapping)?
}

/// The name of the job definition.
open class JobDefinitionName {
}

/// The name of a processing job
open class ProcessingJobName {
}

/// The Json format
open class Json {
    Line: (Boolean|Mapping)?
}

/// A key-value pair to associate with a resource.
open class Tag {
    Key: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
    Value: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
}

/// The dataset format of the data to monitor
open class DatasetFormat {
    Csv: (Csv)?
    Json: (Json)?
    Parquet: (Parquet)?
}

/// The Amazon S3 URI.
open class S3Uri {
}

typealias BatchTransformInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias BatchTransformInputS3InputMode = "Pipe"|"File"

/// The batch transform input for a monitoring job.
open class BatchTransformInput {
    DatasetFormat: DatasetFormat
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3DataDistributionType: (BatchTransformInputS3DataDistributionType|Mapping)?
    S3InputMode: (BatchTransformInputS3InputMode|Mapping)?
    FeaturesAttribute: (String|Mapping)?
    InferenceAttribute: (String|Mapping)?
    ProbabilityAttribute: (String|Mapping)?
    DataCapturedDestinationS3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// The output object for a monitoring job.
open class MonitoringOutput {
    S3Output: S3Output
}

/// Identifies the resources to deploy for a monitoring job.
open class MonitoringResources {
    ClusterConfig: ClusterConfig
}

/// Configuration for the cluster used to run model monitoring jobs.
open class ClusterConfig {
    InstanceType: String|Mapping
    VolumeKmsKeyId: (String|Mapping)?
    VolumeSizeInGB: Int|Mapping
    InstanceCount: Int|Mapping
}

typealias EndpointInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias EndpointInputS3InputMode = "Pipe"|"File"

/// The endpoint for a monitoring job.
open class EndpointInput {
    ProbabilityAttribute: (String|Mapping)?
    EndpointName: EndpointName
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3DataDistributionType: (EndpointInputS3DataDistributionType|Mapping)?
    S3InputMode: (EndpointInputS3InputMode|Mapping)?
    FeaturesAttribute: (String|Mapping)?
    InferenceAttribute: (String|Mapping)?
}

/// Specifies a time limit for how long the monitoring job is allowed to run.
open class StoppingCondition {
    MaxRuntimeInSeconds: Int|Mapping
}

/// The name of the endpoint used to run the monitoring job.
open class EndpointName {
}

/// Resource Type definition for AWS::SageMaker::ModelExplainabilityJobDefinition
open class ModelExplainabilityJobDefinition extends cloudformation.Resource {

    Type = "AWS::SageMaker::ModelExplainabilityJobDefinition"


    /// 
    hidden ModelExplainabilityBaselineConfig: (ModelExplainabilityBaselineConfig)?

    /// 
    hidden ModelExplainabilityAppSpecification: ModelExplainabilityAppSpecification

    /// 
    hidden JobDefinitionName: (JobDefinitionName)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden JobResources: MonitoringResources

    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    hidden RoleArn: String(matches(Regex(#"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping

    /// 
    hidden EndpointName: (EndpointName)?

    /// 
    hidden StoppingCondition: (StoppingCondition)?

    /// 
    hidden ModelExplainabilityJobInput: ModelExplainabilityJobInput

    /// 
    hidden ModelExplainabilityJobOutputConfig: MonitoringOutputConfig

    /// 
    hidden NetworkConfig: (NetworkConfig)?

    Properties {
        ["ModelExplainabilityBaselineConfig"] = if (ModelExplainabilityBaselineConfig == null) null else ModelExplainabilityBaselineConfig
        ["ModelExplainabilityAppSpecification"] = if (ModelExplainabilityAppSpecification == null) null else ModelExplainabilityAppSpecification
        ["JobDefinitionName"] = if (JobDefinitionName == null) null else JobDefinitionName
        ["Tags"] = if (Tags == null) null else Tags
        ["JobResources"] = if (JobResources == null) null else JobResources
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["EndpointName"] = if (EndpointName == null) null else EndpointName
        ["StoppingCondition"] = if (StoppingCondition == null) null else StoppingCondition
        ["ModelExplainabilityJobInput"] = if (ModelExplainabilityJobInput == null) null else ModelExplainabilityJobInput
        ["ModelExplainabilityJobOutputConfig"] = if (ModelExplainabilityJobOutputConfig == null) null else ModelExplainabilityJobOutputConfig
        ["NetworkConfig"] = if (NetworkConfig == null) null else NetworkConfig
    }

}
