/// AWS::SageMaker::ModelPackage
///
/// Generated by rain build --pkl-class AWS::SageMaker::ModelPackage
module aws.sagemaker.modelpackage

import "../../cloudformation.pkl"

/// Represents a Metric Source Object.
open class MetricsSource {
    ContentDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    ContentType: String(matches(Regex(#".*"#)))|Mapping
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

typealias TransformOutputAssembleWith = "None"|"Line"

/// Describes the results of a transform job.
open class TransformOutput {
    Accept: (String(matches(Regex(#".*"#)))|Mapping)?
    KmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
    S3OutputPath: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    AssembleWith: (TransformOutputAssembleWith|Mapping)?
}

/// Details about the current status of the model package.
open class ModelPackageStatusDetails {
    ValidationStatuses: (Listing<ModelPackageStatusItem>)?
}

/// The machine learning task your model package accomplishes.
open class Task {
}

/// Represents the drift check baselines that can be used when the model monitor is set using the model package.
open class DriftCheckBaselines {
    Bias: (DriftCheckBias)?
    Explainability: (DriftCheckExplainability)?
    ModelDataQuality: (DriftCheckModelDataQuality)?
    ModelQuality: (DriftCheckModelQuality)?
}

/// Metadata properties of the tracking entity, trial, or trial component.
open class MetadataProperties {
    CommitId: (String(matches(Regex(#".*"#)))|Mapping)?
    GeneratedBy: (String(matches(Regex(#".*"#)))|Mapping)?
    ProjectId: (String(matches(Regex(#".*"#)))|Mapping)?
    Repository: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
open class ValidationProfile {
    TransformJobDefinition: TransformJobDefinition
    ProfileName: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
}

/// The current status of the model package.
open class ModelPackageStatus {
}

/// Instance types on which a transformation job can be run or on which an endpoint can be deployed.
open class TransformInstanceType {
}

/// Describes the Docker container for the model package.
open class ModelPackageContainerDefinition {
    ContainerHostname: (String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}"#)))|Mapping)?
    Image: String(matches(Regex(#"[\S]{1,255}"#)))|Mapping
    ImageDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    Framework: (String|Mapping)?
    FrameworkVersion: (String(matches(Regex(#"[0-9]\.[A-Za-z0-9.]+"#)))|Mapping)?
    Environment: (Environment)?
    ModelInput: (Dynamic)?
    ModelDataUrl: (String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping)?
    NearestModelName: (String|Mapping)?
}

/// Contains explainability metrics for a model.
open class Explainability {
    Report: (MetricsSource)?
}

/// The machine learning domain of the model package you specified.
open class Domain {
}

/// Sets the environment variables in the Docker container
open class Environment {
}

/// A key-value pair to associate with a resource.
open class Tag {
    Key: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
    Value: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
}

/// Represents a File Source Object.
open class FileSource {
    ContentDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    ContentType: (String(matches(Regex(#".*"#)))|Mapping)?
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// The name of the model package group.
open class ModelPackageGroupName {
}

typealias TransformInputSplitType = "None"|"TFRecord"|"Line"|"RecordIO"

typealias TransformInputCompressionType = "None"|"Gzip"

/// Describes the input source of a transform job and the way the transform job consumes it.
open class TransformInput {
    DataSource: DataSource
    SplitType: (TransformInputSplitType|Mapping)?
    CompressionType: (TransformInputCompressionType|Mapping)?
    ContentType: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// An array of additional Inference Specification objects.
open class AdditionalInferenceSpecifications {
}

/// Whether to certify the model package for listing on AWS Marketplace.
open class CertifyForMarketplace {
}

/// The approval status of the model package.
open class ModelApprovalStatus {
}

/// Contains bias metrics for a model.
open class Bias {
    Report: (MetricsSource)?
    PreTrainingReport: (MetricsSource)?
    PostTrainingReport: (MetricsSource)?
}

/// The time at which the model package was created.
open class CreationTime {
}

/// The time at which the model package was last modified.
open class LastModifiedTime {
}

/// The supported MIME type for the input data.
open class ContentType {
}

/// Contains explainability metrics for a model.
open class DriftCheckExplainability {
    Constraints: (MetricsSource)?
    ConfigFile: (FileSource)?
}

/// Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
open class ValidationSpecification {
    ValidationProfiles: Listing<ValidationProfile>
    ValidationRole: String(matches(Regex(#"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping
}

/// Describes the resources, including ML instance types and ML instance count, to use for transform job.
open class TransformResources {
    InstanceCount: Int|Mapping
    InstanceType: String|Mapping
    VolumeKmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// The metadata properties associated with the model package versions.
open class CustomerMetadataProperties {
}

/// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
open class DriftCheckBias {
    PostTrainingConstraints: (MetricsSource)?
    PreTrainingConstraints: (MetricsSource)?
    ConfigFile: (FileSource)?
}

/// The description of the model package.
open class ModelPackageDescription {
}

/// Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
open class DriftCheckModelDataQuality {
    Constraints: (MetricsSource)?
    Statistics: (MetricsSource)?
}

/// The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored pointing to single gzip compressed tar archive.
open class SamplePayloadUrl {
}

/// Describes the input source of a transform job and the way the transform job consumes it.
open class DataSource {
    S3DataSource: S3DataSource
}

typealias S3DataSourceS3DataType = "ManifestFile"|"S3Prefix"|"AugmentedManifestFile"

/// Describes the S3 data source.
open class S3DataSource {
    S3DataType: S3DataSourceS3DataType|Mapping
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// A unique token that guarantees that the call to this API is idempotent.
open class ClientToken {
}

/// Indicates if you want to skip model validation.
open class SkipModelValidation {
}

typealias TransformJobDefinitionBatchStrategy = "MultiRecord"|"SingleRecord"

/// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
open class TransformJobDefinition {
    Environment: (Environment)?
    BatchStrategy: (TransformJobDefinitionBatchStrategy|Mapping)?
    MaxConcurrentTransforms: (Int|Mapping)?
    MaxPayloadInMB: (Int|Mapping)?
    TransformInput: TransformInput
    TransformOutput: TransformOutput
    TransformResources: TransformResources
}

/// The name or arn of the model package.
open class ModelPackageName {
}

/// Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
open class AdditionalInferenceSpecificationDefinition {
    SupportedContentTypes: (Listing<ContentType>)?
    SupportedRealtimeInferenceInstanceTypes: (Listing<InferenceInstanceType>)?
    SupportedResponseMIMETypes: (Listing<ResponseMIMEType>)?
    SupportedTransformInstanceTypes: (Listing<TransformInstanceType>)?
    Containers: Listing<ModelPackageContainerDefinition>
    Description: (String(matches(Regex(#".*"#)))|Mapping)?
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
}

/// A structure that contains model metrics reports.
open class ModelMetrics {
    ModelDataQuality: (ModelDataQuality)?
    ModelQuality: (ModelQuality)?
    Bias: (Bias)?
    Explainability: (Explainability)?
}

/// Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
open class SourceAlgorithm {
    AlgorithmName: String(matches(Regex(#"(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$"#)))|Mapping
    ModelDataUrl: (String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping)?
}

/// Instance type that is used to generate inferences in real-time
open class InferenceInstanceType {
}

/// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
open class DriftCheckModelQuality {
    Constraints: (MetricsSource)?
    Statistics: (MetricsSource)?
}

/// Details about inference jobs that can be run with models based on this model package.
open class InferenceSpecification {
    SupportedTransformInstanceTypes: (Listing<TransformInstanceType>)?
    Containers: Listing<ModelPackageContainerDefinition>
    SupportedContentTypes: Listing<ContentType>
    SupportedRealtimeInferenceInstanceTypes: (Listing<InferenceInstanceType>)?
    SupportedResponseMIMETypes: Listing<ResponseMIMEType>
}

typealias ModelPackageStatusItemStatus = "NotStarted"|"Failed"|"InProgress"|"Completed"

/// Represents the overall status of a model package.
open class ModelPackageStatusItem {
    FailureReason: (String|Mapping)?
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
    Status: ModelPackageStatusItemStatus|Mapping
}

/// Metrics that measure the quality of the input data for a model.
open class ModelDataQuality {
    Constraints: (MetricsSource)?
    Statistics: (MetricsSource)?
}

/// Metrics that measure the quality of a model.
open class ModelQuality {
    Constraints: (MetricsSource)?
    Statistics: (MetricsSource)?
}

/// Details about the algorithm that was used to create the model package.
open class SourceAlgorithmSpecification {
    SourceAlgorithms: Listing<SourceAlgorithm>
}

/// A description provided for the model approval.
open class ApprovalDescription {
}

/// The supported MIME types for the output data.
open class ResponseMIMEType {
}

/// The Amazon Resource Name (ARN) of the model package group.
open class ModelPackageArn {
}

/// The version of the model package.
open class ModelPackageVersion {
}

/// Resource Type definition for AWS::SageMaker::ModelPackage
open class ModelPackage extends cloudformation.Resource {

    Type = "AWS::SageMaker::ModelPackage"


    /// 
    hidden ValidationSpecification: (ValidationSpecification)?

    /// 
    hidden LastModifiedTime: (LastModifiedTime)?

    /// 
    hidden Task: (Task)?

    /// 
    hidden AdditionalInferenceSpecificationsToAdd: (AdditionalInferenceSpecifications)?

    /// 
    hidden Domain: (Domain)?

    /// 
    hidden MetadataProperties: (MetadataProperties)?

    /// 
    hidden SkipModelValidation: (SkipModelValidation)?

    /// 
    hidden ApprovalDescription: (ApprovalDescription)?

    /// 
    hidden ClientToken: (ClientToken)?

    /// 
    hidden ModelMetrics: (ModelMetrics)?

    /// 
    hidden ModelPackageDescription: (ModelPackageDescription)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<Tag>)?

    /// 
    hidden ModelApprovalStatus: (ModelApprovalStatus)?

    /// 
    hidden DriftCheckBaselines: (DriftCheckBaselines)?

    /// 
    hidden SourceAlgorithmSpecification: (SourceAlgorithmSpecification)?

    /// 
    hidden ModelPackageStatusDetails: (ModelPackageStatusDetails)?

    /// 
    hidden CertifyForMarketplace: (CertifyForMarketplace)?

    /// 
    hidden ModelPackageGroupName: (ModelPackageGroupName)?

    /// 
    hidden ModelPackageName: (ModelPackageName)?

    /// 
    hidden InferenceSpecification: (InferenceSpecification)?

    /// 
    hidden CustomerMetadataProperties: (CustomerMetadataProperties)?

    /// 
    hidden SamplePayloadUrl: (SamplePayloadUrl)?

    /// 
    hidden ModelPackageVersion: (ModelPackageVersion)?

    /// 
    hidden AdditionalInferenceSpecifications: (AdditionalInferenceSpecifications)?

    Properties {
        ["ValidationSpecification"] = if (ValidationSpecification == null) null else ValidationSpecification
        ["LastModifiedTime"] = if (LastModifiedTime == null) null else LastModifiedTime
        ["Task"] = if (Task == null) null else Task
        ["AdditionalInferenceSpecificationsToAdd"] = if (AdditionalInferenceSpecificationsToAdd == null) null else AdditionalInferenceSpecificationsToAdd
        ["Domain"] = if (Domain == null) null else Domain
        ["MetadataProperties"] = if (MetadataProperties == null) null else MetadataProperties
        ["SkipModelValidation"] = if (SkipModelValidation == null) null else SkipModelValidation
        ["ApprovalDescription"] = if (ApprovalDescription == null) null else ApprovalDescription
        ["ClientToken"] = if (ClientToken == null) null else ClientToken
        ["ModelMetrics"] = if (ModelMetrics == null) null else ModelMetrics
        ["ModelPackageDescription"] = if (ModelPackageDescription == null) null else ModelPackageDescription
        ["Tags"] = if (Tags == null) null else Tags
        ["ModelApprovalStatus"] = if (ModelApprovalStatus == null) null else ModelApprovalStatus
        ["DriftCheckBaselines"] = if (DriftCheckBaselines == null) null else DriftCheckBaselines
        ["SourceAlgorithmSpecification"] = if (SourceAlgorithmSpecification == null) null else SourceAlgorithmSpecification
        ["ModelPackageStatusDetails"] = if (ModelPackageStatusDetails == null) null else ModelPackageStatusDetails
        ["CertifyForMarketplace"] = if (CertifyForMarketplace == null) null else CertifyForMarketplace
        ["ModelPackageGroupName"] = if (ModelPackageGroupName == null) null else ModelPackageGroupName
        ["ModelPackageName"] = if (ModelPackageName == null) null else ModelPackageName
        ["InferenceSpecification"] = if (InferenceSpecification == null) null else InferenceSpecification
        ["CustomerMetadataProperties"] = if (CustomerMetadataProperties == null) null else CustomerMetadataProperties
        ["SamplePayloadUrl"] = if (SamplePayloadUrl == null) null else SamplePayloadUrl
        ["ModelPackageVersion"] = if (ModelPackageVersion == null) null else ModelPackageVersion
        ["AdditionalInferenceSpecifications"] = if (AdditionalInferenceSpecifications == null) null else AdditionalInferenceSpecifications
    }

}
