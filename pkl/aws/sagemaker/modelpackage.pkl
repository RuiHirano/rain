/// AWS::SageMaker::ModelPackage
///
/// Generated by rain build --pkl-class AWS::SageMaker::ModelPackage
module aws.sagemaker.modelpackage

import "../../cloudformation.pkl"

typealias ModelPackageTask = String|Mapping


typealias ModelPackageDomain = String|Mapping


typealias ModelPackageResponseMIMEType = String|Mapping


/// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
open class ModelPackageDriftCheckBias {
    PostTrainingConstraints: (ModelPackageMetricsSource)?
    PreTrainingConstraints: (ModelPackageMetricsSource)?
    ConfigFile: (ModelPackageFileSource)?
}

/// Contains bias metrics for a model.
open class ModelPackageBias {
    Report: (ModelPackageMetricsSource)?
    PreTrainingReport: (ModelPackageMetricsSource)?
    PostTrainingReport: (ModelPackageMetricsSource)?
}

/// Describes the Docker container for the model package.
open class ModelPackageModelPackageContainerDefinition {
    ModelInput: (Dynamic)?
    ImageDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    ModelDataUrl: (String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping)?
    Framework: (String|Mapping)?
    Environment: (ModelPackageEnvironment)?
    Image: String(matches(Regex(#"[\S]{1,255}"#)))|Mapping
    FrameworkVersion: (String(matches(Regex(#"[0-9]\.[A-Za-z0-9.]+"#)))|Mapping)?
    NearestModelName: (String|Mapping)?
    ContainerHostname: (String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}"#)))|Mapping)?
}

/// Details about inference jobs that can be run with models based on this model package.
open class ModelPackageInferenceSpecification {
    SupportedContentTypes: Listing<ModelPackageContentType>
    SupportedRealtimeInferenceInstanceTypes: (Listing<ModelPackageInferenceInstanceType>)?
    SupportedResponseMIMETypes: Listing<ModelPackageResponseMIMEType>
    SupportedTransformInstanceTypes: (Listing<ModelPackageTransformInstanceType>)?
    Containers: Listing<ModelPackageModelPackageContainerDefinition>
}

/// A structure that contains model metrics reports.
open class ModelPackageModelMetrics {
    Bias: (ModelPackageBias)?
    Explainability: (ModelPackageExplainability)?
    ModelDataQuality: (ModelPackageModelDataQuality)?
    ModelQuality: (ModelPackageModelQuality)?
}

typealias ModelPackageModelPackageStatus = String|Mapping


typealias TransformJobDefinitionBatchStrategy = "MultiRecord"|"SingleRecord"

/// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
open class ModelPackageTransformJobDefinition {
    MaxConcurrentTransforms: (Int|Mapping)?
    MaxPayloadInMB: (Int|Mapping)?
    TransformInput: ModelPackageTransformInput
    TransformOutput: ModelPackageTransformOutput
    TransformResources: ModelPackageTransformResources
    Environment: (ModelPackageEnvironment)?
    BatchStrategy: (TransformJobDefinitionBatchStrategy|Mapping)?
}

/// Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
open class ModelPackageSourceAlgorithm {
    AlgorithmName: String(matches(Regex(#"(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$"#)))|Mapping
    ModelDataUrl: (String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping)?
}

typealias ModelPackageSkipModelValidation = String|Mapping


/// Metadata properties of the tracking entity, trial, or trial component.
open class ModelPackageMetadataProperties {
    CommitId: (String(matches(Regex(#".*"#)))|Mapping)?
    GeneratedBy: (String(matches(Regex(#".*"#)))|Mapping)?
    ProjectId: (String(matches(Regex(#".*"#)))|Mapping)?
    Repository: (String(matches(Regex(#".*"#)))|Mapping)?
}

typealias ModelPackageModelPackageArn = String|Mapping


typealias ModelPackageModelPackageVersion = Int|Mapping


typealias ModelPackageEnvironment = Mapping<String, Any>


typealias ModelPackageModelPackageGroupName = String|Mapping


/// Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
open class ModelPackageValidationSpecification {
    ValidationProfiles: Listing<ModelPackageValidationProfile>
    ValidationRole: String(matches(Regex(#"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping
}

/// Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
open class ModelPackageDriftCheckModelDataQuality {
    Constraints: (ModelPackageMetricsSource)?
    Statistics: (ModelPackageMetricsSource)?
}

/// Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
open class ModelPackageValidationProfile {
    TransformJobDefinition: ModelPackageTransformJobDefinition
    ProfileName: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
}

typealias TransformInputCompressionType = "None"|"Gzip"

typealias TransformInputSplitType = "None"|"TFRecord"|"Line"|"RecordIO"

/// Describes the input source of a transform job and the way the transform job consumes it.
open class ModelPackageTransformInput {
    CompressionType: (TransformInputCompressionType|Mapping)?
    ContentType: (String(matches(Regex(#".*"#)))|Mapping)?
    DataSource: ModelPackageDataSource
    SplitType: (TransformInputSplitType|Mapping)?
}

/// Details about the current status of the model package.
open class ModelPackageModelPackageStatusDetails {
    ValidationStatuses: (Listing<ModelPackageModelPackageStatusItem>)?
}

typealias TransformOutputAssembleWith = "None"|"Line"

/// Describes the results of a transform job.
open class ModelPackageTransformOutput {
    Accept: (String(matches(Regex(#".*"#)))|Mapping)?
    KmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
    S3OutputPath: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    AssembleWith: (TransformOutputAssembleWith|Mapping)?
}

/// Metrics that measure the quality of a model.
open class ModelPackageModelQuality {
    Constraints: (ModelPackageMetricsSource)?
    Statistics: (ModelPackageMetricsSource)?
}

typealias ModelPackageCreationTime = String|Mapping


typealias ModelPackageSamplePayloadUrl = String|Mapping


typealias ModelPackageInferenceInstanceType = String|Mapping


/// Represents a Metric Source Object.
open class ModelPackageMetricsSource {
    ContentDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    ContentType: String(matches(Regex(#".*"#)))|Mapping
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// Represents the drift check baselines that can be used when the model monitor is set using the model package.
open class ModelPackageDriftCheckBaselines {
    Bias: (ModelPackageDriftCheckBias)?
    Explainability: (ModelPackageDriftCheckExplainability)?
    ModelDataQuality: (ModelPackageDriftCheckModelDataQuality)?
    ModelQuality: (ModelPackageDriftCheckModelQuality)?
}

/// A key-value pair to associate with a resource.
open class ModelPackageTag {
    Key: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
    Value: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
}

typealias ModelPackageCertifyForMarketplace = Boolean|Mapping


/// Represents a File Source Object.
open class ModelPackageFileSource {
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    ContentDigest: (String(matches(Regex(#"^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$"#)))|Mapping)?
    ContentType: (String(matches(Regex(#".*"#)))|Mapping)?
}

typealias ModelPackageLastModifiedTime = String|Mapping


typealias ModelPackageClientToken = String|Mapping


/// Describes the resources, including ML instance types and ML instance count, to use for transform job.
open class ModelPackageTransformResources {
    VolumeKmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
    InstanceCount: Int|Mapping
    InstanceType: String|Mapping
}

/// Describes the input source of a transform job and the way the transform job consumes it.
open class ModelPackageDataSource {
    S3DataSource: ModelPackageS3DataSource
}

typealias ModelPackageStatusItemStatus = "NotStarted"|"Failed"|"InProgress"|"Completed"

/// Represents the overall status of a model package.
open class ModelPackageModelPackageStatusItem {
    FailureReason: (String|Mapping)?
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
    Status: ModelPackageStatusItemStatus|Mapping
}

typealias ModelPackageModelPackageName = String|Mapping


typealias ModelPackageAdditionalInferenceSpecifications = Listing<(ModelPackageAdditionalInferenceSpecificationDefinition)?>


typealias ModelPackageModelPackageDescription = String|Mapping


typealias ModelPackageTransformInstanceType = String|Mapping


typealias ModelPackageContentType = String|Mapping


/// Metrics that measure the quality of the input data for a model.
open class ModelPackageModelDataQuality {
    Constraints: (ModelPackageMetricsSource)?
    Statistics: (ModelPackageMetricsSource)?
}

typealias ModelPackageCustomerMetadataProperties = Mapping<String, Any>


/// Contains explainability metrics for a model.
open class ModelPackageDriftCheckExplainability {
    ConfigFile: (ModelPackageFileSource)?
    Constraints: (ModelPackageMetricsSource)?
}

typealias S3DataSourceS3DataType = "ManifestFile"|"S3Prefix"|"AugmentedManifestFile"

/// Describes the S3 data source.
open class ModelPackageS3DataSource {
    S3DataType: S3DataSourceS3DataType|Mapping
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// Contains explainability metrics for a model.
open class ModelPackageExplainability {
    Report: (ModelPackageMetricsSource)?
}

/// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
open class ModelPackageDriftCheckModelQuality {
    Constraints: (ModelPackageMetricsSource)?
    Statistics: (ModelPackageMetricsSource)?
}

typealias ModelPackageApprovalDescription = String|Mapping


/// Details about the algorithm that was used to create the model package.
open class ModelPackageSourceAlgorithmSpecification {
    SourceAlgorithms: Listing<ModelPackageSourceAlgorithm>
}

/// Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
open class ModelPackageAdditionalInferenceSpecificationDefinition {
    SupportedResponseMIMETypes: (Listing<ModelPackageResponseMIMEType>)?
    SupportedTransformInstanceTypes: (Listing<ModelPackageTransformInstanceType>)?
    Containers: Listing<ModelPackageModelPackageContainerDefinition>
    Description: (String(matches(Regex(#".*"#)))|Mapping)?
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$"#)))|Mapping
    SupportedContentTypes: (Listing<ModelPackageContentType>)?
    SupportedRealtimeInferenceInstanceTypes: (Listing<ModelPackageInferenceInstanceType>)?
}

typealias ModelPackageModelApprovalStatus = String|Mapping


/// Resource Type definition for AWS::SageMaker::ModelPackage
open class ModelPackage extends cloudformation.Resource {

    Type = "AWS::SageMaker::ModelPackage"


    /// 
    hidden ModelPackageName: (ModelPackageModelPackageName)?

    /// 
    hidden SamplePayloadUrl: (ModelPackageSamplePayloadUrl)?

    /// 
    hidden SkipModelValidation: (ModelPackageSkipModelValidation)?

    /// 
    hidden ApprovalDescription: (ModelPackageApprovalDescription)?

    /// 
    hidden CustomerMetadataProperties: (ModelPackageCustomerMetadataProperties)?

    /// 
    hidden ModelPackageStatusDetails: (ModelPackageModelPackageStatusDetails)?

    /// 
    hidden AdditionalInferenceSpecifications: (ModelPackageAdditionalInferenceSpecifications)?

    /// 
    hidden CertifyForMarketplace: (ModelPackageCertifyForMarketplace)?

    /// 
    hidden AdditionalInferenceSpecificationsToAdd: (ModelPackageAdditionalInferenceSpecifications)?

    /// 
    hidden MetadataProperties: (ModelPackageMetadataProperties)?

    /// 
    hidden Task: (ModelPackageTask)?

    /// 
    hidden ClientToken: (ModelPackageClientToken)?

    /// 
    hidden LastModifiedTime: (ModelPackageLastModifiedTime)?

    /// 
    hidden ModelPackageDescription: (ModelPackageModelPackageDescription)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<ModelPackageTag>)?

    /// 
    hidden ModelPackageVersion: (ModelPackageModelPackageVersion)?

    /// 
    hidden ValidationSpecification: (ModelPackageValidationSpecification)?

    /// 
    hidden Domain: (ModelPackageDomain)?

    /// 
    hidden DriftCheckBaselines: (ModelPackageDriftCheckBaselines)?

    /// 
    hidden InferenceSpecification: (ModelPackageInferenceSpecification)?

    /// 
    hidden ModelApprovalStatus: (ModelPackageModelApprovalStatus)?

    /// 
    hidden ModelMetrics: (ModelPackageModelMetrics)?

    /// 
    hidden ModelPackageGroupName: (ModelPackageModelPackageGroupName)?

    /// 
    hidden SourceAlgorithmSpecification: (ModelPackageSourceAlgorithmSpecification)?

    Properties {
        ["ModelPackageName"] = if (ModelPackageName == null) null else ModelPackageName
        ["SamplePayloadUrl"] = if (SamplePayloadUrl == null) null else SamplePayloadUrl
        ["SkipModelValidation"] = if (SkipModelValidation == null) null else SkipModelValidation
        ["ApprovalDescription"] = if (ApprovalDescription == null) null else ApprovalDescription
        ["CustomerMetadataProperties"] = if (CustomerMetadataProperties == null) null else CustomerMetadataProperties
        ["ModelPackageStatusDetails"] = if (ModelPackageStatusDetails == null) null else ModelPackageStatusDetails
        ["AdditionalInferenceSpecifications"] = if (AdditionalInferenceSpecifications == null) null else AdditionalInferenceSpecifications
        ["CertifyForMarketplace"] = if (CertifyForMarketplace == null) null else CertifyForMarketplace
        ["AdditionalInferenceSpecificationsToAdd"] = if (AdditionalInferenceSpecificationsToAdd == null) null else AdditionalInferenceSpecificationsToAdd
        ["MetadataProperties"] = if (MetadataProperties == null) null else MetadataProperties
        ["Task"] = if (Task == null) null else Task
        ["ClientToken"] = if (ClientToken == null) null else ClientToken
        ["LastModifiedTime"] = if (LastModifiedTime == null) null else LastModifiedTime
        ["ModelPackageDescription"] = if (ModelPackageDescription == null) null else ModelPackageDescription
        ["Tags"] = if (Tags == null) null else Tags
        ["ModelPackageVersion"] = if (ModelPackageVersion == null) null else ModelPackageVersion
        ["ValidationSpecification"] = if (ValidationSpecification == null) null else ValidationSpecification
        ["Domain"] = if (Domain == null) null else Domain
        ["DriftCheckBaselines"] = if (DriftCheckBaselines == null) null else DriftCheckBaselines
        ["InferenceSpecification"] = if (InferenceSpecification == null) null else InferenceSpecification
        ["ModelApprovalStatus"] = if (ModelApprovalStatus == null) null else ModelApprovalStatus
        ["ModelMetrics"] = if (ModelMetrics == null) null else ModelMetrics
        ["ModelPackageGroupName"] = if (ModelPackageGroupName == null) null else ModelPackageGroupName
        ["SourceAlgorithmSpecification"] = if (SourceAlgorithmSpecification == null) null else SourceAlgorithmSpecification
    }

}
