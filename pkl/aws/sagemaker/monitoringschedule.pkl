/// AWS::SageMaker::MonitoringSchedule
///
/// Generated by rain build --pkl-class AWS::SageMaker::MonitoringSchedule
module aws.sagemaker.monitoringschedule

import "../../cloudformation.pkl"

/// Container image configuration object for the monitoring job.
open class MonitoringAppSpecification {
    ContainerArguments: (Listing<ContainerArgument>)?
    ContainerEntrypoint: (Listing<String|Mapping>)?
    ImageUri: String(matches(Regex(#".*"#)))|Mapping
    PostAnalyticsProcessorSourceUri: (S3Uri)?
    RecordPreprocessorSourceUri: (S3Uri)?
}

/// Configuration for the cluster used to run model monitoring jobs.
open class ClusterConfig {
    VolumeSizeInGB: Int|Mapping
    InstanceCount: Int|Mapping
    InstanceType: String|Mapping
    VolumeKmsKeyId: (String|Mapping)?
}

/// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
open class NetworkConfig {
    VpcConfig: (VpcConfig)?
    EnableInterContainerTrafficEncryption: (Boolean|Mapping)?
    EnableNetworkIsolation: (Boolean|Mapping)?
}

/// Analysis time in ISO duration format
open class DataAnalysisTimeString {
}

/// The baseline constraints resource for a monitoring job.
open class ConstraintsResource {
    S3Uri: (S3Uri)?
}

typealias EndpointInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias EndpointInputS3InputMode = "Pipe"|"File"

/// The endpoint for a monitoring job.
open class EndpointInput {
    S3DataDistributionType: (EndpointInputS3DataDistributionType|Mapping)?
    S3InputMode: (EndpointInputS3InputMode|Mapping)?
    ExcludeFeaturesAttribute: (String|Mapping)?
    EndpointName: EndpointName
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
}

/// The output object for a monitoring job.
open class MonitoringOutput {
    S3Output: S3Output
}

/// A key-value pair to associate with a resource.
open class Tag {
    Key: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
    Value: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
}

/// The name of the endpoint used to run the monitoring job.
open class EndpointName {
}

/// The dataset format of the data to monitor
open class DatasetFormat {
    Csv: (Csv)?
    Json: (Json)?
    Parquet: (Parquet)?
}

/// The Json format
open class Json {
    Line: (Boolean|Mapping)?
}

/// A flag indicating if the dataset format is Parquet
open class Parquet {
}

/// The inputs for a monitoring job.
open class MonitoringInput {
    BatchTransformInput: (BatchTransformInput)?
    EndpointInput: (EndpointInput)?
}

typealias S3OutputS3UploadMode = "Continuous"|"EndOfJob"

/// Information about where and how to store the results of a monitoring job.
open class S3Output {
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3UploadMode: (S3OutputS3UploadMode|Mapping)?
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

/// Identifies the resources to deploy for a monitoring job.
open class MonitoringResources {
    ClusterConfig: ClusterConfig
}

/// The CSV format
open class Csv {
    Header: (Boolean|Mapping)?
}

/// The configuration object that specifies the monitoring schedule and defines the monitoring job.
open class MonitoringScheduleConfig {
    ScheduleConfig: (ScheduleConfig)?
    MonitoringJobDefinition: (MonitoringJobDefinition)?
    MonitoringJobDefinitionName: (String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9])*$"#)))|Mapping)?
    MonitoringType: (MonitoringType)?
}

/// The array of inputs for the monitoring job.
open class MonitoringInputs {
}

/// Configuration details about the monitoring schedule.
open class ScheduleConfig {
    DataAnalysisStartTime: (DataAnalysisTimeString)?
    DataAnalysisEndTime: (DataAnalysisTimeString)?
    ScheduleExpression: String|Mapping
}

typealias MonitoringExecutionSummaryMonitoringExecutionStatus = "Pending"|"Completed"|"CompletedWithViolations"|"InProgress"|"Failed"|"Stopping"|"Stopped"

/// Summary of information about monitoring job
open class MonitoringExecutionSummary {
    MonitoringExecutionStatus: MonitoringExecutionSummaryMonitoringExecutionStatus|Mapping
    MonitoringScheduleName: MonitoringScheduleName
    ProcessingJobArn: (String(matches(Regex(#"aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:processing-job/.*"#)))|Mapping)?
    ScheduledTime: String|Mapping
    CreationTime: String|Mapping
    EndpointName: (EndpointName)?
    FailureReason: (String|Mapping)?
    LastModifiedTime: String|Mapping
}

/// The name of the monitoring schedule.
open class MonitoringScheduleName {
}

/// The baseline statistics resource for a monitoring job.
open class StatisticsResource {
    S3Uri: (S3Uri)?
}

/// The output configuration for monitoring jobs.
open class MonitoringOutputConfig {
    KmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
    MonitoringOutputs: Listing<MonitoringOutput>
}

/// Specifies a time limit for how long the monitoring job is allowed to run.
open class StoppingCondition {
    MaxRuntimeInSeconds: Int|Mapping
}

/// The Amazon S3 URI.
open class S3Uri {
}

/// Arguments for the container used to run the monitoring job.
open class ContainerArgument {
}

/// The type of monitoring job.
open class MonitoringType {
}

/// Defines the monitoring job.
open class MonitoringJobDefinition {
    BaselineConfig: (BaselineConfig)?
    Environment: (Dynamic)?
    MonitoringAppSpecification: MonitoringAppSpecification
    MonitoringResources: MonitoringResources
    MonitoringInputs: MonitoringInputs
    MonitoringOutputConfig: MonitoringOutputConfig
    NetworkConfig: (NetworkConfig)?
    RoleArn: String(matches(Regex(#"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping
    StoppingCondition: (StoppingCondition)?
}

/// Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
open class BaselineConfig {
    ConstraintsResource: (ConstraintsResource)?
    StatisticsResource: (StatisticsResource)?
}

typealias BatchTransformInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias BatchTransformInputS3InputMode = "Pipe"|"File"

/// The batch transform input for a monitoring job.
open class BatchTransformInput {
    DataCapturedDestinationS3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    DatasetFormat: DatasetFormat
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3DataDistributionType: (BatchTransformInputS3DataDistributionType|Mapping)?
    S3InputMode: (BatchTransformInputS3InputMode|Mapping)?
    ExcludeFeaturesAttribute: (String|Mapping)?
}

/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
open class VpcConfig {
    SecurityGroupIds: Listing<String|Mapping>
    Subnets: Listing<String|Mapping>
}

/// Resource Type definition for AWS::SageMaker::MonitoringSchedule
open class MonitoringSchedule extends cloudformation.Resource {

    Type = "AWS::SageMaker::MonitoringSchedule"


    /// 
    hidden MonitoringScheduleName: MonitoringScheduleName

    /// 
    hidden MonitoringScheduleConfig: MonitoringScheduleConfig

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<Tag>)?

    /// Describes metadata on the last execution to run, if there was one.
    hidden LastMonitoringExecutionSummary: (MonitoringExecutionSummary)?

    /// The status of a schedule job.
    hidden MonitoringScheduleStatus: (MonitoringScheduleMonitoringScheduleStatus|Mapping)?

    /// 
    hidden EndpointName: (EndpointName)?

    /// Contains the reason a monitoring job failed, if it failed.
    hidden FailureReason: (String|Mapping)?

    Properties {
        ["MonitoringScheduleName"] = if (MonitoringScheduleName == null) null else MonitoringScheduleName
        ["MonitoringScheduleConfig"] = if (MonitoringScheduleConfig == null) null else MonitoringScheduleConfig
        ["Tags"] = if (Tags == null) null else Tags
        ["LastMonitoringExecutionSummary"] = if (LastMonitoringExecutionSummary == null) null else LastMonitoringExecutionSummary
        ["MonitoringScheduleStatus"] = if (MonitoringScheduleStatus == null) null else MonitoringScheduleStatus
        ["EndpointName"] = if (EndpointName == null) null else EndpointName
        ["FailureReason"] = if (FailureReason == null) null else FailureReason
    }

}


typealias MonitoringScheduleMonitoringScheduleStatus = "Pending"|"Failed"|"Scheduled"|"Stopped"
