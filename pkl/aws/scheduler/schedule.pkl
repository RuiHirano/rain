/// AWS::Scheduler::Schedule
///
/// Generated by rain build --pkl-class AWS::Scheduler::Schedule
module aws.scheduler.schedule

import "../../cloudformation.pkl"

/// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
open class PlacementStrategyType {
}

/// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
open class PropagateTags {
}

/// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
open class AssignPublicIp {
}

/// EventBridge PutEvent predefined target type.
open class EventBridgeParameters {
    DetailType: String|Mapping
    Source: String(matches(Regex(#"^(?=[/\.\-_A-Za-z0-9]+)((?!aws\.).*)|(\$(\.[\w_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping
}

/// An object representing a constraint on task placement.
open class PlacementConstraint {
    Type: (PlacementConstraintType)?
    Expression: (String|Mapping)?
}

/// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
open class PlacementConstraintType {
}

/// The schedule target.
open class Target {
    Arn: String|Mapping
    RetryPolicy: (RetryPolicy)?
    Input: (String|Mapping)?
    KinesisParameters: (KinesisParameters)?
    SageMakerPipelineParameters: (SageMakerPipelineParameters)?
    RoleArn: String(matches(Regex(#"^arn:aws(-[a-z]+)?:iam::\d{12}:role\/[\w+=,.@\/-]+$"#)))|Mapping
    DeadLetterConfig: (DeadLetterConfig)?
    EcsParameters: (EcsParameters)?
    EventBridgeParameters: (EventBridgeParameters)?
    SqsParameters: (SqsParameters)?
}

/// This structure specifies the network configuration for an ECS task.
open class NetworkConfiguration {
    AwsvpcConfiguration: (AwsVpcConfiguration)?
}

/// A RetryPolicy object that includes information about the retry policy settings.
open class RetryPolicy {
    MaximumEventAgeInSeconds: (Number|Mapping)?
    MaximumRetryAttempts: (Number|Mapping)?
}

/// Specifies whether the schedule is enabled or disabled.
open class ScheduleState {
}

/// 
open class TagMap {
}

/// Determines whether the schedule is executed within a flexible time window.
open class FlexibleTimeWindowMode {
}

/// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see AWS Fargate on Amazon ECS in the Amazon Elastic Container Service Developer Guide.
open class LaunchType {
}

/// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
open class SageMakerPipelineParameter {
    Name: String(matches(Regex(#"^[A-Za-z0-9\-_]*$"#)))|Mapping
    Value: String|Mapping
}

/// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
open class SqsParameters {
    MessageGroupId: (String|Mapping)?
}

/// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
open class AwsVpcConfiguration {
    Subnets: Listing<String|Mapping>
    SecurityGroups: (Listing<String|Mapping>)?
    AssignPublicIp: (AssignPublicIp)?
}

/// A DeadLetterConfig object that contains information about a dead-letter queue configuration.
open class DeadLetterConfig {
    Arn: (String(matches(Regex(#"^arn:aws(-[a-z]+)?:sqs:[a-z0-9\-]+:\d{12}:[a-zA-Z0-9\-_]+$"#)))|Mapping)?
}

/// The custom parameters to be used when the target is an Amazon ECS task.
open class EcsParameters {
    TaskDefinitionArn: String|Mapping
    TaskCount: (Number|Mapping)?
    EnableECSManagedTags: (Boolean|Mapping)?
    ReferenceId: (String|Mapping)?
    Tags: (Listing<TagMap>)?
    LaunchType: (LaunchType)?
    PlatformVersion: (String|Mapping)?
    Group: (String|Mapping)?
    EnableExecuteCommand: (Boolean|Mapping)?
    NetworkConfiguration: (NetworkConfiguration)?
    CapacityProviderStrategy: (Listing<CapacityProviderStrategyItem>)?
    PlacementConstraints: (Listing<PlacementConstraint>)?
    PlacementStrategy: (Listing<PlacementStrategy>)?
    PropagateTags: (PropagateTags)?
}

/// Flexible time window allows configuration of a window within which a schedule can be invoked
open class FlexibleTimeWindow {
    Mode: FlexibleTimeWindowMode
    MaximumWindowInMinutes: (Number|Mapping)?
}

/// The details of a capacity provider strategy.
open class CapacityProviderStrategyItem {
    Weight: (Number|Mapping)?
    Base: (Number|Mapping)?
    CapacityProvider: String|Mapping
}

/// The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
open class KinesisParameters {
    PartitionKey: String|Mapping
}

/// The task placement strategy for a task or service.
open class PlacementStrategy {
    Type: (PlacementStrategyType)?
    Field: (String|Mapping)?
}

/// These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
open class SageMakerPipelineParameters {
    PipelineParameterList: (Listing<SageMakerPipelineParameter>)?
}

/// Definition of AWS::Scheduler::Schedule Resource Type
open class Schedule extends cloudformation.Resource {

    Type = "AWS::Scheduler::Schedule"


    /// 
    hidden Target: Target

    /// 
    hidden FlexibleTimeWindow: FlexibleTimeWindow

    /// The name of the schedule group to associate with this schedule. If you omit this, the default schedule group is used.
    hidden GroupName: (String(matches(Regex(#"^[0-9a-zA-Z-_.]+$"#)))|Mapping)?

    /// The ARN for a KMS Key that will be used to encrypt customer data.
    hidden KmsKeyArn: (String(matches(Regex(#"^arn:aws(-[a-z]+)?:kms:[a-z0-9\-]+:\d{12}:(key|alias)\/[0-9a-zA-Z-_]*$"#)))|Mapping)?

    /// The scheduling expression.
    hidden ScheduleExpression: String|Mapping

    /// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the StartDate you specify.
    hidden StartDate: (String|Mapping)?

    /// 
    hidden State: (ScheduleState)?

    /// The description of the schedule.
    hidden Description: (String|Mapping)?

    /// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the EndDate you specify.
    hidden EndDate: (String|Mapping)?

    /// 
    hidden Name: (String(matches(Regex(#"^[0-9a-zA-Z-_.]+$"#)))|Mapping)?

    /// The timezone in which the scheduling expression is evaluated.
    hidden ScheduleExpressionTimezone: (String|Mapping)?

    Properties {
        ["Target"] = if (Target == null) null else Target
        ["FlexibleTimeWindow"] = if (FlexibleTimeWindow == null) null else FlexibleTimeWindow
        ["GroupName"] = if (GroupName == null) null else GroupName
        ["KmsKeyArn"] = if (KmsKeyArn == null) null else KmsKeyArn
        ["ScheduleExpression"] = if (ScheduleExpression == null) null else ScheduleExpression
        ["StartDate"] = if (StartDate == null) null else StartDate
        ["State"] = if (State == null) null else State
        ["Description"] = if (Description == null) null else Description
        ["EndDate"] = if (EndDate == null) null else EndDate
        ["Name"] = if (Name == null) null else Name
        ["ScheduleExpressionTimezone"] = if (ScheduleExpressionTimezone == null) null else ScheduleExpressionTimezone
    }

}
