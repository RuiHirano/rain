/// AWS::SSM::PatchBaseline
///
/// Generated by rain build --pkl-class AWS::SSM::PatchBaseline
module aws.ssm.patchbaseline

import "../../cloudformation.pkl"

/// A set of rules defining the approval rules for a patch baseline.
open class RuleGroup {
    PatchRules: (Listing<Rule>)?
}

typealias RuleComplianceLevel = "CRITICAL"|"HIGH"|"INFORMATIONAL"|"LOW"|"MEDIUM"|"UNSPECIFIED"

/// Defines an approval rule for a patch baseline.
open class Rule {
    ApproveUntilDate: (String|Mapping)?
    EnableNonSecurity: (Boolean|Mapping)?
    PatchFilterGroup: (PatchFilterGroup)?
    ApproveAfterDays: (Int|Mapping)?
    ComplianceLevel: (RuleComplianceLevel|Mapping)?
}

typealias PatchFilterKey = "ADVISORY_ID"|"ARCH"|"BUGZILLA_ID"|"CLASSIFICATION"|"CVE_ID"|"EPOCH"|"MSRC_SEVERITY"|"NAME"|"PATCH_ID"|"PATCH_SET"|"PRIORITY"|"PRODUCT"|"PRODUCT_FAMILY"|"RELEASE"|"REPOSITORY"|"SECTION"|"SECURITY"|"SEVERITY"|"VERSION"

/// Defines which patches should be included in a patch baseline.
open class PatchFilter {
    Values: (Listing<String|Mapping>)?
    Key: (PatchFilterKey|Mapping)?
}

/// The patch filter group that defines the criteria for the rule.
open class PatchFilterGroup {
    PatchFilters: (Listing<PatchFilter>)?
}

/// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
open class PatchSource {
    Products: (Listing<String|Mapping>)?
    Configuration: (String|Mapping)?
    Name: (String(matches(Regex(#"^[a-zA-Z0-9_\-.]{3,50}$"#)))|Mapping)?
}

/// Metadata that you assign to your AWS resources.
open class Tag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Resource Type definition for AWS::SSM::PatchBaseline
open class PatchBaseline extends cloudformation.Resource {

    Type = "AWS::SSM::PatchBaseline"


    /// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
    hidden Sources: (Listing<PatchSource>)?

    /// Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.
    hidden Tags: (Listing<Tag>)?

    /// The name of the patch baseline.
    hidden Name: String(matches(Regex(#"^[a-zA-Z0-9_\-.]{3,128}$"#)))|Mapping

    /// A list of explicitly approved patches for the baseline.
    hidden ApprovedPatches: (Listing<String|Mapping>)?

    /// The action for Patch Manager to take on patches included in the RejectedPackages list.
    hidden RejectedPatchesAction: (PatchBaselineRejectedPatchesAction|Mapping)?

    /// Set the baseline as default baseline. Only registering to default patch baseline is allowed.
    hidden DefaultBaseline: (Boolean|Mapping)?

    /// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
    hidden OperatingSystem: (PatchBaselineOperatingSystem|Mapping)?

    /// 
    hidden ApprovalRules: (RuleGroup)?

    /// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
    hidden ApprovedPatchesComplianceLevel: (PatchBaselineApprovedPatchesComplianceLevel|Mapping)?

    /// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
    hidden ApprovedPatchesEnableNonSecurity: (Boolean|Mapping)?

    /// A set of global filters used to include patches in the baseline.
    hidden GlobalFilters: (PatchFilterGroup)?

    /// The description of the patch baseline.
    hidden Description: (String|Mapping)?

    /// A list of explicitly rejected patches for the baseline.
    hidden RejectedPatches: (Listing<String|Mapping>)?

    /// PatchGroups is used to associate instances with a specific patch baseline
    hidden PatchGroups: (Listing<String|Mapping>)?

    Properties {
        ["Sources"] = if (Sources == null) null else Sources
        ["Tags"] = if (Tags == null) null else Tags
        ["Name"] = if (Name == null) null else Name
        ["ApprovedPatches"] = if (ApprovedPatches == null) null else ApprovedPatches
        ["RejectedPatchesAction"] = if (RejectedPatchesAction == null) null else RejectedPatchesAction
        ["DefaultBaseline"] = if (DefaultBaseline == null) null else DefaultBaseline
        ["OperatingSystem"] = if (OperatingSystem == null) null else OperatingSystem
        ["ApprovalRules"] = if (ApprovalRules == null) null else ApprovalRules
        ["ApprovedPatchesComplianceLevel"] = if (ApprovedPatchesComplianceLevel == null) null else ApprovedPatchesComplianceLevel
        ["ApprovedPatchesEnableNonSecurity"] = if (ApprovedPatchesEnableNonSecurity == null) null else ApprovedPatchesEnableNonSecurity
        ["GlobalFilters"] = if (GlobalFilters == null) null else GlobalFilters
        ["Description"] = if (Description == null) null else Description
        ["RejectedPatches"] = if (RejectedPatches == null) null else RejectedPatches
        ["PatchGroups"] = if (PatchGroups == null) null else PatchGroups
    }

}


typealias PatchBaselineRejectedPatchesAction = "ALLOW_AS_DEPENDENCY"|"BLOCK"

typealias PatchBaselineOperatingSystem = "WINDOWS"|"AMAZON_LINUX"|"AMAZON_LINUX_2"|"AMAZON_LINUX_2022"|"AMAZON_LINUX_2023"|"UBUNTU"|"REDHAT_ENTERPRISE_LINUX"|"SUSE"|"CENTOS"|"ORACLE_LINUX"|"DEBIAN"|"MACOS"|"RASPBIAN"|"ROCKY_LINUX"|"ALMA_LINUX"

typealias PatchBaselineApprovedPatchesComplianceLevel = "CRITICAL"|"HIGH"|"MEDIUM"|"LOW"|"INFORMATIONAL"|"UNSPECIFIED"
