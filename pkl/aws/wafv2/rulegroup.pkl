/// AWS::WAFv2::RuleGroup
///
/// Generated by rain build --pkl-class AWS::WAFv2::RuleGroup
module aws.wafv2.rulegroup

import "../../cloudformation.pkl"

typealias RuleGroupCustomHTTPHeaderValue = String|Mapping


typealias RuleGroupMapMatchScope = String|Mapping


/// Custom response body.
open class RuleGroupCustomResponseBody {
    ContentType: RuleGroupResponseContentType
    Content: RuleGroupResponseContent
}

typealias RuleGroupJsonMatchScope = String|Mapping


typealias RuleGroupEvaluationWindowSec = Int|Mapping


typealias RuleGroupEntityDescription = String|Mapping


/// 
open class RuleGroupImmunityTimeProperty {
    ImmunityTime: Int|Mapping
}

typealias RuleGroupOversizeHandling = String|Mapping


typealias RuleGroupTextTransformationPriority = Int|Mapping


/// The pattern to look for in the JSON body.
open class RuleGroupJsonMatchPattern {
    IncludedPaths: (Listing<RuleGroupJsonPointerPath>)?
    All: (Dynamic)?
}

typealias RuleGroupSearchString = String|Mapping


typealias RuleGroupJsonPointerPath = String|Mapping


/// 
open class RuleGroupOrStatement {
    Statements: Listing<RuleGroupStatement>
}

typealias SizeConstraintStatementComparisonOperator = "EQ"|"NE"|"LE"|"LT"|"GE"|"GT"

/// Size Constraint statement.
open class RuleGroupSizeConstraintStatement {
    ComparisonOperator: SizeConstraintStatementComparisonOperator|Mapping
    Size: Number|Mapping
    TextTransformations: Listing<RuleGroupTextTransformation>
    FieldToMatch: RuleGroupFieldToMatch
}

/// 
open class RuleGroupLabel {
    Name: RuleGroupLabelName
}

/// Specifies the request's query string as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitQueryString {
    TextTransformations: Listing<RuleGroupTextTransformation>
}

/// First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
open class RuleGroupStatement {
    ByteMatchStatement: (RuleGroupByteMatchStatement)?
    LabelMatchStatement: (RuleGroupLabelMatchStatement)?
    XssMatchStatement: (RuleGroupXssMatchStatement)?
    IPSetReferenceStatement: (RuleGroupIPSetReferenceStatement)?
    AndStatement: (RuleGroupAndStatement)?
    OrStatement: (RuleGroupOrStatement)?
    SqliMatchStatement: (RuleGroupSqliMatchStatement)?
    SizeConstraintStatement: (RuleGroupSizeConstraintStatement)?
    NotStatement: (RuleGroupNotStatement)?
    RegexMatchStatement: (RuleGroupRegexMatchStatement)?
    GeoMatchStatement: (RuleGroupGeoMatchStatement)?
    RegexPatternSetReferenceStatement: (RuleGroupRegexPatternSetReferenceStatement)?
    RateBasedStatement: (RuleGroupRateBasedStatement)?
}

/// Action taken when Rule matches its condition.
open class RuleGroupRuleAction {
    Allow: (RuleGroupAllowAction)?
    Block: (RuleGroupBlockAction)?
    Count: (RuleGroupCountAction)?
    Captcha: (RuleGroupCaptchaAction)?
    Challenge: (RuleGroupChallengeAction)?
}

/// 
open class RuleGroupCaptchaConfig {
    ImmunityTimeProperty: (RuleGroupImmunityTimeProperty)?
}

/// 
open class RuleGroupAndStatement {
    Statements: Listing<RuleGroupStatement>
}

/// Includes cookies of a web request.
open class RuleGroupCookies {
    MatchPattern: RuleGroupCookieMatchPattern
    MatchScope: RuleGroupMapMatchScope
    OversizeHandling: RuleGroupOversizeHandling
}

/// 
open class RuleGroupIPSetReferenceStatement {
    Arn: RuleGroupResourceArn
    IPSetForwardedIPConfig: (RuleGroupIPSetForwardedIPConfiguration)?
}

/// Allow traffic towards application.
open class RuleGroupAllowAction {
    CustomRequestHandling: (RuleGroupCustomRequestHandling)?
}

typealias RuleGroupPositionalConstraint = String|Mapping


typealias RuleGroupScope = String|Mapping


typealias RuleGroupSearchStringBase64 = String|Mapping


/// Specifies a header as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitHeader {
    TextTransformations: Listing<RuleGroupTextTransformation>
    Name: String(matches(Regex(#".*\S.*"#)))|Mapping
}

/// Xss Match Statement.
open class RuleGroupXssMatchStatement {
    FieldToMatch: RuleGroupFieldToMatch
    TextTransformations: Listing<RuleGroupTextTransformation>
}

/// Sqli Match Statement.
open class RuleGroupSqliMatchStatement {
    SensitivityLevel: (RuleGroupSensitivityLevel)?
    FieldToMatch: RuleGroupFieldToMatch
    TextTransformations: Listing<RuleGroupTextTransformation>
}

/// Inspect the request body as JSON. The request body immediately follows the request headers.
open class RuleGroupJsonBody {
    MatchPattern: RuleGroupJsonMatchPattern
    MatchScope: RuleGroupJsonMatchScope
    InvalidFallbackBehavior: (RuleGroupBodyParsingFallbackBehavior)?
    OversizeHandling: (RuleGroupOversizeHandling)?
}

/// 
open class RuleGroupLabelMatchStatement {
    Scope: RuleGroupLabelMatchScope
    Key: RuleGroupLabelMatchKey
}

typealias RuleGroupEntityId = String|Mapping


typealias RuleGroupRateLimitHTTPMethod = Dynamic


typealias RuleGroupCustomHTTPHeaderName = String|Mapping


/// The pattern to look for in the request headers.
open class RuleGroupHeaderMatchPattern {
    All: (Dynamic)?
    IncludedHeaders: (Listing<String|Mapping>)?
    ExcludedHeaders: (Listing<String|Mapping>)?
}

/// Block traffic towards application.
open class RuleGroupBlockAction {
    CustomResponse: (RuleGroupCustomResponse)?
}

typealias RuleGroupCustomResponseBodies = Mapping<String, Any>


typealias RuleGroupLabelMatchScope = String|Mapping


/// Specifies the request's URI Path as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitUriPath {
    TextTransformations: Listing<RuleGroupTextTransformation>
}

typealias RuleGroupLabelMatchKey = String|Mapping


/// Custom request handling.
open class RuleGroupCustomRequestHandling {
    InsertHeaders: Listing<RuleGroupCustomHTTPHeader>
}

typealias RuleGroupResourceArn = String|Mapping


/// The body of a web request. This immediately follows the request headers.
open class RuleGroupBody {
    OversizeHandling: (RuleGroupOversizeHandling)?
}

/// 
open class RuleGroupTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// 
open class RuleGroupRegexMatchStatement {
    RegexString: String|Mapping
    FieldToMatch: RuleGroupFieldToMatch
    TextTransformations: Listing<RuleGroupTextTransformation>
}

/// Specifies a query argument in the request as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitQueryArgument {
    Name: String(matches(Regex(#".*\S.*"#)))|Mapping
    TextTransformations: Listing<RuleGroupTextTransformation>
}

/// 
open class RuleGroupGeoMatchStatement {
    ForwardedIPConfig: (RuleGroupForwardedIPConfiguration)?
    CountryCodes: (Listing<String|Mapping>)?
}

/// Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
open class RuleGroupChallengeAction {
    CustomRequestHandling: (RuleGroupCustomRequestHandling)?
}

typealias RuleGroupEntityName = String|Mapping


/// Count traffic towards application.
open class RuleGroupCountAction {
    CustomRequestHandling: (RuleGroupCustomRequestHandling)?
}

/// Visibility Metric of the RuleGroup.
open class RuleGroupVisibilityConfig {
    SampledRequestsEnabled: Boolean|Mapping
    CloudWatchMetricsEnabled: Boolean|Mapping
    MetricName: String|Mapping
}

/// The pattern to look for in the request cookies.
open class RuleGroupCookieMatchPattern {
    All: (Dynamic)?
    IncludedCookies: (Listing<String|Mapping>)?
    ExcludedCookies: (Listing<String|Mapping>)?
}

typealias RateBasedStatementAggregateKeyType = "IP"|"FORWARDED_IP"|"CONSTANT"|"CUSTOM_KEYS"

/// 
open class RuleGroupRateBasedStatement {
    ScopeDownStatement: (RuleGroupStatement)?
    ForwardedIPConfig: (RuleGroupForwardedIPConfiguration)?
    Limit: RuleGroupRateLimit
    EvaluationWindowSec: (RuleGroupEvaluationWindowSec)?
    AggregateKeyType: RateBasedStatementAggregateKeyType|Mapping
    CustomKeys: (Listing<RuleGroupRateBasedStatementCustomKey>)?
}

typealias ForwardedIPConfigurationFallbackBehavior = "MATCH"|"NO_MATCH"

/// 
open class RuleGroupForwardedIPConfiguration {
    HeaderName: String(matches(Regex(#"^[a-zA-Z0-9-]+{1,255}$"#)))|Mapping
    FallbackBehavior: ForwardedIPConfigurationFallbackBehavior|Mapping
}

typealias RuleGroupResponseStatusCode = Int|Mapping


typealias RuleGroupRateLimitIP = Dynamic


/// Rule of RuleGroup that contains condition and action.
open class RuleGroupRule {
    Statement: RuleGroupStatement
    Action: (RuleGroupRuleAction)?
    RuleLabels: (Listing<RuleGroupLabel>)?
    VisibilityConfig: RuleGroupVisibilityConfig
    CaptchaConfig: (RuleGroupCaptchaConfig)?
    ChallengeConfig: (RuleGroupChallengeConfig)?
    Name: RuleGroupEntityName
    Priority: RuleGroupRulePriority
}

/// Byte Match statement.
open class RuleGroupByteMatchStatement {
    PositionalConstraint: RuleGroupPositionalConstraint
    SearchString: (RuleGroupSearchString)?
    SearchStringBase64: (RuleGroupSearchStringBase64)?
    FieldToMatch: RuleGroupFieldToMatch
    TextTransformations: Listing<RuleGroupTextTransformation>
}

typealias RuleGroupResponseContent = String|Mapping


typealias RuleGroupTextTransformationType = String|Mapping


/// HTTP header.
open class RuleGroupCustomHTTPHeader {
    Name: RuleGroupCustomHTTPHeaderName
    Value: RuleGroupCustomHTTPHeaderValue
}

/// Field of the request to match.
open class RuleGroupFieldToMatch {
    AllQueryArguments: (Dynamic)?
    UriPath: (Dynamic)?
    Headers: (RuleGroupHeaders)?
    SingleQueryArgument: (Dynamic)?
    QueryString: (Dynamic)?
    Body: (RuleGroupBody)?
    Method: (Dynamic)?
    JsonBody: (RuleGroupJsonBody)?
    Cookies: (RuleGroupCookies)?
    JA3Fingerprint: (RuleGroupJA3Fingerprint)?
    SingleHeader: (Dynamic)?
}

typealias RuleGroupRulePriority = Int|Mapping


/// Checks valid token exists with request.
open class RuleGroupCaptchaAction {
    CustomRequestHandling: (RuleGroupCustomRequestHandling)?
}

typealias RuleGroupBodyParsingFallbackBehavior = String|Mapping


typealias RuleGroupResponseContentType = String|Mapping


/// 
open class RuleGroupNotStatement {
    Statement: RuleGroupStatement
}

typealias RuleGroupRateLimitForwardedIP = Dynamic


/// Specifies a label namespace to use as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitLabelNamespace {
    Namespace: String(matches(Regex(#"^[0-9A-Za-z_:-]{1,1024}$"#)))|Mapping
}

/// 
open class RuleGroupRegexPatternSetReferenceStatement {
    TextTransformations: Listing<RuleGroupTextTransformation>
    Arn: RuleGroupResourceArn
    FieldToMatch: RuleGroupFieldToMatch
}

/// Text Transformation on the Search String before match.
open class RuleGroupTextTransformation {
    Priority: RuleGroupTextTransformationPriority
    Type: RuleGroupTextTransformationType
}

/// 
open class RuleGroupChallengeConfig {
    ImmunityTimeProperty: (RuleGroupImmunityTimeProperty)?
}

/// Custom response.
open class RuleGroupCustomResponse {
    ResponseCode: RuleGroupResponseStatusCode
    CustomResponseBodyKey: (String(matches(Regex(#"^[\w\-]+$"#)))|Mapping)?
    ResponseHeaders: (Listing<RuleGroupCustomHTTPHeader>)?
}

typealias JA3FingerprintFallbackBehavior = "MATCH"|"NO_MATCH"

/// Includes the JA3 fingerprint of a web request.
open class RuleGroupJA3Fingerprint {
    FallbackBehavior: JA3FingerprintFallbackBehavior|Mapping
}

typealias RuleGroupSensitivityLevel = String|Mapping


typealias RuleGroupRateLimit = Int|Mapping


/// Includes headers of a web request.
open class RuleGroupHeaders {
    MatchPattern: RuleGroupHeaderMatchPattern
    MatchScope: RuleGroupMapMatchScope
    OversizeHandling: RuleGroupOversizeHandling
}

typealias IPSetForwardedIPConfigurationPosition = "FIRST"|"LAST"|"ANY"

typealias IPSetForwardedIPConfigurationFallbackBehavior = "MATCH"|"NO_MATCH"

/// 
open class RuleGroupIPSetForwardedIPConfiguration {
    Position: IPSetForwardedIPConfigurationPosition|Mapping
    HeaderName: String(matches(Regex(#"^[a-zA-Z0-9-]+{1,255}$"#)))|Mapping
    FallbackBehavior: IPSetForwardedIPConfigurationFallbackBehavior|Mapping
}

/// 
open class RuleGroupLabelSummary {
    Name: (RuleGroupLabelName)?
}

/// Specifies a single custom aggregate key for a rate-base rule.
open class RuleGroupRateBasedStatementCustomKey {
    Cookie: (RuleGroupRateLimitCookie)?
    LabelNamespace: (RuleGroupRateLimitLabelNamespace)?
    UriPath: (RuleGroupRateLimitUriPath)?
    ForwardedIP: (RuleGroupRateLimitForwardedIP)?
    Header: (RuleGroupRateLimitHeader)?
    HTTPMethod: (RuleGroupRateLimitHTTPMethod)?
    IP: (RuleGroupRateLimitIP)?
    QueryArgument: (RuleGroupRateLimitQueryArgument)?
    QueryString: (RuleGroupRateLimitQueryString)?
}

typealias RuleGroupLabelName = String|Mapping


/// Specifies a cookie as an aggregate key for a rate-based rule.
open class RuleGroupRateLimitCookie {
    TextTransformations: Listing<RuleGroupTextTransformation>
    Name: String(matches(Regex(#".*\S.*"#)))|Mapping
}

/// 
open class RuleGroupRuleGroup {
    VisibilityConfig: (RuleGroupVisibilityConfig)?
    Capacity: (Int|Mapping)?
    Name: (RuleGroupEntityName)?
    Id: (RuleGroupEntityId)?
    Arn: (RuleGroupResourceArn)?
    Description: (RuleGroupEntityDescription)?
    Rules: (Listing<RuleGroupRule>)?
}

/// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
open class RuleGroup extends cloudformation.Resource {

    Type = "AWS::WAFv2::RuleGroup"


    /// 
    hidden Description: (RuleGroupEntityDescription)?

    /// 
    hidden Capacity: Int|Mapping

    /// 
    hidden Name: (RuleGroupEntityName)?

    /// Collection of Rules.
    hidden Rules: (Listing<RuleGroupRule>)?

    /// Collection of Available Labels.
    hidden AvailableLabels: (Listing<RuleGroupLabelSummary>)?

    /// 
    hidden Tags: (Listing<RuleGroupTag>)?

    /// 
    hidden CustomResponseBodies: (RuleGroupCustomResponseBodies)?

    /// Collection of Consumed Labels.
    hidden ConsumedLabels: (Listing<RuleGroupLabelSummary>)?

    /// 
    hidden Scope: RuleGroupScope

    /// 
    hidden VisibilityConfig: RuleGroupVisibilityConfig

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["Capacity"] = if (Capacity == null) null else Capacity
        ["Name"] = if (Name == null) null else Name
        ["Rules"] = if (Rules == null) null else Rules
        ["AvailableLabels"] = if (AvailableLabels == null) null else AvailableLabels
        ["Tags"] = if (Tags == null) null else Tags
        ["CustomResponseBodies"] = if (CustomResponseBodies == null) null else CustomResponseBodies
        ["ConsumedLabels"] = if (ConsumedLabels == null) null else ConsumedLabels
        ["Scope"] = if (Scope == null) null else Scope
        ["VisibilityConfig"] = if (VisibilityConfig == null) null else VisibilityConfig
    }

}
