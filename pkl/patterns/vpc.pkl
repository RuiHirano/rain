import "../cloudformation.pkl" as cfn
import "../aws/ec2/vpc.pkl"
import "../aws/ec2/subnet.pkl"
import "../aws/ec2/routetable.pkl"
import "../aws/ec2/route.pkl"
import "../aws/ec2/eip.pkl"
import "../aws/ec2/natgateway.pkl"
import "../aws/ec2/internetgateway.pkl"
import "../aws/ec2/subnetroutetableassociation.pkl"

open class Subnet {
    LogicalId: String
    IsPublic: Boolean
    RouteTable: routetable.RouteTable = new routetable.RouteTable {}
    DefaultRoute: route.Route = new route.Route {}
    Az: cfn.RefString
    Cidr: String
    PublicNATGateway: cfn.RefString?

    function getPrivateResources(vpcId: cfn.RefString, gwId: cfn.RefString): Mapping = new Mapping {
        [LogicalId] = new subnet.Subnet {
            CidrBlock = Cidr
            AvailabilityZone = Az
            MapPublicIpOnLaunch = IsPublic
            VpcId = vpcId
        }

        [LogicalId + "RouteTable"] = new routetable.RouteTable {
            VpcId = vpcId
        }

        [LogicalId + "RouteTableAssociation"] = new subnetroutetableassociation.SubnetRouteTableAssociation {
            RouteTableId = cfn.Ref(LogicalId + "RouteTable")
            SubnetId = cfn.Ref(LogicalId)
        }

        [LogicalId + "DefaultRoute"] = new route.Route {
            DestinationCidrBlock = "0.0.0.0/0"
            NatGatewayId = if (IsPublic) null else PublicNATGateway
            GatewayId = if (IsPublic) gwId else null
            RouteTableId = cfn.Ref(LogicalId + "RouteTable")
        }
    }

    function getResources(vpcId: cfn.RefString, gwId: cfn.RefString): Mapping = if (IsPublic) (getPrivateResources(vpcId, gwId)) {
        [LogicalId + "NATGateway"] = new natgateway.NatGateway {
            AllocationId = cfn.GetAtt(LogicalId + "EIP", "AllocationId")
            SubnetId = cfn.Ref(LogicalId)
        } 

        [LogicalId + "EIP"] = new eip.EIP {
            Domain = vpcId
        }
    } else getPrivateResources(vpcId, gwId)

    function getNATGateway(): cfn.RefString? = if (IsPublic) cfn.Ref(LogicalId + "NATGateway") else null
}

open class VPC {
    hidden Subnets: Listing<Subnet>

    function getResources(logicalId: String): Mapping = new Mapping {

        [logicalId] = new vpc.VPC {
            CidrBlock = "10.0.0.0/16"
            EnableDnsHostnames = true
            EnableDnsSupport = true
            InstanceTenancy = "default"
        } 

        [logicalId + "Gateway"] = new internetgateway.InternetGateway {}

        for (subnet in Subnets) {
            for (subresourceid, subresource in subnet.getResources(cfn.Ref(logicalId), cfn.Ref(logicalId + "Gateway"))) {
                [subresourceid] = subresource
            }
        }
    }
}

